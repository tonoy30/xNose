[
  {
    "Name": "ConfigurationControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "ReturnSuccessWithAdminRole",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    foreach (var route in RoutesConstants.GetConfigureRoutes())\r\n    {\r\n        // Act\r\n        var response = await Client.GetAsync($\u0022/Configuration/{route}\u0022);\r\n        // Assert\r\n        response.EnsureSuccessStatusCode();\r\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnRedirectWithoutAdminRole",
        "Body": "{\r\n    //Remove\r\n    Client.DefaultRequestHeaders.Clear();\r\n    foreach (var route in RoutesConstants.GetConfigureRoutes())\r\n    {\r\n        // Act\r\n        var response = await Client.GetAsync($\u0022/Configuration/{route}\u0022);\r\n        // Assert           \r\n        response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n        //The redirect to login\r\n        response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GrantControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "ReturnSuccessWithAdminRole",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    foreach (var route in RoutesConstants.GetGrantRoutes())\r\n    {\r\n        // Act\r\n        var response = await Client.GetAsync($\u0022/Grant/{route}\u0022);\r\n        // Assert\r\n        response.EnsureSuccessStatusCode();\r\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnRedirectWithoutAdminRole",
        "Body": "{\r\n    //Remove\r\n    Client.DefaultRequestHeaders.Clear();\r\n    foreach (var route in RoutesConstants.GetGrantRoutes())\r\n    {\r\n        // Act\r\n        var response = await Client.GetAsync($\u0022/Grant/{route}\u0022);\r\n        // Assert           \r\n        response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n        //The redirect to login\r\n        response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HomeControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "ReturnSuccessWithAdminRole",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/home/index\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnRedirectWithoutAdminRole",
        "Body": "{\r\n    //Remove\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/home/index\u0022);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IdentityControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "ReturnSuccessWithAdminRole",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    foreach (var route in RoutesConstants.GetIdentityRoutes())\r\n    {\r\n        // Act\r\n        var response = await Client.GetAsync($\u0022/Identity/{route}\u0022);\r\n        // Assert\r\n        response.EnsureSuccessStatusCode();\r\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnRedirectWithoutAdminRole",
        "Body": "{\r\n    //Remove\r\n    Client.DefaultRequestHeaders.Clear();\r\n    foreach (var route in RoutesConstants.GetIdentityRoutes())\r\n    {\r\n        // Act\r\n        var response = await Client.GetAsync($\u0022/Identity/{route}\u0022);\r\n        // Assert           \r\n        response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n        //The redirect to login\r\n        response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LogControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "ReturnRedirectInErrorsLogWithoutAdminRole",
        "Body": "{\r\n    //Remove\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/log/errorslog\u0022);\r\n    // Assert           \r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnRedirectInAuditLogWithoutAdminRole",
        "Body": "{\r\n    //Remove\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/log/auditlog\u0022);\r\n    // Assert           \r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnSuccessInErrorsLogWithAdminRole",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/log/errorslog\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnSuccessInAuditLogWithAdminRole",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/log/auditlog\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigurationControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "GetClients",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var newClient = await GenerateClient(dbContext);\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    // Act\r\n    var result = await controller.Clients(page: 1, search: string.Empty);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    viewResult.ViewName.Should().BeNullOrEmpty();\r\n    viewResult.ViewData.Should().NotBeNull();\r\n    var viewModel = Assert.IsType\u003CClientsDto\u003E(viewResult.ViewData.Model);\r\n    viewModel.Clients.Should().NotBeNull();\r\n    viewModel.Clients.Should().HaveCount(1);\r\n    viewModel.Clients[0].ClientId.Should().Be(newClient.ClientId);\r\n    viewModel.Clients[0].ClientName.Should().Be(newClient.ClientName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddClient",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var result = await controller.Client(clientDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(nameof(Client));\r\n    var client = await dbContext.Clients.Where(x =\u003E x.ClientId == clientDto.ClientId).SingleOrDefaultAsync();\r\n    var adddedClient = await clientService.GetClientAsync(client.Id);\r\n    clientDto.Should().BeEquivalentTo(adddedClient, opts =\u003E opts.Excluding(x =\u003E x.Id).Excluding(x =\u003E x.AccessTokenTypes).Excluding(x =\u003E x.ProtocolTypes).Excluding(x =\u003E x.RefreshTokenExpirations).Excluding(x =\u003E x.RefreshTokenUsages));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateClient",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientToAdd = ClientMock.GenerateRandomClient(0);\r\n    await dbContext.Clients.AddAsync(clientToAdd);\r\n    await dbContext.SaveChangesAsync();\r\n    dbContext.Entry(clientToAdd).State = EntityState.Detached;\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(clientToAdd.Id);\r\n    var result = await controller.Client(clientDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022Client\u0022);\r\n    var client = await dbContext.Clients.Where(x =\u003E x.ClientId == clientDto.ClientId).SingleOrDefaultAsync();\r\n    var adddedClient = await clientService.GetClientAsync(client.Id);\r\n    clientDto.Should().BeEquivalentTo(adddedClient, opts =\u003E opts.Excluding(x =\u003E x.Id).Excluding(x =\u003E x.AccessTokenTypes).Excluding(x =\u003E x.ProtocolTypes).Excluding(x =\u003E x.RefreshTokenExpirations).Excluding(x =\u003E x.RefreshTokenUsages));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteClient",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var client = ClientMock.GenerateRandomClient(0);\r\n    await dbContext.Clients.AddAsync(client);\r\n    await dbContext.SaveChangesAsync();\r\n    dbContext.Entry(client).State = EntityState.Detached;\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(client.Id);\r\n    var result = await controller.ClientDelete(clientDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022Clients\u0022);\r\n    var deletedClient = await dbContext.Clients.Where(x =\u003E x.Id == clientDto.Id).SingleOrDefaultAsync();\r\n    deletedClient.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddClientClaim",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var clientId = await clientService.AddClientAsync(clientDto);\r\n    var clientClaim = ClientDtoMock.GenerateRandomClientClaim(0, clientId);\r\n    var result = await controller.ClientClaims(clientClaim);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ClientClaims\u0022);\r\n    var clientClaimAdded = await dbContext.ClientClaims.Where(x =\u003E x.Client.Id == clientId).SingleOrDefaultAsync();\r\n    var adddedClientClaim = await clientService.GetClientClaimAsync(clientClaimAdded.Id);\r\n    clientClaim.Should().BeEquivalentTo(adddedClientClaim, opts =\u003E opts.Excluding(x =\u003E x.ClientClaimId).Excluding(x =\u003E x.ClientClaims).Excluding(x =\u003E x.ClientName));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "GetClientClaim",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var clientId = await clientService.AddClientAsync(clientDto);\r\n    var clientClaim = ClientDtoMock.GenerateRandomClientClaim(0, clientId);\r\n    await clientService.AddClientClaimAsync(clientClaim);\r\n    var clientClaimAdded = await dbContext.ClientClaims.Where(x =\u003E x.Client.Id == clientId).SingleOrDefaultAsync();\r\n    clientClaim.ClientClaimId = clientClaimAdded.Id;\r\n    var result = await controller.ClientClaims(clientId, page: 1);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    viewResult.ViewName.Should().BeNullOrEmpty();\r\n    viewResult.ViewData.Should().NotBeNull();\r\n    var viewModel = Assert.IsType\u003CClientClaimsDto\u003E(viewResult.ViewData.Model);\r\n    viewModel.ClientClaims.Count.Should().Be(1);\r\n    viewModel.ClientClaims[0].Should().BeEquivalentTo(clientClaimAdded, options =\u003E options.Excluding(x =\u003E x.ClientId).Excluding(x =\u003E x.Client));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "DeleteClientClaim",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var clientId = await clientService.AddClientAsync(clientDto);\r\n    var clientClaim = ClientDtoMock.GenerateRandomClientClaim(0, clientId);\r\n    await clientService.AddClientClaimAsync(clientClaim);\r\n    var clientClaimAdded = await dbContext.ClientClaims.Where(x =\u003E x.Client.Id == clientId).SingleOrDefaultAsync();\r\n    clientClaim.ClientClaimId = clientClaimAdded.Id;\r\n    dbContext.Entry(clientClaimAdded).State = EntityState.Detached;\r\n    var result = await controller.ClientClaimDelete(clientClaim);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ClientClaims\u0022);\r\n    var clientClaimDelete = await dbContext.ClientClaims.Where(x =\u003E x.Id == clientClaimAdded.Id).SingleOrDefaultAsync();\r\n    clientClaimDelete.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "AddClientSecret",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var clientId = await clientService.AddClientAsync(clientDto);\r\n    var clientSecret = ClientDtoMock.GenerateRandomClientSecret(0, clientId);\r\n    var result = await controller.ClientSecrets(clientSecret);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ClientSecrets\u0022);\r\n    var clientSecretAdded = await dbContext.ClientSecrets.Where(x =\u003E x.Client.Id == clientId).SingleOrDefaultAsync();\r\n    var newClientSecret = await clientService.GetClientSecretAsync(clientSecretAdded.Id);\r\n    clientSecret.Value.Should().Be(clientSecretAdded.Value);\r\n    clientSecret.Should().BeEquivalentTo(newClientSecret, opts =\u003E opts.Excluding(x =\u003E x.ClientSecretId).Excluding(x =\u003E x.ClientSecrets).Excluding(x =\u003E x.ClientName).Excluding(x =\u003E x.Value));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "GetClientSecret",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var clientId = await clientService.AddClientAsync(clientDto);\r\n    var clientSecret = ClientDtoMock.GenerateRandomClientSecret(0, clientId);\r\n    await clientService.AddClientSecretAsync(clientSecret);\r\n    var clientSecretAdded = await dbContext.ClientSecrets.Where(x =\u003E x.Client.Id == clientId).SingleOrDefaultAsync();\r\n    clientSecret.ClientSecretId = clientSecretAdded.Id;\r\n    var result = await controller.ClientSecrets(clientId, page: 1);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    viewResult.ViewName.Should().BeNullOrEmpty();\r\n    viewResult.ViewData.Should().NotBeNull();\r\n    clientSecretAdded.Value.Should().Be(clientSecret.Value);\r\n    var viewModel = Assert.IsType\u003CClientSecretsDto\u003E(viewResult.ViewData.Model);\r\n    viewModel.ClientSecrets.Count.Should().Be(1);\r\n    viewModel.ClientSecrets[0].Should().BeEquivalentTo(clientSecretAdded, opts =\u003E opts.Excluding(x =\u003E x.Value).Excluding(x =\u003E x.ClientId).Excluding(x =\u003E x.Client));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "DeleteClientSecret",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var clientId = await clientService.AddClientAsync(clientDto);\r\n    var clientSecret = ClientDtoMock.GenerateRandomClientSecret(0, clientId);\r\n    await clientService.AddClientSecretAsync(clientSecret);\r\n    var clientSecretAdded = await dbContext.ClientSecrets.Where(x =\u003E x.Client.Id == clientId).SingleOrDefaultAsync();\r\n    clientSecret.ClientSecretId = clientSecretAdded.Id;\r\n    dbContext.Entry(clientSecretAdded).State = EntityState.Detached;\r\n    var result = await controller.ClientSecretDelete(clientSecret);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ClientSecrets\u0022);\r\n    var clientSecretDelete = await dbContext.ClientSecrets.Where(x =\u003E x.Id == clientSecretAdded.Id).SingleOrDefaultAsync();\r\n    clientSecretDelete.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "AddClientProperty",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var clientId = await clientService.AddClientAsync(clientDto);\r\n    var clientProperty = ClientDtoMock.GenerateRandomClientProperty(0, clientId);\r\n    var result = await controller.ClientProperties(clientProperty);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ClientProperties\u0022);\r\n    var clientPropertyAdded = await dbContext.ClientProperties.Where(x =\u003E x.Client.Id == clientId).SingleOrDefaultAsync();\r\n    var newClientProperty = await clientService.GetClientPropertyAsync(clientPropertyAdded.Id);\r\n    clientProperty.Should().BeEquivalentTo(newClientProperty, opts =\u003E opts.Excluding(x =\u003E x.ClientPropertyId).Excluding(x =\u003E x.ClientProperties).Excluding(x =\u003E x.ClientName));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "GetClientProperty",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var clientId = await clientService.AddClientAsync(clientDto);\r\n    var clientProperty = ClientDtoMock.GenerateRandomClientProperty(0, clientId);\r\n    await clientService.AddClientPropertyAsync(clientProperty);\r\n    var clientPropertyAdded = await dbContext.ClientProperties.Where(x =\u003E x.Client.Id == clientId).SingleOrDefaultAsync();\r\n    clientProperty.ClientPropertyId = clientPropertyAdded.Id;\r\n    var result = await controller.ClientProperties(clientId, page: 1);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    viewResult.ViewName.Should().BeNullOrEmpty();\r\n    viewResult.ViewData.Should().NotBeNull();\r\n    var viewModel = Assert.IsType\u003CClientPropertiesDto\u003E(viewResult.ViewData.Model);\r\n    viewModel.ClientProperties.Count.Should().Be(1);\r\n    viewModel.ClientProperties[0].Should().BeEquivalentTo(clientProperty, options =\u003E options.Excluding(x =\u003E x.ClientPropertyId).Excluding(x =\u003E x.ClientId).Excluding(x =\u003E x.ClientName).Excluding(x =\u003E x.ClientProperties).Excluding(x =\u003E x.TotalCount).Excluding(x =\u003E x.PageSize));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "DeleteClientProperty",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var clientService = serviceProvider.GetRequiredService\u003CIClientService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    var clientId = await clientService.AddClientAsync(clientDto);\r\n    var clientProperty = ClientDtoMock.GenerateRandomClientProperty(0, clientId);\r\n    await clientService.AddClientPropertyAsync(clientProperty);\r\n    var clientPropertyAdded = await dbContext.ClientProperties.Where(x =\u003E x.Client.Id == clientId).SingleOrDefaultAsync();\r\n    clientProperty.ClientPropertyId = clientPropertyAdded.Id;\r\n    dbContext.Entry(clientPropertyAdded).State = EntityState.Detached;\r\n    var result = await controller.ClientPropertyDelete(clientProperty);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ClientProperties\u0022);\r\n    var newClientProperty = await dbContext.ClientProperties.Where(x =\u003E x.Id == clientPropertyAdded.Id).SingleOrDefaultAsync();\r\n    newClientProperty.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "AddClientModelIsNotValid",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    //Create empty dto object\r\n    var clientDto = new ClientDto();\r\n    //Setup requirements for model validation\r\n    controller.ModelState.AddModelError(\u0022ClientId\u0022, \u0022Required\u0022);\r\n    controller.ModelState.AddModelError(\u0022ClientName\u0022, \u0022Required\u0022);\r\n    //Action\r\n    var result = await controller.Client(clientDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    viewResult.ViewData.ModelState.IsValid.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddIdentityResource",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var identityResourceService = serviceProvider.GetRequiredService\u003CIIdentityResourceService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var identityResourceDto = IdentityResourceDtoMock.GenerateRandomIdentityResource(0);\r\n    var result = await controller.IdentityResource(identityResourceDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022IdentityResource\u0022);\r\n    var identityResource = await dbContext.IdentityResources.Where(x =\u003E x.Name == identityResourceDto.Name).SingleOrDefaultAsync();\r\n    var addedIdentityResource = await identityResourceService.GetIdentityResourceAsync(identityResource.Id);\r\n    identityResourceDto.Should().BeEquivalentTo(addedIdentityResource, opts =\u003E opts.Excluding(x =\u003E x.Id));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteIdentityResource",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var identityResourceService = serviceProvider.GetRequiredService\u003CIIdentityResourceService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var identityResourceDto = IdentityResourceDtoMock.GenerateRandomIdentityResource(0);\r\n    await identityResourceService.AddIdentityResourceAsync(identityResourceDto);\r\n    var identityResourceId = await dbContext.IdentityResources.Where(x =\u003E x.Name == identityResourceDto.Name).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    identityResourceId.Should().NotBe(0);\r\n    identityResourceDto.Id = identityResourceId;\r\n    var result = await controller.IdentityResourceDelete(identityResourceDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022IdentityResources\u0022);\r\n    var identityResource = await dbContext.IdentityResources.Where(x =\u003E x.Id == identityResourceDto.Id).SingleOrDefaultAsync();\r\n    identityResource.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddApiResource",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var apiResourceService = serviceProvider.GetRequiredService\u003CIApiResourceService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n    var result = await controller.ApiResource(apiResourceDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ApiResource\u0022);\r\n    var apiResource = await dbContext.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n    var addedApiResource = await apiResourceService.GetApiResourceAsync(apiResource.Id);\r\n    apiResourceDto.Should().BeEquivalentTo(addedApiResource, opts =\u003E opts.Excluding(x =\u003E x.Id));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteApiResource",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var apiResourceService = serviceProvider.GetRequiredService\u003CIApiResourceService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n    await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n    var apiResourceId = await dbContext.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    apiResourceId.Should().NotBe(0);\r\n    apiResourceDto.Id = apiResourceId;\r\n    var result = await controller.ApiResourceDelete(apiResourceDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ApiResources\u0022);\r\n    var apiResource = await dbContext.ApiResources.Where(x =\u003E x.Id == apiResourceDto.Id).SingleOrDefaultAsync();\r\n    apiResource.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddApiScope",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var apiScopeService = serviceProvider.GetRequiredService\u003CIApiScopeService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var apiScopeDto = ApiScopeDtoMock.GenerateRandomApiScope(0);\r\n    var result = await controller.ApiScope(apiScopeDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ApiScope\u0022);\r\n    var apiScope = await dbContext.ApiScopes.Where(x =\u003E x.Name == apiScopeDto.Name).SingleOrDefaultAsync();\r\n    var addedApiScope = await apiScopeService.GetApiScopeAsync(apiScope.Id);\r\n    apiScopeDto.Should().BeEquivalentTo(addedApiScope, opts =\u003E opts.Excluding(x =\u003E x.Id));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiScopes",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var apiScopeService = serviceProvider.GetRequiredService\u003CIApiScopeService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    const int generateScopes = 5;\r\n    // Add Api Scopes\r\n    for (var i = 0; i \u003C generateScopes; i\u002B\u002B)\r\n    {\r\n        var apiScopeDto = ApiScopeDtoMock.GenerateRandomApiScope(0);\r\n        await apiScopeService.AddApiScopeAsync(apiScopeDto);\r\n    }\r\n\r\n    var result = await controller.ApiScopes(string.Empty, 1);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    viewResult.ViewName.Should().BeNullOrEmpty();\r\n    viewResult.ViewData.Should().NotBeNull();\r\n    var viewModel = Assert.IsType\u003CApiScopesDto\u003E(viewResult.ViewData.Model);\r\n    viewModel.Scopes.Count.Should().Be(generateScopes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateApiScope",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var apiScopeService = serviceProvider.GetRequiredService\u003CIApiScopeService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var apiScopeDto = ApiScopeDtoMock.GenerateRandomApiScope(0);\r\n    await apiScopeService.AddApiScopeAsync(apiScopeDto);\r\n    var apiScopeAdded = await dbContext.ApiScopes.Where(x =\u003E x.Name == apiScopeDto.Name).SingleOrDefaultAsync();\r\n    dbContext.Entry(apiScopeAdded).State = EntityState.Detached;\r\n    apiScopeAdded.Should().NotBeNull();\r\n    var updatedApiScopeDto = ApiScopeDtoMock.GenerateRandomApiScope(apiScopeAdded.Id);\r\n    var result = await controller.ApiScope(updatedApiScopeDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ApiScope\u0022);\r\n    var apiScope = await dbContext.ApiScopes.Where(x =\u003E x.Id == apiScopeAdded.Id).SingleOrDefaultAsync();\r\n    var addedApiScope = await apiScopeService.GetApiScopeAsync(apiScope.Id);\r\n    updatedApiScopeDto.Should().BeEquivalentTo(addedApiScope, opts =\u003E opts.Excluding(x =\u003E x.Id));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "DeleteApiScope",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var apiScopeService = serviceProvider.GetRequiredService\u003CIApiScopeService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var apiScopeDto = ApiScopeDtoMock.GenerateRandomApiScope(0);\r\n    await apiScopeService.AddApiScopeAsync(apiScopeDto);\r\n    var apiScopeId = await dbContext.ApiScopes.Where(x =\u003E x.Name == apiScopeDto.Name).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    apiScopeId.Should().NotBe(0);\r\n    apiScopeDto.Id = apiScopeId;\r\n    var result = await controller.ApiScopeDelete(apiScopeDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ApiScopes\u0022);\r\n    var apiScope = await dbContext.ApiScopes.Where(x =\u003E x.Id == apiScopeDto.Id).SingleOrDefaultAsync();\r\n    apiScope.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiSecrets",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var apiResourceService = serviceProvider.GetRequiredService\u003CIApiResourceService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n    await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n    var resource = await dbContext.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n    const int generateApiSecrets = 5;\r\n    for (var i = 0; i \u003C generateApiSecrets; i\u002B\u002B)\r\n    {\r\n        var apiSecretsDto = ApiResourceDtoMock.GenerateRandomApiSecret(0, resource.Id);\r\n        await apiResourceService.AddApiSecretAsync(apiSecretsDto);\r\n    }\r\n\r\n    var result = await controller.ApiSecrets(resource.Id, 1);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    viewResult.ViewName.Should().BeNullOrEmpty();\r\n    viewResult.ViewData.Should().NotBeNull();\r\n    var viewModel = Assert.IsType\u003CApiSecretsDto\u003E(viewResult.ViewData.Model);\r\n    viewModel.ApiSecrets.Count.Should().Be(generateApiSecrets);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "AddApiSecret",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var apiResourceService = serviceProvider.GetRequiredService\u003CIApiResourceService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n    await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n    var resource = await dbContext.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n    var apiSecretsDto = ApiResourceDtoMock.GenerateRandomApiSecret(0, resource.Id);\r\n    var result = await controller.ApiSecrets(apiSecretsDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ApiSecrets\u0022);\r\n    var apiSecret = await dbContext.ApiSecrets.Where(x =\u003E x.Value == apiSecretsDto.Value).SingleOrDefaultAsync();\r\n    var addedApiScope = await apiResourceService.GetApiSecretAsync(apiSecret.Id);\r\n    apiSecretsDto.Value.Should().Be(apiSecret.Value);\r\n    apiSecretsDto.Should().BeEquivalentTo(addedApiScope, opts =\u003E opts.Excluding(x =\u003E x.ApiResourceId).Excluding(x =\u003E x.ApiResourceName).Excluding(x =\u003E x.ApiSecretId).Excluding(x =\u003E x.Value));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "DeleteApiSecret",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CIdentityServerConfigurationDbContext\u003E();\r\n    var apiResourceService = serviceProvider.GetRequiredService\u003CIApiResourceService\u003E();\r\n    // Get controller\r\n    var controller = PrepareConfigurationController(serviceProvider);\r\n    var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n    await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n    var resource = await dbContext.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n    var apiSecretsDto = ApiResourceDtoMock.GenerateRandomApiSecret(0, resource.Id);\r\n    await apiResourceService.AddApiSecretAsync(apiSecretsDto);\r\n    var apiSecretId = await dbContext.ApiSecrets.Where(x =\u003E x.Value == apiSecretsDto.Value).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    apiSecretId.Should().NotBe(0);\r\n    apiSecretsDto.ApiSecretId = apiSecretId;\r\n    var result = await controller.ApiSecretDelete(apiSecretsDto);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022ApiSecrets\u0022);\r\n    var apiSecret = await dbContext.ApiSecrets.Where(x =\u003E x.Id == apiSecretsDto.ApiSecretId).SingleOrDefaultAsync();\r\n    apiSecret.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HomeControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "GetIndex",
        "Body": "{\r\n    // Arrange\r\n    var logger = _serviceProvider.GetRequiredService\u003CILogger\u003CConfigurationController\u003E\u003E();\r\n    var controller = new HomeController(logger);\r\n    // Action\r\n    var result = controller.Index();\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    Assert.Null(viewResult.ViewName);\r\n    Assert.NotNull(viewResult.ViewData);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IdentityControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddUser",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    var result = await controller.UserProfile(userDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022UserProfile\u0022);\r\n    var user = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n    userDto.Id = user.Id;\r\n    var addedUser = await identityService.GetUserAsync(userDto.Id);\r\n    userDto.Should().BeEquivalentTo(addedUser, opts =\u003E opts.Excluding(x =\u003E x.Id));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteUser",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    await identityService.CreateUserAsync(userDto);\r\n    var userId = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    userDto.Id = userId;\r\n    // A user cannot delete own account\r\n    var subjectClaim = new Claim(IdentityModel.JwtClaimTypes.Subject, userDto.Id);\r\n    ProvideControllerContextWithClaimsPrincipal(controller, subjectClaim);\r\n    var result = await controller.UserDelete(userDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022UserDelete\u0022, \u0022Users cannot delete their own account\u0022);\r\n    var user = await dbContext.Users.Where(x =\u003E x.Id == userDto.Id).SingleOrDefaultAsync();\r\n    user.Should().NotBeNull();\r\n    subjectClaim = new Claim(IdentityModel.JwtClaimTypes.Subject, \u00221\u0022);\r\n    ProvideControllerContextWithClaimsPrincipal(controller, subjectClaim);\r\n    result = await controller.UserDelete(userDto);\r\n    // Assert            \r\n    viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022Users\u0022);\r\n    user = await dbContext.Users.Where(x =\u003E x.Id == userDto.Id).SingleOrDefaultAsync();\r\n    user.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateUser",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    await identityService.CreateUserAsync(userDto);\r\n    //Get inserted userid\r\n    var userId = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    var updatedUserDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser(userId);\r\n    var result = await controller.UserProfile(updatedUserDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022UserProfile\u0022);\r\n    var updatedUser = await identityService.GetUserAsync(updatedUserDto.Id.ToString());\r\n    updatedUserDto.Should().BeEquivalentTo(updatedUser, opts =\u003E opts.Excluding(x =\u003E x.Id));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetUser",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    //Add user\r\n    await identityService.CreateUserAsync(userDto);\r\n    //Get inserted userid\r\n    var userId = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    //Try call controller action\r\n    var result = await controller.UserProfile(userId);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    viewResult.ViewName.Should().Be(\u0022UserProfile\u0022);\r\n    viewResult.ViewData.Should().NotBeNull();\r\n    var viewModel = Assert.IsType\u003CUserDto\u003Cstring\u003E\u003E(viewResult.ViewData.Model);\r\n    userDto.Id = userId;\r\n    var addedUser = await identityService.GetUserAsync(userDto.Id.ToString());\r\n    viewModel.Should().BeEquivalentTo(addedUser);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddRole",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n    var result = await controller.Role(roleDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022Role\u0022);\r\n    var role = await dbContext.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n    roleDto.Id = role.Id;\r\n    var addedRole = await identityService.GetRoleAsync(roleDto.Id.ToString());\r\n    roleDto.Should().BeEquivalentTo(addedRole, opts =\u003E opts.Excluding(x =\u003E x.Id));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetRole",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n    await identityService.CreateRoleAsync(roleDto);\r\n    var roleId = await dbContext.Roles.Where(x =\u003E x.Name == roleDto.Name).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    var result = await controller.Role(roleId);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    viewResult.ViewName.Should().BeNull();\r\n    viewResult.ViewData.Should().NotBeNull();\r\n    var viewModel = Assert.IsType\u003CRoleDto\u003Cstring\u003E\u003E(viewResult.ViewData.Model);\r\n    roleDto.Id = roleId;\r\n    var addedRole = await identityService.GetRoleAsync(roleDto.Id.ToString());\r\n    viewModel.Should().BeEquivalentTo(addedRole);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteRole",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n    await identityService.CreateRoleAsync(roleDto);\r\n    var roleId = await dbContext.Roles.Where(x =\u003E x.Name == roleDto.Name).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    roleDto.Id = roleId;\r\n    var result = await controller.RoleDelete(roleDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022Roles\u0022);\r\n    var role = await dbContext.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n    role.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRole",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n    await identityService.CreateRoleAsync(roleDto);\r\n    var roleId = await dbContext.Roles.Where(x =\u003E x.Name == roleDto.Name).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    var updatedRoleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole(roleId);\r\n    var result = await controller.Role(updatedRoleDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022Role\u0022);\r\n    var updatedRole = await identityService.GetRoleAsync(updatedRoleDto.Id.ToString());\r\n    updatedRoleDto.Should().BeEquivalentTo(updatedRole, opts =\u003E opts.Excluding(x =\u003E x.Id));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddUserClaim",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    await identityService.CreateUserAsync(userDto);\r\n    var user = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n    userDto.Id = user.Id;\r\n    var userClaimsDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserClaim(0, user.Id);\r\n    var result = await controller.UserClaims(userClaimsDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022UserClaims\u0022);\r\n    var userClaim = await dbContext.UserClaims.Where(x =\u003E x.ClaimValue == userClaimsDto.ClaimValue).SingleOrDefaultAsync();\r\n    var addedUserClaim = await identityService.GetUserClaimAsync(user.Id.ToString(), userClaim.Id);\r\n    userClaimsDto.Should().BeEquivalentTo(addedUserClaim, opts =\u003E opts.Excluding(x =\u003E x.ClaimId));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "AddUserRole",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    await identityService.CreateUserAsync(userDto);\r\n    var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n    await identityService.CreateRoleAsync(roleDto);\r\n    var user = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n    userDto.Id = user.Id;\r\n    var role = await dbContext.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n    roleDto.Id = role.Id;\r\n    var userRoleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserRole\u003CRoleDto\u003Cstring\u003E\u003E(roleDto.Id, user.Id);\r\n    var result = await controller.UserRoles(userRoleDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022UserRoles\u0022);\r\n    var userRole = await dbContext.UserRoles.Where(x =\u003E x.RoleId == roleDto.Id \u0026\u0026 x.UserId == userDto.Id).SingleOrDefaultAsync();\r\n    userRole.Should().BeEquivalentTo(userRoleDto, opts =\u003E opts.Excluding(x =\u003E x.Roles).Excluding(x =\u003E x.RolesList).Excluding(x =\u003E x.PageSize).Excluding(x =\u003E x.TotalCount).Excluding(x =\u003E x.UserName));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "DeleteUserRole",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    await identityService.CreateUserAsync(userDto);\r\n    var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n    await identityService.CreateRoleAsync(roleDto);\r\n    var user = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n    userDto.Id = user.Id;\r\n    var role = await dbContext.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n    roleDto.Id = role.Id;\r\n    var userRoleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserRole\u003CRoleDto\u003Cstring\u003E\u003E(roleDto.Id, user.Id);\r\n    await identityService.CreateUserRoleAsync(userRoleDto);\r\n    var result = await controller.UserRolesDelete(userRoleDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022UserRoles\u0022);\r\n    var userRole = await dbContext.UserRoles.Where(x =\u003E x.RoleId == roleDto.Id \u0026\u0026 x.UserId == userDto.Id).SingleOrDefaultAsync();\r\n    userRole.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "DeleteUserClaim",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    await identityService.CreateUserAsync(userDto);\r\n    var user = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n    userDto.Id = user.Id;\r\n    var userClaimsDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserClaim(0, user.Id);\r\n    await identityService.CreateUserClaimsAsync(userClaimsDto);\r\n    var newUserClaim = await dbContext.UserClaims.Where(x =\u003E x.ClaimValue == userClaimsDto.ClaimValue).SingleOrDefaultAsync();\r\n    userClaimsDto.ClaimId = newUserClaim.Id;\r\n    var result = await controller.UserClaimsDelete(userClaimsDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022UserClaims\u0022);\r\n    var userClaim = await dbContext.UserClaims.Where(x =\u003E x.ClaimValue == userClaimsDto.ClaimValue).SingleOrDefaultAsync();\r\n    userClaim.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "AddRoleClaim",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n    await identityService.CreateRoleAsync(roleDto);\r\n    var role = await dbContext.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n    roleDto.Id = role.Id;\r\n    var roleClaimsDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRoleClaim(0, role.Id);\r\n    var result = await controller.RoleClaims(roleClaimsDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022RoleClaims\u0022);\r\n    var roleClaim = await dbContext.RoleClaims.Where(x =\u003E x.ClaimValue == roleClaimsDto.ClaimValue).SingleOrDefaultAsync();\r\n    var addedRoleClaim = await identityService.GetRoleClaimAsync(role.Id.ToString(), roleClaim.Id);\r\n    roleClaimsDto.Should().BeEquivalentTo(addedRoleClaim, opts =\u003E opts.Excluding(x =\u003E x.ClaimId).Excluding(x =\u003E x.RoleName));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "DeleteRoleClaim",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n    await identityService.CreateRoleAsync(roleDto);\r\n    var role = await dbContext.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n    roleDto.Id = role.Id;\r\n    var roleClaimsDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRoleClaim(0, role.Id);\r\n    await identityService.CreateRoleClaimsAsync(roleClaimsDto);\r\n    var newRoleClaim = await dbContext.RoleClaims.Where(x =\u003E x.ClaimValue == roleClaimsDto.ClaimValue).SingleOrDefaultAsync();\r\n    roleClaimsDto.ClaimId = newRoleClaim.Id;\r\n    var result = await controller.RoleClaimsDelete(roleClaimsDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022RoleClaims\u0022);\r\n    var roleClaim = await dbContext.RoleClaims.Where(x =\u003E x.ClaimValue == roleClaimsDto.ClaimValue).SingleOrDefaultAsync();\r\n    roleClaim.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "UserChangePassword",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    await identityService.CreateUserAsync(userDto);\r\n    var userId = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    var changePassword = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserChangePassword(userId, \u0022IdentityServer4!\u0022);\r\n    var result = await controller.UserChangePassword(changePassword);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022UserProfile\u0022);\r\n    var user = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n    user.PasswordHash.Should().NotBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UserProvidersDelete",
        "Body": "{\r\n    //Get Services\r\n    var serviceProvider = GetServices();\r\n    var dbContext = serviceProvider.GetRequiredService\u003CAdminIdentityDbContext\u003E();\r\n    var identityService = GetIdentityService(serviceProvider);\r\n    // Get controller\r\n    var controller = PrepareIdentityController(serviceProvider);\r\n    var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n    await identityService.CreateUserAsync(userDto);\r\n    var userId = await dbContext.Users.Where(x =\u003E x.UserName == userDto.UserName).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n    var randomProviderKey = Guid.NewGuid().ToString();\r\n    var randomProviderLogin = Guid.NewGuid().ToString();\r\n    var provider = IdentityMock.GenerateRandomUserProviders(randomProviderKey, randomProviderLogin, userId);\r\n    await dbContext.UserLogins.AddAsync(provider);\r\n    await dbContext.SaveChangesAsync();\r\n    var providersDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserProviders(randomProviderKey, randomProviderLogin, userId);\r\n    var result = await controller.UserProvidersDelete(providersDto);\r\n    // Assert            \r\n    var viewResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    viewResult.ActionName.Should().Be(\u0022UserProviders\u0022);\r\n    var userProvider = await dbContext.UserLogins.Where(x =\u003E x.ProviderKey == randomProviderKey).SingleOrDefaultAsync();\r\n    userProvider.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ApiResourceMappers",
    "Message": null,
    "Methods": [
      {
        "Name": "CanMapApiResourceToModel",
        "Body": "{\r\n    //Generate entity\r\n    var apiResource = ApiResourceMock.GenerateRandomApiResource(1);\r\n    //Try map to DTO\r\n    var apiResourceDto = apiResource.ToModel();\r\n    //Assert\r\n    apiResourceDto.Should().NotBeNull();\r\n    apiResourceDto.Should().BeEquivalentTo(apiResource, options =\u003E options.Excluding(o =\u003E o.Secrets).Excluding(o =\u003E o.Scopes).Excluding(o =\u003E o.Properties).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.Updated).Excluding(o =\u003E o.LastAccessed).Excluding(o =\u003E o.NonEditable).Excluding(o =\u003E o.AllowedAccessTokenSigningAlgorithms).Excluding(o =\u003E o.UserClaims));\r\n    //Assert collection\r\n    apiResource.UserClaims.Select(x =\u003E x.Type).Should().BeEquivalentTo(apiResourceDto.UserClaims);\r\n    var allowedAlgList = AllowedSigningAlgorithmsConverter.Converter.Convert(apiResource.AllowedAccessTokenSigningAlgorithms, null);\r\n    allowedAlgList.Should().BeEquivalentTo(apiResourceDto.AllowedAccessTokenSigningAlgorithms);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapApiResourceDtoToEntity",
        "Body": "{\r\n    //Generate DTO\r\n    var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(1);\r\n    //Try map to entity\r\n    var apiResource = apiResourceDto.ToEntity();\r\n    apiResource.Should().NotBeNull();\r\n    apiResourceDto.Should().BeEquivalentTo(apiResource, options =\u003E options.Excluding(o =\u003E o.Secrets).Excluding(o =\u003E o.Scopes).Excluding(o =\u003E o.Properties).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.Updated).Excluding(o =\u003E o.LastAccessed).Excluding(o =\u003E o.NonEditable).Excluding(o =\u003E o.AllowedAccessTokenSigningAlgorithms).Excluding(o =\u003E o.UserClaims));\r\n    //Assert collection\r\n    apiResource.UserClaims.Select(x =\u003E x.Type).Should().BeEquivalentTo(apiResourceDto.UserClaims);\r\n    var allowedAlgList = AllowedSigningAlgorithmsConverter.Converter.Convert(apiResource.AllowedAccessTokenSigningAlgorithms, null);\r\n    allowedAlgList.Should().BeEquivalentTo(apiResourceDto.AllowedAccessTokenSigningAlgorithms);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapApiScopeToModel",
        "Body": "{\r\n    //Generate DTO\r\n    var apiScopeDto = ApiScopeMock.GenerateRandomApiScope(1);\r\n    //Try map to entity\r\n    var apiScope = apiScopeDto.ToModel();\r\n    apiScope.Should().NotBeNull();\r\n    apiScopeDto.Should().BeEquivalentTo(apiScope, options =\u003E options.Excluding(o =\u003E o.UserClaims).Excluding(o =\u003E o.ApiScopeProperties).Excluding(o =\u003E o.UserClaimsItems));\r\n    //Assert collection\r\n    apiScopeDto.UserClaims.Select(x =\u003E x.Type).Should().BeEquivalentTo(apiScope.UserClaims);\r\n    apiScope.Id.Should().Be(apiScopeDto.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapApiScopeDtoToEntity",
        "Body": "{\r\n    //Generate DTO\r\n    var apiScopeDto = ApiScopeDtoMock.GenerateRandomApiScope(1);\r\n    //Try map to entity\r\n    var apiScope = apiScopeDto.ToEntity();\r\n    apiScope.Should().NotBeNull();\r\n    apiScopeDto.Should().BeEquivalentTo(apiScope, options =\u003E options.Excluding(o =\u003E o.UserClaims).Excluding(o =\u003E o.Properties).Excluding(o =\u003E o.Id));\r\n    //Assert collection\r\n    apiScope.UserClaims.Select(x =\u003E x.Type).Should().BeEquivalentTo(apiScopeDto.UserClaims);\r\n    apiScope.Id.Should().Be(apiScopeDto.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapApiSecretToModel",
        "Body": "{\r\n    //Generate entity\r\n    var apiSecret = ApiResourceMock.GenerateRandomApiSecret(1);\r\n    //Try map to DTO\r\n    var apiSecretsDto = apiSecret.ToModel();\r\n    //Assert\r\n    apiSecretsDto.Should().NotBeNull();\r\n    apiSecretsDto.Should().BeEquivalentTo(apiSecret, options =\u003E options.Excluding(o =\u003E o.ApiResource).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.Id));\r\n    apiSecret.Id.Should().Be(apiSecretsDto.ApiSecretId);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapApiSecretDtoToEntity",
        "Body": "{\r\n    //Generate DTO\r\n    var apiSecretsDto = ApiResourceDtoMock.GenerateRandomApiSecret(1, 1);\r\n    //Try map to entity\r\n    var apiSecret = apiSecretsDto.ToEntity();\r\n    apiSecret.Should().NotBeNull();\r\n    apiSecretsDto.Should().BeEquivalentTo(apiSecret, options =\u003E options.Excluding(o =\u003E o.ApiResource).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.Id));\r\n    apiSecret.Id.Should().Be(apiSecretsDto.ApiSecretId);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClientMappers",
    "Message": null,
    "Methods": [
      {
        "Name": "CanMapClientToModel",
        "Body": "{\r\n    //Generate entity\r\n    var client = ClientMock.GenerateRandomClient(0);\r\n    //Try map to DTO\r\n    var clientDto = client.ToModel();\r\n    //Asert\r\n    clientDto.Should().NotBeNull();\r\n    clientDto.Should().BeEquivalentTo(client, options =\u003E options.Excluding(o =\u003E o.AllowedCorsOrigins).Excluding(o =\u003E o.RedirectUris).Excluding(o =\u003E o.PostLogoutRedirectUris).Excluding(o =\u003E o.AllowedGrantTypes).Excluding(o =\u003E o.AllowedScopes).Excluding(o =\u003E o.ClientSecrets).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.AllowedIdentityTokenSigningAlgorithms).Excluding(o =\u003E o.IdentityProviderRestrictions));\r\n    //Assert collection\r\n    client.AllowedCorsOrigins.Select(x =\u003E x.Origin).Should().BeEquivalentTo(clientDto.AllowedCorsOrigins);\r\n    client.RedirectUris.Select(x =\u003E x.RedirectUri).Should().BeEquivalentTo(clientDto.RedirectUris);\r\n    client.PostLogoutRedirectUris.Select(x =\u003E x.PostLogoutRedirectUri).Should().BeEquivalentTo(clientDto.PostLogoutRedirectUris);\r\n    client.AllowedGrantTypes.Select(x =\u003E x.GrantType).Should().BeEquivalentTo(clientDto.AllowedGrantTypes);\r\n    client.AllowedScopes.Select(x =\u003E x.Scope).Should().BeEquivalentTo(clientDto.AllowedScopes);\r\n    client.IdentityProviderRestrictions.Select(x =\u003E x.Provider).Should().BeEquivalentTo(clientDto.IdentityProviderRestrictions);\r\n    var allowedAlgList = AllowedSigningAlgorithmsConverter.Converter.Convert(client.AllowedIdentityTokenSigningAlgorithms, null);\r\n    allowedAlgList.Should().BeEquivalentTo(clientDto.AllowedIdentityTokenSigningAlgorithms);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapClientDtoToEntity",
        "Body": "{\r\n    //Generate DTO\r\n    var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n    //Try map to entity\r\n    var client = clientDto.ToEntity();\r\n    client.Should().NotBeNull();\r\n    clientDto.Should().BeEquivalentTo(client, options =\u003E options.Excluding(o =\u003E o.AllowedCorsOrigins).Excluding(o =\u003E o.RedirectUris).Excluding(o =\u003E o.PostLogoutRedirectUris).Excluding(o =\u003E o.AllowedGrantTypes).Excluding(o =\u003E o.AllowedScopes).Excluding(o =\u003E o.ClientSecrets).Excluding(o =\u003E o.AllowedIdentityTokenSigningAlgorithms).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.IdentityProviderRestrictions));\r\n    //Assert collection\r\n    client.AllowedCorsOrigins.Select(x =\u003E x.Origin).Should().BeEquivalentTo(clientDto.AllowedCorsOrigins);\r\n    client.RedirectUris.Select(x =\u003E x.RedirectUri).Should().BeEquivalentTo(clientDto.RedirectUris);\r\n    client.PostLogoutRedirectUris.Select(x =\u003E x.PostLogoutRedirectUri).Should().BeEquivalentTo(clientDto.PostLogoutRedirectUris);\r\n    client.AllowedGrantTypes.Select(x =\u003E x.GrantType).Should().BeEquivalentTo(clientDto.AllowedGrantTypes);\r\n    client.AllowedScopes.Select(x =\u003E x.Scope).Should().BeEquivalentTo(clientDto.AllowedScopes);\r\n    client.IdentityProviderRestrictions.Select(x =\u003E x.Provider).Should().BeEquivalentTo(clientDto.IdentityProviderRestrictions);\r\n    var allowedAlgList = AllowedSigningAlgorithmsConverter.Converter.Convert(client.AllowedIdentityTokenSigningAlgorithms, null);\r\n    allowedAlgList.Should().BeEquivalentTo(clientDto.AllowedIdentityTokenSigningAlgorithms);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapClientClaimToModel",
        "Body": "{\r\n    var clientClaim = ClientMock.GenerateRandomClientClaim(0);\r\n    var clientClaimsDto = clientClaim.ToModel();\r\n    //Assert\r\n    clientClaimsDto.Should().NotBeNull();\r\n    clientClaimsDto.Should().BeEquivalentTo(clientClaim, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Client));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapClientClaimToEntity",
        "Body": "{\r\n    var clientClaimDto = ClientDtoMock.GenerateRandomClientClaim(0, 0);\r\n    var clientClaim = clientClaimDto.ToEntity();\r\n    //Assert\r\n    clientClaim.Should().NotBeNull();\r\n    clientClaimDto.Should().BeEquivalentTo(clientClaim, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Client));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapClientSecretToModel",
        "Body": "{\r\n    var clientSecret = ClientMock.GenerateRandomClientSecret(0);\r\n    var clientSecretsDto = clientSecret.ToModel();\r\n    //Assert\r\n    clientSecretsDto.Should().NotBeNull();\r\n    clientSecretsDto.Should().BeEquivalentTo(clientSecret, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.Client));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapClientSecretToEntity",
        "Body": "{\r\n    var clientSecretsDto = ClientDtoMock.GenerateRandomClientSecret(0, 0);\r\n    var clientSecret = clientSecretsDto.ToEntity();\r\n    //Assert\r\n    clientSecret.Should().NotBeNull();\r\n    clientSecretsDto.Should().BeEquivalentTo(clientSecret, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.Client));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapClientPropertyToModel",
        "Body": "{\r\n    var clientProperty = ClientMock.GenerateRandomClientProperty(0);\r\n    var clientPropertiesDto = clientProperty.ToModel();\r\n    //Assert\r\n    clientPropertiesDto.Should().NotBeNull();\r\n    clientPropertiesDto.Should().BeEquivalentTo(clientProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Client));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapClientPropertyToEntity",
        "Body": "{\r\n    var clientPropertiesDto = ClientDtoMock.GenerateRandomClientProperty(0, 0);\r\n    var clientProperty = clientPropertiesDto.ToEntity();\r\n    //Assert\r\n    clientProperty.Should().NotBeNull();\r\n    clientPropertiesDto.Should().BeEquivalentTo(clientProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Client));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IdentityResourceMappers",
    "Message": null,
    "Methods": [
      {
        "Name": "CanMapIdentityResourceToModel",
        "Body": "{\r\n    //Generate entity\r\n    var identityResource = IdentityResourceMock.GenerateRandomIdentityResource(1);\r\n    //Try map to DTO\r\n    var identityResourceDto = identityResource.ToModel();\r\n    //Assert\r\n    identityResourceDto.Should().NotBeNull();\r\n    identityResourceDto.Should().BeEquivalentTo(identityResource, options =\u003E options.Excluding(o =\u003E o.UserClaims).Excluding(o =\u003E o.Properties).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.Updated).Excluding(o =\u003E o.NonEditable));\r\n    //Assert collection\r\n    identityResource.UserClaims.Select(x =\u003E x.Type).Should().BeEquivalentTo(identityResourceDto.UserClaims);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapIdentityResourceDtoToEntity",
        "Body": "{\r\n    //Generate DTO\r\n    var identityResourceDto = IdentityResourceDtoMock.GenerateRandomIdentityResource(1);\r\n    //Try map to entity\r\n    var identityResource = identityResourceDto.ToEntity();\r\n    identityResource.Should().NotBeNull();\r\n    identityResourceDto.Should().BeEquivalentTo(identityResource, options =\u003E options.Excluding(o =\u003E o.UserClaims).Excluding(o =\u003E o.Properties).Excluding(o =\u003E o.Created).Excluding(o =\u003E o.Updated).Excluding(o =\u003E o.NonEditable));\r\n    //Assert collection\r\n    identityResource.UserClaims.Select(x =\u003E x.Type).Should().BeEquivalentTo(identityResourceDto.UserClaims);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LogMappers",
    "Message": null,
    "Methods": [
      {
        "Name": "CanMapIdentityResourceToModel",
        "Body": "{\r\n    //Generate entity\r\n    var log = LogMock.GenerateRandomLog(1);\r\n    //Try map to DTO\r\n    var logDto = log.ToModel();\r\n    //Asert\r\n    logDto.Should().NotBeNull();\r\n    log.Should().BeEquivalentTo(logDto, options =\u003E options.Excluding(o =\u003E o.PropertiesXml));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanMapIdentityResourceDtoToEntity",
        "Body": "{\r\n    //Generate DTO\r\n    var logDto = LogDtoMock.GenerateRandomLog(1);\r\n    //Try map to entity\r\n    var log = logDto.ToEntity();\r\n    log.Should().NotBeNull();\r\n    log.Should().BeEquivalentTo(logDto, options =\u003E options.Excluding(o =\u003E o.PropertiesXml));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PersistedGrantMappers",
    "Message": null,
    "Methods": [
      {
        "Name": "CanMapPersistedGrantToModel",
        "Body": "{\r\n    var persistedGrantKey = Guid.NewGuid().ToString();\r\n    //Generate entity\r\n    var persistedGrant = PersistedGrantMock.GenerateRandomPersistedGrant(persistedGrantKey);\r\n    //Try map to DTO\r\n    var persistedGrantDto = persistedGrant.ToModel();\r\n    //Asert\r\n    persistedGrantDto.Should().NotBeNull();\r\n    persistedGrant.Should().BeEquivalentTo(persistedGrantDto, options =\u003E options.Excluding(x =\u003E x.SubjectName));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ApiResourceRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddApiResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var newApiResource = await context.ApiResources.Where(x =\u003E x.Id == apiResource.Id).SingleAsync();\r\n        //Assert new api resource\r\n        newApiResource.Should().BeEquivalentTo(apiResource, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var newApiResource = await apiResourceRepository.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        newApiResource.Should().BeEquivalentTo(apiResource, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Secrets).Excluding(o =\u003E o.Scopes).Excluding(o =\u003E o.UserClaims));\r\n        newApiResource.UserClaims.Should().BeEquivalentTo(apiResource.UserClaims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022ApiResource\u0022)));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteApiResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var newApiResource = await context.ApiResources.Where(x =\u003E x.Id == apiResource.Id).SingleAsync();\r\n        //Assert new api resource\r\n        newApiResource.Should().BeEquivalentTo(apiResource, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Delete api resource\r\n        await apiResourceRepository.DeleteApiResourceAsync(newApiResource);\r\n        //Get deleted api resource\r\n        var deletedApiResource = await context.ApiResources.Where(x =\u003E x.Id == apiResource.Id).SingleOrDefaultAsync();\r\n        //Assert if it not exist\r\n        deletedApiResource.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateApiResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var newApiResource = await context.ApiResources.Where(x =\u003E x.Id == apiResource.Id).SingleOrDefaultAsync();\r\n        //Assert new api resource\r\n        newApiResource.Should().BeEquivalentTo(apiResource, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Detached the added item\r\n        context.Entry(newApiResource).State = EntityState.Detached;\r\n        //Generete new api resource with added item id\r\n        var updatedApiResource = ApiResourceMock.GenerateRandomApiResource(newApiResource.Id);\r\n        //Update api resource\r\n        await apiResourceRepository.UpdateApiResourceAsync(updatedApiResource);\r\n        //Get updated api resource\r\n        var updatedApiResourceEntity = await context.ApiResources.Where(x =\u003E x.Id == updatedApiResource.Id).SingleAsync();\r\n        //Assert updated api resource\r\n        updatedApiResource.Should().BeEquivalentTo(updatedApiResourceEntity);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddApiSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Generate random new api secret\r\n        var apiSecret = ApiResourceMock.GenerateRandomApiSecret(0);\r\n        //Add new api secret\r\n        await apiResourceRepository.AddApiSecretAsync(apiResource.Id, apiSecret);\r\n        //Get new api secret\r\n        var newApiSecret = await context.ApiSecrets.Where(x =\u003E x.Id == apiSecret.Id).SingleAsync();\r\n        //Assert new api secret\r\n        newApiSecret.Should().BeEquivalentTo(apiSecret, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteApiSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Generate random new api scope\r\n        var apiSecret = ApiResourceMock.GenerateRandomApiSecret(0);\r\n        //Add new api secret\r\n        await apiResourceRepository.AddApiSecretAsync(apiResource.Id, apiSecret);\r\n        //Get new api resource\r\n        var newApiSecret = await context.ApiSecrets.Where(x =\u003E x.Id == apiSecret.Id).SingleOrDefaultAsync();\r\n        //Assert new api resource\r\n        newApiSecret.Should().BeEquivalentTo(apiSecret, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Try delete it\r\n        await apiResourceRepository.DeleteApiSecretAsync(newApiSecret);\r\n        //Get deleted api secret\r\n        var deletedApiSecret = await context.ApiSecrets.Where(x =\u003E x.Id == newApiSecret.Id).SingleOrDefaultAsync();\r\n        //Assert if it exist\r\n        deletedApiSecret.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Generate random new api secret\r\n        var apiSecret = ApiResourceMock.GenerateRandomApiSecret(0);\r\n        //Add new api secret\r\n        await apiResourceRepository.AddApiSecretAsync(apiResource.Id, apiSecret);\r\n        //Get new api secret\r\n        var newApiSecret = await apiResourceRepository.GetApiSecretAsync(apiSecret.Id);\r\n        //Assert new api secret\r\n        newApiSecret.Should().BeEquivalentTo(apiSecret, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.ApiResource.Secrets).Excluding(o =\u003E o.ApiResource.UserClaims).Excluding(o =\u003E o.ApiResource.Scopes));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddApiResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource without id\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var resource = await apiResourceRepository.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        resource.Should().BeEquivalentTo(apiResource, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Secrets).Excluding(o =\u003E o.Scopes).Excluding(o =\u003E o.UserClaims));\r\n        resource.UserClaims.Should().BeEquivalentTo(apiResource.UserClaims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022ApiResource\u0022)));\r\n        //Generate random new api resource property\r\n        var apiResourceProperty = ApiResourceMock.GenerateRandomApiResourceProperty(0);\r\n        //Add new api resource property\r\n        await apiResourceRepository.AddApiResourcePropertyAsync(resource.Id, apiResourceProperty);\r\n        //Get new api resource property\r\n        var resourceProperty = await context.ApiResourceProperties.Where(x =\u003E x.Id == apiResourceProperty.Id).SingleOrDefaultAsync();\r\n        resourceProperty.Should().BeEquivalentTo(apiResourceProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.ApiResource));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteApiResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource without id\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var resource = await apiResourceRepository.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        resource.Should().BeEquivalentTo(apiResource, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Secrets).Excluding(o =\u003E o.Scopes).Excluding(o =\u003E o.UserClaims));\r\n        resource.UserClaims.Should().BeEquivalentTo(apiResource.UserClaims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022ApiResource\u0022)));\r\n        //Generate random new api resource property\r\n        var apiResourceProperty = ApiResourceMock.GenerateRandomApiResourceProperty(0);\r\n        //Add new api resource property\r\n        await apiResourceRepository.AddApiResourcePropertyAsync(resource.Id, apiResourceProperty);\r\n        //Get new api resource property\r\n        var property = await context.ApiResourceProperties.Where(x =\u003E x.Id == apiResourceProperty.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        property.Should().BeEquivalentTo(apiResourceProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.ApiResource));\r\n        //Try delete it\r\n        await apiResourceRepository.DeleteApiResourcePropertyAsync(property);\r\n        //Get new api resource property\r\n        var resourceProperty = await context.ApiResourceProperties.Where(x =\u003E x.Id == apiResourceProperty.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        resourceProperty.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiResourceRepository(context);\r\n        //Generate random new api resource without id\r\n        var apiResource = ApiResourceMock.GenerateRandomApiResource(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var resource = await apiResourceRepository.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        resource.Should().BeEquivalentTo(apiResource, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.Secrets).Excluding(o =\u003E o.Scopes).Excluding(o =\u003E o.UserClaims));\r\n        resource.UserClaims.Should().BeEquivalentTo(apiResource.UserClaims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022ApiResource\u0022)));\r\n        //Generate random new api resource property\r\n        var apiResourceProperty = ApiResourceMock.GenerateRandomApiResourceProperty(0);\r\n        //Add new api resource property\r\n        await apiResourceRepository.AddApiResourcePropertyAsync(resource.Id, apiResourceProperty);\r\n        //Get new api resource property\r\n        var resourceProperty = await apiResourceRepository.GetApiResourcePropertyAsync(apiResourceProperty.Id);\r\n        resourceProperty.Should().BeEquivalentTo(apiResourceProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.ApiResource));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ApiScopeRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddApiScopeAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiScopeRepository(context);\r\n        //Generate random new api scope\r\n        var apiScope = ApiScopeMock.GenerateRandomApiScope(0);\r\n        //Add new api scope\r\n        await apiResourceRepository.AddApiScopeAsync(apiScope);\r\n        //Get new api scope\r\n        var newApiScopes = await context.ApiScopes.Where(x =\u003E x.Id == apiScope.Id).SingleAsync();\r\n        //Assert new api scope\r\n        newApiScopes.Should().BeEquivalentTo(apiScope, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateApiScopeAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiScopeRepository(context);\r\n        //Generate random new api scope\r\n        var apiScope = ApiScopeMock.GenerateRandomApiScope(0);\r\n        //Add new api scope\r\n        await apiResourceRepository.AddApiScopeAsync(apiScope);\r\n        //Detached the added item\r\n        context.Entry(apiScope).State = EntityState.Detached;\r\n        //Generete new api scope with added item id\r\n        var updatedApiScope = ApiScopeMock.GenerateRandomApiScope(apiScope.Id);\r\n        //Update api scope\r\n        await apiResourceRepository.UpdateApiScopeAsync(updatedApiScope);\r\n        //Get updated api scope\r\n        var updatedApiScopeEntity = await context.ApiScopes.Where(x =\u003E x.Id == updatedApiScope.Id).SingleAsync();\r\n        //Assert updated api scope\r\n        updatedApiScope.Should().BeEquivalentTo(updatedApiScopeEntity);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteApiScopeAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiScopeRepository(context);\r\n        //Generate random new api scope\r\n        var apiScope = ApiScopeMock.GenerateRandomApiScope(0);\r\n        //Add new api resource\r\n        await apiResourceRepository.AddApiScopeAsync(apiScope);\r\n        //Get new api resource\r\n        var newApiScopes = await context.ApiScopes.Where(x =\u003E x.Id == apiScope.Id).SingleOrDefaultAsync();\r\n        //Assert new api resource\r\n        newApiScopes.Should().BeEquivalentTo(apiScope, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Try delete it\r\n        await apiResourceRepository.DeleteApiScopeAsync(newApiScopes);\r\n        //Get new api scope\r\n        var deletedApiScopes = await context.ApiScopes.Where(x =\u003E x.Id == newApiScopes.Id).SingleOrDefaultAsync();\r\n        //Assert if it exist\r\n        deletedApiScopes.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiScopeAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceRepository = GetApiScopeRepository(context);\r\n        //Generate random new api scope\r\n        var apiScope = ApiScopeMock.GenerateRandomApiScope(0);\r\n        //Add new api scope\r\n        await apiResourceRepository.AddApiScopeAsync(apiScope);\r\n        //Get new api scope\r\n        var newApiScopes = await apiResourceRepository.GetApiScopeAsync(apiScope.Id);\r\n        //Assert new api resource\r\n        newApiScopes.Should().BeEquivalentTo(apiScope, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.UserClaims));\r\n        newApiScopes.UserClaims.Should().BeEquivalentTo(apiScope.UserClaims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Scope\u0022)));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClientRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddClientAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleAsync();\r\n        //Assert new client\r\n        clientEntity.Should().BeEquivalentTo(client, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddClientClaimAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n        //Generate random new Client Claim\r\n        var clientClaim = ClientMock.GenerateRandomClientClaim(0);\r\n        //Add new client claim\r\n        await clientRepository.AddClientClaimAsync(clientEntity.Id, clientClaim);\r\n        //Get new client claim\r\n        var newClientClaim = await context.ClientClaims.Where(x =\u003E x.Id == clientClaim.Id).SingleOrDefaultAsync();\r\n        newClientClaim.Should().BeEquivalentTo(clientClaim, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.Client));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddClientPropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n        //Generate random new Client property\r\n        var clientProperty = ClientMock.GenerateRandomClientProperty(0);\r\n        //Add new client property\r\n        await clientRepository.AddClientPropertyAsync(clientEntity.Id, clientProperty);\r\n        //Get new client property\r\n        var newClientProperty = await context.ClientProperties.Where(x =\u003E x.Id == clientProperty.Id).SingleOrDefaultAsync();\r\n        newClientProperty.Should().BeEquivalentTo(clientProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.Client));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddClientSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n        //Generate random new Client Secret\r\n        var clientSecret = ClientMock.GenerateRandomClientSecret(0);\r\n        //Add new client secret\r\n        await clientRepository.AddClientSecretAsync(clientEntity.Id, clientSecret);\r\n        //Get new client secret\r\n        var newSecret = await context.ClientSecrets.Where(x =\u003E x.Id == clientSecret.Id).SingleOrDefaultAsync();\r\n        newSecret.Should().BeEquivalentTo(clientSecret, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.Client));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0, generateClaims: true, generateProperties: true, generateSecrets: false);\r\n        var clientRepository = GetClientRepository(context);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        var clientToClone = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleOrDefaultAsync();\r\n        //Try clone it - all client collections without secrets\r\n        var clonedClientId = await clientRepository.CloneClientAsync(clientToClone);\r\n        var cloneClientEntity = await clientRepository.GetClientAsync(clonedClientId);\r\n        var clientToCompare = await clientRepository.GetClientAsync(clientToClone.Id);\r\n        ClientCloneCompare(cloneClientEntity, clientToCompare);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientWithoutCorsAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0, generateClaims: true, generateProperties: true, generateSecrets: false);\r\n        var clientRepository = GetClientRepository(context);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        var clientToClone = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleOrDefaultAsync();\r\n        //Try clone it\r\n        var clonedClientId = await clientRepository.CloneClientAsync(clientToClone, cloneClientCorsOrigins: false);\r\n        var cloneClientEntity = await clientRepository.GetClientAsync(clonedClientId);\r\n        var clientToCompare = await clientRepository.GetClientAsync(clientToClone.Id);\r\n        ClientCloneCompare(cloneClientEntity, clientToCompare, cloneClientCorsOrigins: false);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientWithoutClaimsAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0, generateClaims: true, generateProperties: true, generateSecrets: false);\r\n        var clientRepository = GetClientRepository(context);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        var clientToClone = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleOrDefaultAsync();\r\n        //Try clone it\r\n        var clonedClientId = await clientRepository.CloneClientAsync(clientToClone, cloneClientClaims: false);\r\n        var cloneClientEntity = await clientRepository.GetClientAsync(clonedClientId);\r\n        var clientToCompare = await clientRepository.GetClientAsync(clientToClone.Id);\r\n        ClientCloneCompare(cloneClientEntity, clientToCompare, cloneClientClaims: false);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientWithoutPropertiesAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0, generateClaims: true, generateProperties: true, generateSecrets: false);\r\n        var clientRepository = GetClientRepository(context);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        var clientToClone = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleOrDefaultAsync();\r\n        //Try clone it\r\n        var clonedClientId = await clientRepository.CloneClientAsync(clientToClone, cloneClientProperties: false);\r\n        var cloneClientEntity = await clientRepository.GetClientAsync(clonedClientId);\r\n        var clientToCompare = await clientRepository.GetClientAsync(clientToClone.Id);\r\n        ClientCloneCompare(cloneClientEntity, clientToCompare, cloneClientProperties: false);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientWithoutGrantTypesAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0, generateClaims: true, generateProperties: true, generateSecrets: false);\r\n        var clientRepository = GetClientRepository(context);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        var clientToClone = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleOrDefaultAsync();\r\n        //Try clone it\r\n        var clonedClientId = await clientRepository.CloneClientAsync(clientToClone, cloneClientGrantTypes: false);\r\n        var cloneClientEntity = await clientRepository.GetClientAsync(clonedClientId);\r\n        var clientToCompare = await clientRepository.GetClientAsync(clientToClone.Id);\r\n        ClientCloneCompare(cloneClientEntity, clientToCompare, cloneClientGrantTypes: false);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientWithoutIdPRestrictionsAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0, generateClaims: true, generateProperties: true, generateSecrets: false);\r\n        var clientRepository = GetClientRepository(context);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        var clientToClone = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleOrDefaultAsync();\r\n        //Try clone it\r\n        var clonedClientId = await clientRepository.CloneClientAsync(clientToClone, cloneClientIdPRestrictions: false);\r\n        var cloneClientEntity = await clientRepository.GetClientAsync(clonedClientId);\r\n        var clientToCompare = await clientRepository.GetClientAsync(clientToClone.Id);\r\n        ClientCloneCompare(cloneClientEntity, clientToCompare, cloneClientIdPRestrictions: false);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientWithoutPostLogoutRedirectUrisAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0, generateClaims: true, generateProperties: true, generateSecrets: false);\r\n        var clientRepository = GetClientRepository(context);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        var clientToClone = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleOrDefaultAsync();\r\n        //Try clone it\r\n        var clonedClientId = await clientRepository.CloneClientAsync(clientToClone, cloneClientPostLogoutRedirectUris: false);\r\n        var cloneClientEntity = await clientRepository.GetClientAsync(clonedClientId);\r\n        var clientToCompare = await clientRepository.GetClientAsync(clientToClone.Id);\r\n        ClientCloneCompare(cloneClientEntity, clientToCompare, cloneClientPostLogoutRedirectUris: false);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientWithoutRedirectUrisAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0, generateClaims: true, generateProperties: true, generateSecrets: false);\r\n        var clientRepository = GetClientRepository(context);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        var clientToClone = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleOrDefaultAsync();\r\n        //Try clone it\r\n        var clonedClientId = await clientRepository.CloneClientAsync(clientToClone, cloneClientRedirectUris: false);\r\n        var cloneClientEntity = await clientRepository.GetClientAsync(clonedClientId);\r\n        var clientToCompare = await clientRepository.GetClientAsync(clientToClone.Id);\r\n        ClientCloneCompare(cloneClientEntity, clientToCompare, cloneClientRedirectUris: false);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientWithoutScopesAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var client = ClientMock.GenerateRandomClient(0, generateClaims: true, generateProperties: true, generateSecrets: false);\r\n        var clientRepository = GetClientRepository(context);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        var clientToClone = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleOrDefaultAsync();\r\n        //Try clone it\r\n        var clonedClientId = await clientRepository.CloneClientAsync(clientToClone, cloneClientScopes: false);\r\n        var cloneClientEntity = await clientRepository.GetClientAsync(clonedClientId);\r\n        var clientToCompare = await clientRepository.GetClientAsync(clientToClone.Id);\r\n        ClientCloneCompare(cloneClientEntity, clientToCompare, cloneClientScopes: false);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteClientClaimAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n        //Generate random new Client Claim\r\n        var clientClaim = ClientMock.GenerateRandomClientClaim(0);\r\n        //Add new client claim\r\n        await clientRepository.AddClientClaimAsync(clientEntity.Id, clientClaim);\r\n        //Get new client claim\r\n        var newClientClaim = await context.ClientClaims.Where(x =\u003E x.Id == clientClaim.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        newClientClaim.Should().BeEquivalentTo(clientClaim, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.Client));\r\n        //Try delete it\r\n        await clientRepository.DeleteClientClaimAsync(newClientClaim);\r\n        //Get new client claim\r\n        var deletedClientClaim = await context.ClientClaims.Where(x =\u003E x.Id == clientClaim.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        deletedClientClaim.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteClientPropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n        //Generate random new Client Property\r\n        var clientProperty = ClientMock.GenerateRandomClientProperty(0);\r\n        //Add new client property\r\n        await clientRepository.AddClientPropertyAsync(clientEntity.Id, clientProperty);\r\n        //Get new client property\r\n        var newClientProperties = await context.ClientProperties.Where(x =\u003E x.Id == clientProperty.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        newClientProperties.Should().BeEquivalentTo(clientProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.Client));\r\n        //Try delete it\r\n        await clientRepository.DeleteClientPropertyAsync(newClientProperties);\r\n        //Get new client property\r\n        var deletedClientProperty = await context.ClientProperties.Where(x =\u003E x.Id == clientProperty.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        deletedClientProperty.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteClientSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n        //Generate random new Client Secret\r\n        var clientSecret = ClientMock.GenerateRandomClientSecret(0);\r\n        //Add new client secret\r\n        await clientRepository.AddClientSecretAsync(clientEntity.Id, clientSecret);\r\n        //Get new client secret\r\n        var newSecret = await context.ClientSecrets.Where(x =\u003E x.Id == clientSecret.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        newSecret.Should().BeEquivalentTo(clientSecret, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.Client));\r\n        //Try delete it\r\n        await clientRepository.DeleteClientSecretAsync(newSecret);\r\n        //Get new client secret\r\n        var deletedSecret = await context.ClientSecrets.Where(x =\u003E x.Id == clientSecret.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        deletedSecret.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientClaimAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n        //Generate random client claim\r\n        var clientClaim = ClientMock.GenerateRandomClientClaim(0);\r\n        //Add new client claim\r\n        await clientRepository.AddClientClaimAsync(clientEntity.Id, clientClaim);\r\n        //Get new client claim\r\n        var newClientClaim = await clientRepository.GetClientClaimAsync(clientClaim.Id);\r\n        newClientClaim.Should().BeEquivalentTo(clientClaim, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.Client));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientPropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n        //Generate random new Client Property\r\n        var clientProperty = ClientMock.GenerateRandomClientProperty(0);\r\n        //Add new client Property\r\n        await clientRepository.AddClientPropertyAsync(clientEntity.Id, clientProperty);\r\n        //Get new client Property\r\n        var newClientProperty = await clientRepository.GetClientPropertyAsync(clientProperty.Id);\r\n        newClientProperty.Should().BeEquivalentTo(clientProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.Client));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientsAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        var rnd = new Random();\r\n        var generateRows = rnd.Next(1, 10);\r\n        //Generate random new clients\r\n        var randomClients = ClientMock.GenerateRandomClients(0, generateRows);\r\n        foreach (var client in randomClients)\r\n            //Add new client\r\n            await clientRepository.AddClientAsync(client);\r\n        var clients = await clientRepository.GetClientsAsync();\r\n        //Assert clients count\r\n        clients.Data.Count.Should().Be(randomClients.Count);\r\n        //Assert that clients are same\r\n        clients.Data.Should().BeEquivalentTo(randomClients);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await clientRepository.GetClientAsync(client.Id);\r\n        //Assert new client\r\n        ClientAssert(clientEntity, client);\r\n        //Generate random new Client Secret\r\n        var clientSecret = ClientMock.GenerateRandomClientSecret(0);\r\n        //Add new client secret\r\n        await clientRepository.AddClientSecretAsync(clientEntity.Id, clientSecret);\r\n        //Get new client secret\r\n        var newSecret = await clientRepository.GetClientSecretAsync(clientSecret.Id);\r\n        newSecret.Should().BeEquivalentTo(clientSecret, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.Client));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RemoveClientAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleAsync();\r\n        //Assert new client\r\n        clientEntity.Should().BeEquivalentTo(client, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Detached the added item\r\n        context.Entry(clientEntity).State = EntityState.Detached;\r\n        //Remove client\r\n        await clientRepository.RemoveClientAsync(clientEntity);\r\n        //Try Get Removed client\r\n        var removeClientEntity = await context.Clients.Where(x =\u003E x.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Assert removed client - it might be null\r\n        removeClientEntity.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateClientAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Generate random new client without id\r\n        var client = ClientMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientRepository.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.Id == client.Id).SingleAsync();\r\n        //Assert new client\r\n        clientEntity.Should().BeEquivalentTo(client, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Detached the added item\r\n        context.Entry(clientEntity).State = EntityState.Detached;\r\n        //Generete new client with added item id\r\n        var updatedClient = ClientMock.GenerateRandomClient(clientEntity.Id);\r\n        //Update client\r\n        await clientRepository.UpdateClientAsync(updatedClient);\r\n        //Get updated client\r\n        var updatedClientEntity = await context.Clients.Where(x =\u003E x.Id == updatedClient.Id).SingleAsync();\r\n        //Assert updated client\r\n        updatedClientEntity.Should().BeEquivalentTo(updatedClient);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetGrantTypes",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Try get some existing grant\r\n        var randomClientGrantType = ClientMock.GenerateRandomClientGrantType();\r\n        var grantTypes = clientRepository.GetGrantTypes(randomClientGrantType.GrantType);\r\n        grantTypes[0].Should().Be(randomClientGrantType.GrantType);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetStandardClaims",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        //Try get some existing claims\r\n        var randomClientClaim = ClientMock.GenerateRandomClientClaim(0);\r\n        var grantTypes = clientRepository.GetStandardClaims(randomClientClaim.Type);\r\n        grantTypes.Contains(randomClientClaim.Type).Should().Be(true);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetScopesIdentityResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        var identityResourceRepository = GetIdentityResourceRepository(context);\r\n        var identityResource = IdentityResourceMock.GenerateRandomIdentityResource(0);\r\n        await identityResourceRepository.AddIdentityResourceAsync(identityResource);\r\n        var identityScopes = await clientRepository.GetScopesAsync(identityResource.Name);\r\n        identityScopes[0].Should().Be(identityResource.Name);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetScopesApiResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientRepository = GetClientRepository(context);\r\n        var apiScopeRepository = GetApiScopeRepository(context);\r\n        var apiScope = ApiScopeMock.GenerateRandomApiScope(0);\r\n        await apiScopeRepository.AddApiScopeAsync(apiScope);\r\n        var apiScopes = await clientRepository.GetScopesAsync(apiScope.Name);\r\n        apiScopes[0].Should().Be(apiScope.Name);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IdentityResourceRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddIdentityResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceRepository = GetIdentityResourceRepository(context);\r\n        //Generate random new identity resource\r\n        var identityResource = IdentityResourceMock.GenerateRandomIdentityResource(0);\r\n        //Add new identity resource\r\n        await identityResourceRepository.AddIdentityResourceAsync(identityResource);\r\n        //Get new identity resource\r\n        var newIdentityResource = await context.IdentityResources.Where(x =\u003E x.Id == identityResource.Id).SingleAsync();\r\n        //Assert new identity resource\r\n        newIdentityResource.Should().BeEquivalentTo(identityResource, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIdentityResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceRepository = GetIdentityResourceRepository(context);\r\n        //Generate random new identity resource\r\n        var identityResource = IdentityResourceMock.GenerateRandomIdentityResource(0);\r\n        //Add new identity resource\r\n        await identityResourceRepository.AddIdentityResourceAsync(identityResource);\r\n        //Get new identity resource\r\n        var newIdentityResource = await identityResourceRepository.GetIdentityResourceAsync(identityResource.Id);\r\n        //Assert new identity resource\r\n        newIdentityResource.Should().BeEquivalentTo(identityResource, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.UserClaims));\r\n        newIdentityResource.UserClaims.Should().BeEquivalentTo(identityResource.UserClaims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022IdentityResource\u0022)));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteIdentityResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceRepository = GetIdentityResourceRepository(context);\r\n        //Generate random new identity resource\r\n        var identityResource = IdentityResourceMock.GenerateRandomIdentityResource(0);\r\n        //Add new identity resource\r\n        await identityResourceRepository.AddIdentityResourceAsync(identityResource);\r\n        //Get new identity resource\r\n        var newIdentityResource = await context.IdentityResources.Where(x =\u003E x.Id == identityResource.Id).SingleAsync();\r\n        //Assert new identity resource\r\n        newIdentityResource.Should().BeEquivalentTo(identityResource, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Delete identity resource\r\n        await identityResourceRepository.DeleteIdentityResourceAsync(newIdentityResource);\r\n        //Get deleted identity resource\r\n        var deletedIdentityResource = await context.IdentityResources.Where(x =\u003E x.Id == identityResource.Id).SingleOrDefaultAsync();\r\n        //Assert if it not exist\r\n        deletedIdentityResource.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateIdentityResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceRepository = GetIdentityResourceRepository(context);\r\n        //Generate random new identity resource\r\n        var identityResource = IdentityResourceMock.GenerateRandomIdentityResource(0);\r\n        //Add new identity resource\r\n        await identityResourceRepository.AddIdentityResourceAsync(identityResource);\r\n        //Get new identity resource\r\n        var newIdentityResource = await context.IdentityResources.Where(x =\u003E x.Id == identityResource.Id).SingleOrDefaultAsync();\r\n        //Assert new identity resource\r\n        newIdentityResource.Should().BeEquivalentTo(identityResource, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Detached the added item\r\n        context.Entry(newIdentityResource).State = EntityState.Detached;\r\n        //Generete new identity resource with added item id\r\n        var updatedIdentityResource = IdentityResourceMock.GenerateRandomIdentityResource(newIdentityResource.Id);\r\n        //Update identity resource\r\n        await identityResourceRepository.UpdateIdentityResourceAsync(updatedIdentityResource);\r\n        //Get updated identity resource\r\n        var updatedIdentityResourceEntity = await context.IdentityResources.Where(x =\u003E x.Id == updatedIdentityResource.Id).SingleAsync();\r\n        //Assert updated identity resource\r\n        updatedIdentityResource.Should().BeEquivalentTo(updatedIdentityResourceEntity);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddIdentityResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceRepository = GetIdentityResourceRepository(context);\r\n        //Generate random new identity resource without id\r\n        var identityResource = IdentityResourceMock.GenerateRandomIdentityResource(0);\r\n        //Add new identity resource\r\n        await identityResourceRepository.AddIdentityResourceAsync(identityResource);\r\n        //Get new identity resource\r\n        var resource = await identityResourceRepository.GetIdentityResourceAsync(identityResource.Id);\r\n        //Assert new identity resource\r\n        resource.Should().BeEquivalentTo(identityResource, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.UserClaims));\r\n        resource.UserClaims.Should().BeEquivalentTo(identityResource.UserClaims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022IdentityResource\u0022)));\r\n        //Generate random new identity resource property\r\n        var identityResourceProperty = IdentityResourceMock.GenerateRandomIdentityResourceProperty(0);\r\n        //Add new identity resource property\r\n        await identityResourceRepository.AddIdentityResourcePropertyAsync(resource.Id, identityResourceProperty);\r\n        //Get new identity resource property\r\n        var resourceProperty = await context.IdentityResourceProperties.Where(x =\u003E x.Id == identityResourceProperty.Id).SingleOrDefaultAsync();\r\n        resourceProperty.Should().BeEquivalentTo(identityResourceProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.IdentityResource));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteIdentityResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceRepository = GetIdentityResourceRepository(context);\r\n        //Generate random new identity resource without id\r\n        var identityResource = IdentityResourceMock.GenerateRandomIdentityResource(0);\r\n        //Add new identity resource\r\n        await identityResourceRepository.AddIdentityResourceAsync(identityResource);\r\n        //Get new identity resource\r\n        var resource = await identityResourceRepository.GetIdentityResourceAsync(identityResource.Id);\r\n        //Assert new identity resource\r\n        resource.Should().BeEquivalentTo(identityResource, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.UserClaims));\r\n        resource.UserClaims.Should().BeEquivalentTo(identityResource.UserClaims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022IdentityResource\u0022)));\r\n        //Generate random new identity resource property\r\n        var identityResourceProperty = IdentityResourceMock.GenerateRandomIdentityResourceProperty(0);\r\n        //Add new identity resource property\r\n        await identityResourceRepository.AddIdentityResourcePropertyAsync(resource.Id, identityResourceProperty);\r\n        //Get new identity resource property\r\n        var property = await context.IdentityResourceProperties.Where(x =\u003E x.Id == identityResourceProperty.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        property.Should().BeEquivalentTo(identityResourceProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.IdentityResource));\r\n        //Try delete it\r\n        await identityResourceRepository.DeleteIdentityResourcePropertyAsync(property);\r\n        //Get new identity resource property\r\n        var resourceProperty = await context.IdentityResourceProperties.Where(x =\u003E x.Id == identityResourceProperty.Id).SingleOrDefaultAsync();\r\n        //Assert\r\n        resourceProperty.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIdentityResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceRepository = GetIdentityResourceRepository(context);\r\n        //Generate random new identity resource without id\r\n        var identityResource = IdentityResourceMock.GenerateRandomIdentityResource(0);\r\n        //Add new identity resource\r\n        await identityResourceRepository.AddIdentityResourceAsync(identityResource);\r\n        //Get new identity resource\r\n        var resource = await identityResourceRepository.GetIdentityResourceAsync(identityResource.Id);\r\n        //Assert new identity resource\r\n        resource.Should().BeEquivalentTo(identityResource, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.UserClaims));\r\n        resource.UserClaims.Should().BeEquivalentTo(identityResource.UserClaims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022IdentityResource\u0022)));\r\n        //Generate random new identity resource property\r\n        var identityResourceProperty = IdentityResourceMock.GenerateRandomIdentityResourceProperty(0);\r\n        //Add new identity resource property\r\n        await identityResourceRepository.AddIdentityResourcePropertyAsync(resource.Id, identityResourceProperty);\r\n        //Get new identity resource property\r\n        var resourceProperty = await identityResourceRepository.GetIdentityResourcePropertyAsync(identityResourceProperty.Id);\r\n        resourceProperty.Should().BeEquivalentTo(identityResourceProperty, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(x =\u003E x.IdentityResource));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PersistedGrantRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "GetPersistedGrantAsync",
        "Body": "{\r\n    using (var context = new IdentityServerPersistedGrantDbContext(_dbContextOptions, _operationalStore))\r\n    {\r\n        using (var identityDbContext = new AdminIdentityDbContext(_identityDbContextOptions))\r\n        {\r\n            var persistedGrantRepository = GetPersistedGrantRepository(identityDbContext, context);\r\n            //Generate persisted grant\r\n            var persistedGrantKey = Guid.NewGuid().ToString();\r\n            var persistedGrant = PersistedGrantMock.GenerateRandomPersistedGrant(persistedGrantKey);\r\n            //Try add new persisted grant\r\n            await context.PersistedGrants.AddAsync(persistedGrant);\r\n            await context.SaveChangesAsync();\r\n            //Try get persisted grant\r\n            var persistedGrantAdded = await persistedGrantRepository.GetPersistedGrantAsync(persistedGrantKey);\r\n            //Assert\r\n            persistedGrant.Should().BeEquivalentTo(persistedGrantAdded, opt =\u003E opt.Excluding(x =\u003E x.Key));\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeletePersistedGrantAsync",
        "Body": "{\r\n    using (var context = new IdentityServerPersistedGrantDbContext(_dbContextOptions, _operationalStore))\r\n    {\r\n        using (var identityDbContext = new AdminIdentityDbContext(_identityDbContextOptions))\r\n        {\r\n            var persistedGrantRepository = GetPersistedGrantRepository(identityDbContext, context);\r\n            //Generate persisted grant\r\n            var persistedGrantKey = Guid.NewGuid().ToString();\r\n            var persistedGrant = PersistedGrantMock.GenerateRandomPersistedGrant(persistedGrantKey);\r\n            //Try add new persisted grant\r\n            await context.PersistedGrants.AddAsync(persistedGrant);\r\n            await context.SaveChangesAsync();\r\n            //Try delete persisted grant\r\n            await persistedGrantRepository.DeletePersistedGrantAsync(persistedGrantKey);\r\n            var grant = await persistedGrantRepository.GetPersistedGrantAsync(persistedGrantKey);\r\n            //Assert\r\n            grant.Should().BeNull();\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeletePersistedGrantsAsync",
        "Body": "{\r\n    using (var context = new IdentityServerPersistedGrantDbContext(_dbContextOptions, _operationalStore))\r\n    {\r\n        using (var identityDbContext = new AdminIdentityDbContext(_identityDbContextOptions))\r\n        {\r\n            var persistedGrantRepository = GetPersistedGrantRepository(identityDbContext, context);\r\n            var subjectId = 1;\r\n            for (var i = 0; i \u003C 4; i\u002B\u002B)\r\n            {\r\n                //Generate persisted grant\r\n                var persistedGrantKey = Guid.NewGuid().ToString();\r\n                var persistedGrant = PersistedGrantMock.GenerateRandomPersistedGrant(persistedGrantKey, subjectId.ToString());\r\n                //Try add new persisted grant\r\n                await context.PersistedGrants.AddAsync(persistedGrant);\r\n            }\r\n\r\n            await context.SaveChangesAsync();\r\n            //Try delete persisted grant\r\n            await persistedGrantRepository.DeletePersistedGrantsAsync(subjectId.ToString());\r\n            var grant = await persistedGrantRepository.GetPersistedGrantsByUserAsync(subjectId.ToString());\r\n            //Assert\r\n            grant.TotalCount.Should().Be(0);\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ApiResourceServiceTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddApiResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceService = GetApiResourceService(context);\r\n        //Generate random new api resource\r\n        var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n        await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n        //Get new api resource\r\n        var apiResource = await context.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n        var newApiResourceDto = await apiResourceService.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        apiResourceDto.Should().BeEquivalentTo(newApiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceService = GetApiResourceService(context);\r\n        //Generate random new api resource\r\n        var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n        await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n        //Get new api resource\r\n        var apiResource = await context.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n        var newApiResourceDto = await apiResourceService.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        apiResourceDto.Should().BeEquivalentTo(newApiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RemoveApiResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceService = GetApiResourceService(context);\r\n        //Generate random new api resource\r\n        var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n        await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n        //Get new api resource\r\n        var apiResource = await context.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n        var newApiResourceDto = await apiResourceService.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        apiResourceDto.Should().BeEquivalentTo(newApiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Remove api resource\r\n        await apiResourceService.DeleteApiResourceAsync(newApiResourceDto);\r\n        //Try get removed api resource\r\n        var removeApiResource = await context.ApiResources.Where(x =\u003E x.Id == apiResource.Id).SingleOrDefaultAsync();\r\n        //Assert removed api resource\r\n        removeApiResource.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateApiResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceService = GetApiResourceService(context);\r\n        //Generate random new api resource\r\n        var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n        await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n        //Get new api resource\r\n        var apiResource = await context.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n        var newApiResourceDto = await apiResourceService.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        apiResourceDto.Should().BeEquivalentTo(newApiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Detached the added item\r\n        context.Entry(apiResource).State = EntityState.Detached;\r\n        //Generete new api resuorce with added item id\r\n        var updatedApiResource = ApiResourceDtoMock.GenerateRandomApiResource(apiResource.Id);\r\n        //Update api resource\r\n        await apiResourceService.UpdateApiResourceAsync(updatedApiResource);\r\n        var updatedApiResourceDto = await apiResourceService.GetApiResourceAsync(apiResource.Id);\r\n        //Assert updated api resuorce\r\n        updatedApiResource.Should().BeEquivalentTo(updatedApiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddApiSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceService = GetApiResourceService(context);\r\n        //Generate random new api resource\r\n        var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n        await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n        //Get new api resource\r\n        var apiResource = await context.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n        var newApiResourceDto = await apiResourceService.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        apiResourceDto.Should().BeEquivalentTo(newApiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new api secret\r\n        var apiSecretsDto = ApiResourceDtoMock.GenerateRandomApiSecret(0, newApiResourceDto.Id);\r\n        //Add new api secret\r\n        await apiResourceService.AddApiSecretAsync(apiSecretsDto);\r\n        //Get inserted api secret\r\n        var apiSecret = await context.ApiSecrets.Where(x =\u003E x.Value == apiSecretsDto.Value \u0026\u0026 x.ApiResource.Id == newApiResourceDto.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var secretsDto = apiSecret.ToModel();\r\n        //Get new api secret    \r\n        var newApiSecret = await apiResourceService.GetApiSecretAsync(secretsDto.ApiSecretId);\r\n        //Assert secret value\r\n        secretsDto.Value.Should().Be(apiSecretsDto.Value);\r\n        //Assert\r\n        newApiSecret.Should().BeEquivalentTo(secretsDto, o =\u003E o.Excluding(x =\u003E x.ApiResourceName).Excluding(x =\u003E x.Value));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteApiSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceService = GetApiResourceService(context);\r\n        //Generate random new api resource\r\n        var apiResourceDto = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n        await apiResourceService.AddApiResourceAsync(apiResourceDto);\r\n        //Get new api resource\r\n        var apiResource = await context.ApiResources.Where(x =\u003E x.Name == apiResourceDto.Name).SingleOrDefaultAsync();\r\n        var newApiResourceDto = await apiResourceService.GetApiResourceAsync(apiResource.Id);\r\n        //Assert new api resource\r\n        apiResourceDto.Should().BeEquivalentTo(newApiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new api secret\r\n        var apiSecretsDtoMock = ApiResourceDtoMock.GenerateRandomApiSecret(0, newApiResourceDto.Id);\r\n        //Add new api secret\r\n        await apiResourceService.AddApiSecretAsync(apiSecretsDtoMock);\r\n        //Get inserted api secret\r\n        var apiSecret = await context.ApiSecrets.Where(x =\u003E x.Value == apiSecretsDtoMock.Value \u0026\u0026 x.ApiResource.Id == newApiResourceDto.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var apiSecretsDto = apiSecret.ToModel();\r\n        //Get new api secret    \r\n        var newApiSecret = await apiResourceService.GetApiSecretAsync(apiSecretsDto.ApiSecretId);\r\n        // Assert\r\n        newApiSecret.Should().BeEquivalentTo(apiSecretsDto, o =\u003E o.Excluding(x =\u003E x.ApiResourceName).Excluding(x =\u003E x.Value));\r\n        apiSecretsDto.Value.Should().Be(apiSecretsDtoMock.Value);\r\n        //Delete it\r\n        await apiResourceService.DeleteApiSecretAsync(newApiSecret);\r\n        var deletedApiSecret = await context.ApiSecrets.Where(x =\u003E x.Value == apiSecretsDtoMock.Value \u0026\u0026 x.ApiResource.Id == newApiResourceDto.Id).SingleOrDefaultAsync();\r\n        //Assert after deleting\r\n        deletedApiSecret.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddApiResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceService = GetApiResourceService(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n        await apiResourceService.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var resource = await context.ApiResources.Where(x =\u003E x.Name == apiResource.Name).SingleOrDefaultAsync();\r\n        var apiResourceDto = await apiResourceService.GetApiResourceAsync(resource.Id);\r\n        //Assert new api resource\r\n        apiResource.Should().BeEquivalentTo(apiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new api resource property\r\n        var apiResourceProperty = ApiResourceDtoMock.GenerateRandomApiResourceProperty(0, resource.Id);\r\n        //Add new api resource property\r\n        await apiResourceService.AddApiResourcePropertyAsync(apiResourceProperty);\r\n        //Get inserted api resource property\r\n        var property = await context.ApiResourceProperties.Where(x =\u003E x.Value == apiResourceProperty.Value \u0026\u0026 x.ApiResource.Id == resource.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var propertyDto = property.ToModel();\r\n        //Get new api resource property    \r\n        var resourcePropertiesDto = await apiResourceService.GetApiResourcePropertyAsync(property.Id);\r\n        //Assert\r\n        resourcePropertiesDto.Should().BeEquivalentTo(propertyDto, options =\u003E options.Excluding(o =\u003E o.ApiResourcePropertyId).Excluding(o =\u003E o.ApiResourceName));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceService = GetApiResourceService(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n        await apiResourceService.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var resource = await context.ApiResources.Where(x =\u003E x.Name == apiResource.Name).SingleOrDefaultAsync();\r\n        var apiResourceDto = await apiResourceService.GetApiResourceAsync(resource.Id);\r\n        //Assert new api resource\r\n        apiResource.Should().BeEquivalentTo(apiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new api resource property\r\n        var apiResourceProperty = ApiResourceDtoMock.GenerateRandomApiResourceProperty(0, resource.Id);\r\n        //Add new api resource property\r\n        await apiResourceService.AddApiResourcePropertyAsync(apiResourceProperty);\r\n        //Get inserted api resource property\r\n        var property = await context.ApiResourceProperties.Where(x =\u003E x.Value == apiResourceProperty.Value \u0026\u0026 x.ApiResource.Id == resource.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var propertyDto = property.ToModel();\r\n        //Get new api resource property    \r\n        var apiResourcePropertiesDto = await apiResourceService.GetApiResourcePropertyAsync(property.Id);\r\n        //Assert\r\n        apiResourcePropertiesDto.Should().BeEquivalentTo(propertyDto, options =\u003E options.Excluding(o =\u003E o.ApiResourcePropertyId).Excluding(o =\u003E o.ApiResourceName));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteApiResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiResourceService = GetApiResourceService(context);\r\n        //Generate random new api resource\r\n        var apiResource = ApiResourceDtoMock.GenerateRandomApiResource(0);\r\n        await apiResourceService.AddApiResourceAsync(apiResource);\r\n        //Get new api resource\r\n        var resource = await context.ApiResources.Where(x =\u003E x.Name == apiResource.Name).SingleOrDefaultAsync();\r\n        var apiResourceDto = await apiResourceService.GetApiResourceAsync(resource.Id);\r\n        //Assert new api resource\r\n        apiResource.Should().BeEquivalentTo(apiResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new api resource Property\r\n        var apiResourcePropertiesDto = ApiResourceDtoMock.GenerateRandomApiResourceProperty(0, resource.Id);\r\n        //Add new api resource Property\r\n        await apiResourceService.AddApiResourcePropertyAsync(apiResourcePropertiesDto);\r\n        //Get inserted api resource Property\r\n        var property = await context.ApiResourceProperties.Where(x =\u003E x.Value == apiResourcePropertiesDto.Value \u0026\u0026 x.ApiResource.Id == resource.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var propertiesDto = property.ToModel();\r\n        //Get new api resource Property    \r\n        var resourcePropertiesDto = await apiResourceService.GetApiResourcePropertyAsync(property.Id);\r\n        //Assert\r\n        resourcePropertiesDto.Should().BeEquivalentTo(propertiesDto, options =\u003E options.Excluding(o =\u003E o.ApiResourcePropertyId).Excluding(o =\u003E o.ApiResourceName));\r\n        //Delete api resource Property\r\n        await apiResourceService.DeleteApiResourcePropertyAsync(resourcePropertiesDto);\r\n        //Get removed api resource Property\r\n        var apiResourceProperty = await context.ApiResourceProperties.Where(x =\u003E x.Id == property.Id).SingleOrDefaultAsync();\r\n        //Assert after delete it\r\n        apiResourceProperty.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ApiScopeServiceTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddApiScopeAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiScopeService = GetApiScopeService(context);\r\n        //Generate random new api scope\r\n        var apiScopeDtoMock = ApiScopeDtoMock.GenerateRandomApiScope(0);\r\n        //Add new api scope\r\n        await apiScopeService.AddApiScopeAsync(apiScopeDtoMock);\r\n        //Get inserted api scope\r\n        var apiScope = await context.ApiScopes.Where(x =\u003E x.Name == apiScopeDtoMock.Name).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var apiScopesDto = apiScope.ToModel();\r\n        //Get new api scope\r\n        var newApiScope = await apiScopeService.GetApiScopeAsync(apiScopesDto.Id);\r\n        //Assert\r\n        newApiScope.Should().BeEquivalentTo(apiScopesDto);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiScopeAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiScopeService = GetApiScopeService(context);\r\n        //Generate random new api scope\r\n        var apiScopeDtoMock = ApiScopeDtoMock.GenerateRandomApiScope(0);\r\n        //Add new api scope\r\n        await apiScopeService.AddApiScopeAsync(apiScopeDtoMock);\r\n        //Get inserted api scope\r\n        var apiScope = await context.ApiScopes.Where(x =\u003E x.Name == apiScopeDtoMock.Name).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var apiScopesDto = apiScope.ToModel();\r\n        //Get new api scope\r\n        var newApiScope = await apiScopeService.GetApiScopeAsync(apiScopesDto.Id);\r\n        //Assert\r\n        newApiScope.Should().BeEquivalentTo(apiScopesDto);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateApiScopeAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiScopeService = GetApiScopeService(context);\r\n        //Generate random new api scope\r\n        var apiScopeDtoMock = ApiScopeDtoMock.GenerateRandomApiScope(0);\r\n        //Add new api scope\r\n        await apiScopeService.AddApiScopeAsync(apiScopeDtoMock);\r\n        //Get inserted api scope\r\n        var apiScope = await context.ApiScopes.Where(x =\u003E x.Name == apiScopeDtoMock.Name).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var apiScopesDto = apiScope.ToModel();\r\n        //Get new api scope\r\n        var newApiScope = await apiScopeService.GetApiScopeAsync(apiScopesDto.Id);\r\n        //Assert\r\n        newApiScope.Should().BeEquivalentTo(apiScopesDto);\r\n        //Detached the added item\r\n        context.Entry(apiScope).State = EntityState.Detached;\r\n        //Update api scope\r\n        var updatedApiScope = ApiScopeDtoMock.GenerateRandomApiScope(apiScopesDto.Id);\r\n        await apiScopeService.UpdateApiScopeAsync(updatedApiScope);\r\n        var updatedApiScopeDto = await apiScopeService.GetApiScopeAsync(apiScopesDto.Id);\r\n        //Assert updated api scope\r\n        updatedApiScope.Should().BeEquivalentTo(updatedApiScopeDto);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteApiScopeAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var apiScopeService = GetApiScopeService(context);\r\n        //Generate random new api scope\r\n        var apiScopeDtoMock = ApiScopeDtoMock.GenerateRandomApiScope(0);\r\n        //Add new api scope\r\n        await apiScopeService.AddApiScopeAsync(apiScopeDtoMock);\r\n        //Get inserted api scope\r\n        var apiScope = await context.ApiScopes.Where(x =\u003E x.Name == apiScopeDtoMock.Name).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var apiScopeDto = apiScope.ToModel();\r\n        //Get new api scope\r\n        var newApiScope = await apiScopeService.GetApiScopeAsync(apiScopeDto.Id);\r\n        //Assert\r\n        newApiScope.Should().BeEquivalentTo(apiScopeDto);\r\n        //Delete it\r\n        await apiScopeService.DeleteApiScopeAsync(newApiScope);\r\n        var deletedApiScope = await context.ApiScopes.Where(x =\u003E x.Name == apiScopeDtoMock.Name).SingleOrDefaultAsync();\r\n        //Assert after deleting\r\n        deletedApiScope.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClientServiceTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddClientAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CloneClientAsync",
        "Body": "{\r\n    int clonedClientId;\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        //Generate random new client\r\n        var clientDto = ClientDtoMock.GenerateRandomClient(0);\r\n        var clientService = GetClientService(context);\r\n        //Add new client\r\n        await clientService.AddClientAsync(clientDto);\r\n        var clientId = await context.Clients.Where(x =\u003E x.ClientId == clientDto.ClientId).Select(x =\u003E x.Id).SingleOrDefaultAsync();\r\n        var clientDtoToClone = await clientService.GetClientAsync(clientId);\r\n        var clientCloneDto = ClientDtoMock.GenerateClientCloneDto(clientDtoToClone.Id);\r\n        //Try clone it\r\n        clonedClientId = await clientService.CloneClientAsync(clientCloneDto);\r\n        var cloneClientEntity = await context.Clients.Include(x =\u003E x.AllowedGrantTypes).Include(x =\u003E x.RedirectUris).Include(x =\u003E x.PostLogoutRedirectUris).Include(x =\u003E x.AllowedScopes).Include(x =\u003E x.ClientSecrets).Include(x =\u003E x.Claims).Include(x =\u003E x.IdentityProviderRestrictions).Include(x =\u003E x.AllowedCorsOrigins).Include(x =\u003E x.Properties).Where(x =\u003E x.Id == clonedClientId).SingleOrDefaultAsync();\r\n        var clientToCompare = await context.Clients.Include(x =\u003E x.AllowedGrantTypes).Include(x =\u003E x.RedirectUris).Include(x =\u003E x.PostLogoutRedirectUris).Include(x =\u003E x.AllowedScopes).Include(x =\u003E x.ClientSecrets).Include(x =\u003E x.Claims).Include(x =\u003E x.IdentityProviderRestrictions).Include(x =\u003E x.AllowedCorsOrigins).Include(x =\u003E x.Properties).Where(x =\u003E x.Id == clientDtoToClone.Id).SingleOrDefaultAsync();\r\n        //Assert cloned client\r\n        cloneClientEntity.Should().BeEquivalentTo(clientToCompare, options =\u003E options.Excluding(o =\u003E o.Id).Excluding(o =\u003E o.ClientSecrets).Excluding(o =\u003E o.ClientId).Excluding(o =\u003E o.ClientName)//Skip the collections because is not possible ignore property in list :-(\r\n        //Note: I\u0027ve found the solution above - try ignore property of the list using SelectedMemberPath                        \r\n        .Excluding(o =\u003E o.AllowedGrantTypes).Excluding(o =\u003E o.RedirectUris).Excluding(o =\u003E o.PostLogoutRedirectUris).Excluding(o =\u003E o.AllowedScopes).Excluding(o =\u003E o.ClientSecrets).Excluding(o =\u003E o.Claims).Excluding(o =\u003E o.IdentityProviderRestrictions).Excluding(o =\u003E o.AllowedCorsOrigins).Excluding(o =\u003E o.Properties));\r\n        //New client relations have new id\u0027s and client relations therefore is required ignore them\r\n        cloneClientEntity.AllowedGrantTypes.Should().BeEquivalentTo(clientToCompare.AllowedGrantTypes, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Client\u0022)));\r\n        cloneClientEntity.AllowedCorsOrigins.Should().BeEquivalentTo(clientToCompare.AllowedCorsOrigins, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Client\u0022)));\r\n        cloneClientEntity.RedirectUris.Should().BeEquivalentTo(clientToCompare.RedirectUris, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Client\u0022)));\r\n        cloneClientEntity.PostLogoutRedirectUris.Should().BeEquivalentTo(clientToCompare.PostLogoutRedirectUris, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Client\u0022)));\r\n        cloneClientEntity.AllowedScopes.Should().BeEquivalentTo(clientToCompare.AllowedScopes, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Client\u0022)));\r\n        cloneClientEntity.ClientSecrets.Should().BeEquivalentTo(clientToCompare.ClientSecrets, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Client\u0022)));\r\n        cloneClientEntity.Claims.Should().BeEquivalentTo(clientToCompare.Claims, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Client\u0022)));\r\n        cloneClientEntity.IdentityProviderRestrictions.Should().BeEquivalentTo(clientToCompare.IdentityProviderRestrictions, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Client\u0022)));\r\n        cloneClientEntity.Properties.Should().BeEquivalentTo(clientToCompare.Properties, option =\u003E option.Excluding(x =\u003E x.Path.EndsWith(\u0022Id\u0022)).Excluding(x =\u003E x.Path.EndsWith(\u0022Client\u0022)));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateClientAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client without id\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Detached the added item\r\n        context.Entry(clientEntity).State = EntityState.Detached;\r\n        //Generete new client with added item id\r\n        var updatedClient = ClientDtoMock.GenerateRandomClient(clientDto.Id);\r\n        //Update client\r\n        await clientService.UpdateClientAsync(updatedClient);\r\n        //Get updated client\r\n        var updatedClientEntity = await context.Clients.Where(x =\u003E x.Id == updatedClient.Id).SingleAsync();\r\n        var updatedClientDto = await clientService.GetClientAsync(updatedClientEntity.Id);\r\n        //Assert updated client\r\n        updatedClient.Should().BeEquivalentTo(updatedClientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RemoveClientAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client without id\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        //Add new client\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Detached the added item\r\n        context.Entry(clientEntity).State = EntityState.Detached;\r\n        //Remove client\r\n        await clientService.RemoveClientAsync(clientDto);\r\n        //Try Get Removed client\r\n        var removeClientEntity = await context.Clients.Where(x =\u003E x.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Assert removed client - it might be null\r\n        removeClientEntity.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddClientClaimAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new Client Claim\r\n        var clientClaim = ClientDtoMock.GenerateRandomClientClaim(0, clientEntity.Id);\r\n        //Add new client claim\r\n        await clientService.AddClientClaimAsync(clientClaim);\r\n        //Get inserted client claims\r\n        var claim = await context.ClientClaims.Where(x =\u003E x.Value == clientClaim.Value \u0026\u0026 x.Client.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var claimsDto = claim.ToModel();\r\n        //Get new client claim    \r\n        var clientClaimsDto = await clientService.GetClientClaimAsync(claim.Id);\r\n        //Assert\r\n        clientClaimsDto.Should().BeEquivalentTo(claimsDto, options =\u003E options.Excluding(o =\u003E o.ClientClaimId).Excluding(o =\u003E o.ClientName));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteClientClaimAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new Client Claim\r\n        var clientClaim = ClientDtoMock.GenerateRandomClientClaim(0, clientEntity.Id);\r\n        //Add new client claim\r\n        await clientService.AddClientClaimAsync(clientClaim);\r\n        //Get inserted client claims\r\n        var claim = await context.ClientClaims.Where(x =\u003E x.Value == clientClaim.Value \u0026\u0026 x.Client.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var claimsDto = claim.ToModel();\r\n        //Get new client claim    \r\n        var clientClaimsDto = await clientService.GetClientClaimAsync(claim.Id);\r\n        //Assert\r\n        clientClaimsDto.Should().BeEquivalentTo(claimsDto, options =\u003E options.Excluding(o =\u003E o.ClientClaimId).Excluding(o =\u003E o.ClientName));\r\n        //Delete client claim\r\n        await clientService.DeleteClientClaimAsync(clientClaimsDto);\r\n        //Get removed client claim\r\n        var deletedClientClaim = await context.ClientClaims.Where(x =\u003E x.Id == claim.Id).SingleOrDefaultAsync();\r\n        //Assert after delete it\r\n        deletedClientClaim.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientClaimAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new Client Claim\r\n        var clientClaim = ClientDtoMock.GenerateRandomClientClaim(0, clientEntity.Id);\r\n        //Add new client claim\r\n        await clientService.AddClientClaimAsync(clientClaim);\r\n        //Get inserted client claims\r\n        var claim = await context.ClientClaims.Where(x =\u003E x.Value == clientClaim.Value \u0026\u0026 x.Client.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var claimsDto = claim.ToModel();\r\n        //Get new client claim    \r\n        var clientClaimsDto = await clientService.GetClientClaimAsync(claim.Id);\r\n        //Assert\r\n        clientClaimsDto.Should().BeEquivalentTo(claimsDto, options =\u003E options.Excluding(o =\u003E o.ClientClaimId).Excluding(o =\u003E o.ClientName));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddClientPropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new Client property\r\n        var clicentProperty = ClientDtoMock.GenerateRandomClientProperty(0, clientEntity.Id);\r\n        //Add new client property\r\n        await clientService.AddClientPropertyAsync(clicentProperty);\r\n        //Get inserted client property\r\n        var property = await context.ClientProperties.Where(x =\u003E x.Value == clicentProperty.Value \u0026\u0026 x.Client.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var propertyDto = property.ToModel();\r\n        //Get new client property    \r\n        var clientPropertiesDto = await clientService.GetClientPropertyAsync(property.Id);\r\n        //Assert\r\n        clientPropertiesDto.Should().BeEquivalentTo(propertyDto, options =\u003E options.Excluding(o =\u003E o.ClientPropertyId).Excluding(o =\u003E o.ClientName));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientPropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new Client property\r\n        var clicentProperty = ClientDtoMock.GenerateRandomClientProperty(0, clientEntity.Id);\r\n        //Add new client property\r\n        await clientService.AddClientPropertyAsync(clicentProperty);\r\n        //Get inserted client property\r\n        var property = await context.ClientProperties.Where(x =\u003E x.Value == clicentProperty.Value \u0026\u0026 x.Client.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var propertyDto = property.ToModel();\r\n        //Get new client property    \r\n        var clientPropertiesDto = await clientService.GetClientPropertyAsync(property.Id);\r\n        //Assert\r\n        clientPropertiesDto.Should().BeEquivalentTo(propertyDto, options =\u003E options.Excluding(o =\u003E o.ClientPropertyId).Excluding(o =\u003E o.ClientName));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteClientPropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new Client Property\r\n        var clientProperty = ClientDtoMock.GenerateRandomClientProperty(0, clientEntity.Id);\r\n        //Add new client Property\r\n        await clientService.AddClientPropertyAsync(clientProperty);\r\n        //Get inserted client Property\r\n        var property = await context.ClientProperties.Where(x =\u003E x.Value == clientProperty.Value \u0026\u0026 x.Client.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var propertiesDto = property.ToModel();\r\n        //Get new client Property    \r\n        var clientPropertiesDto = await clientService.GetClientPropertyAsync(property.Id);\r\n        //Assert\r\n        clientPropertiesDto.Should().BeEquivalentTo(propertiesDto, options =\u003E options.Excluding(o =\u003E o.ClientPropertyId).Excluding(o =\u003E o.ClientName));\r\n        //Delete client Property\r\n        await clientService.DeleteClientPropertyAsync(clientPropertiesDto);\r\n        //Get removed client Property\r\n        var deletedClientProperty = await context.ClientProperties.Where(x =\u003E x.Id == property.Id).SingleOrDefaultAsync();\r\n        //Assert after delete it\r\n        deletedClientProperty.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddClientSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new Client secret\r\n        var clientSecret = ClientDtoMock.GenerateRandomClientSecret(0, clientEntity.Id);\r\n        //Add new client secret\r\n        await clientService.AddClientSecretAsync(clientSecret);\r\n        //Get inserted client secret\r\n        var secret = await context.ClientSecrets.Where(x =\u003E x.Value == clientSecret.Value \u0026\u0026 x.Client.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var clientSecretsDto = secret.ToModel();\r\n        //Get new client secret    \r\n        var secretsDto = await clientService.GetClientSecretAsync(secret.Id);\r\n        clientSecretsDto.Value.Should().Be(clientSecret.Value);\r\n        //Assert\r\n        secretsDto.Should().BeEquivalentTo(clientSecretsDto, options =\u003E options.Excluding(o =\u003E o.ClientSecretId).Excluding(o =\u003E o.ClientName).Excluding(o =\u003E o.Value));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new Client secret\r\n        var clientSecret = ClientDtoMock.GenerateRandomClientSecret(0, clientEntity.Id);\r\n        //Add new client secret\r\n        await clientService.AddClientSecretAsync(clientSecret);\r\n        //Get inserted client secret\r\n        var secret = await context.ClientSecrets.Where(x =\u003E x.Value == clientSecret.Value \u0026\u0026 x.Client.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var clientSecretsDto = secret.ToModel();\r\n        //Get new client secret    \r\n        var secretsDto = await clientService.GetClientSecretAsync(secret.Id);\r\n        clientSecretsDto.Value.Should().Be(clientSecret.Value);\r\n        //Assert\r\n        secretsDto.Should().BeEquivalentTo(clientSecretsDto, options =\u003E options.Excluding(o =\u003E o.ClientSecretId).Excluding(o =\u003E o.ClientName).Excluding(o =\u003E o.Value));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteClientSecretAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var clientService = GetClientService(context);\r\n        //Generate random new client\r\n        var client = ClientDtoMock.GenerateRandomClient(0);\r\n        await clientService.AddClientAsync(client);\r\n        //Get new client\r\n        var clientEntity = await context.Clients.Where(x =\u003E x.ClientId == client.ClientId).SingleOrDefaultAsync();\r\n        var clientDto = await clientService.GetClientAsync(clientEntity.Id);\r\n        //Assert new client\r\n        client.Should().BeEquivalentTo(clientDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new Client secret\r\n        var clientSecret = ClientDtoMock.GenerateRandomClientSecret(0, clientEntity.Id);\r\n        //Add new client secret\r\n        await clientService.AddClientSecretAsync(clientSecret);\r\n        //Get inserted client secret\r\n        var secret = await context.ClientSecrets.Where(x =\u003E x.Value == clientSecret.Value \u0026\u0026 x.Client.Id == clientEntity.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var secretsDto = secret.ToModel();\r\n        //Get new client secret    \r\n        var clientSecretsDto = await clientService.GetClientSecretAsync(secret.Id);\r\n        //Assert\r\n        clientSecretsDto.Should().BeEquivalentTo(secretsDto, options =\u003E options.Excluding(o =\u003E o.ClientSecretId).Excluding(o =\u003E o.ClientName).Excluding(o =\u003E o.Value));\r\n        clientSecret.Value.Should().Be(secret.Value);\r\n        //Delete client secret\r\n        await clientService.DeleteClientSecretAsync(clientSecretsDto);\r\n        //Get removed client secret\r\n        var deleteClientSecret = await context.ClientSecrets.Where(x =\u003E x.Id == secret.Id).SingleOrDefaultAsync();\r\n        //Assert after delete it\r\n        deleteClientSecret.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IdentityResourceServiceTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddIdentityResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceService = GetIdentityResourceService(context);\r\n        //Generate random new identity resource\r\n        var identityResourceDto = IdentityResourceDtoMock.GenerateRandomIdentityResource(0);\r\n        await identityResourceService.AddIdentityResourceAsync(identityResourceDto);\r\n        //Get new identity resource\r\n        var identityResource = await context.IdentityResources.Where(x =\u003E x.Name == identityResourceDto.Name).SingleOrDefaultAsync();\r\n        var newIdentityResourceDto = await identityResourceService.GetIdentityResourceAsync(identityResource.Id);\r\n        //Assert new identity resource\r\n        identityResourceDto.Should().BeEquivalentTo(newIdentityResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIdentityResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceService = GetIdentityResourceService(context);\r\n        //Generate random new identity resource\r\n        var identityResourceDto = IdentityResourceDtoMock.GenerateRandomIdentityResource(0);\r\n        await identityResourceService.AddIdentityResourceAsync(identityResourceDto);\r\n        //Get new identity resource\r\n        var identityResource = await context.IdentityResources.Where(x =\u003E x.Name == identityResourceDto.Name).SingleOrDefaultAsync();\r\n        var newIdentityResourceDto = await identityResourceService.GetIdentityResourceAsync(identityResource.Id);\r\n        //Assert new identity resource\r\n        identityResourceDto.Should().BeEquivalentTo(newIdentityResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RemoveIdentityResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceService = GetIdentityResourceService(context);\r\n        //Generate random new identity resource\r\n        var identityResourceDto = IdentityResourceDtoMock.GenerateRandomIdentityResource(0);\r\n        await identityResourceService.AddIdentityResourceAsync(identityResourceDto);\r\n        //Get new identity resource\r\n        var identityResource = await context.IdentityResources.Where(x =\u003E x.Name == identityResourceDto.Name).SingleOrDefaultAsync();\r\n        var newIdentityResourceDto = await identityResourceService.GetIdentityResourceAsync(identityResource.Id);\r\n        //Assert new identity resource\r\n        identityResourceDto.Should().BeEquivalentTo(newIdentityResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Remove identity resource\r\n        await identityResourceService.DeleteIdentityResourceAsync(newIdentityResourceDto);\r\n        //Try Get Removed identity resource\r\n        var removeIdentityResource = await context.IdentityResources.Where(x =\u003E x.Id == identityResource.Id).SingleOrDefaultAsync();\r\n        //Assert removed identity resource\r\n        removeIdentityResource.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateIdentityResourceAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceService = GetIdentityResourceService(context);\r\n        //Generate random new identity resource\r\n        var identityResourceDto = IdentityResourceDtoMock.GenerateRandomIdentityResource(0);\r\n        await identityResourceService.AddIdentityResourceAsync(identityResourceDto);\r\n        //Get new identity resource\r\n        var identityResource = await context.IdentityResources.Where(x =\u003E x.Name == identityResourceDto.Name).SingleOrDefaultAsync();\r\n        var newIdentityResourceDto = await identityResourceService.GetIdentityResourceAsync(identityResource.Id);\r\n        //Assert new identity resource\r\n        identityResourceDto.Should().BeEquivalentTo(newIdentityResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Detached the added item\r\n        context.Entry(identityResource).State = EntityState.Detached;\r\n        //Generete new identity resuorce with added item id\r\n        var updatedIdentityResource = IdentityResourceDtoMock.GenerateRandomIdentityResource(identityResource.Id);\r\n        //Update identity resuorce\r\n        await identityResourceService.UpdateIdentityResourceAsync(updatedIdentityResource);\r\n        var updatedIdentityResourceDto = await identityResourceService.GetIdentityResourceAsync(identityResource.Id);\r\n        //Assert updated identity resuorce\r\n        updatedIdentityResource.Should().BeEquivalentTo(updatedIdentityResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddIdentityResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceService = GetIdentityResourceService(context);\r\n        //Generate random new identity resource\r\n        var identityResource = IdentityResourceDtoMock.GenerateRandomIdentityResource(0);\r\n        await identityResourceService.AddIdentityResourceAsync(identityResource);\r\n        //Get new identity resource\r\n        var resource = await context.IdentityResources.Where(x =\u003E x.Name == identityResource.Name).SingleOrDefaultAsync();\r\n        var identityResourceDto = await identityResourceService.GetIdentityResourceAsync(resource.Id);\r\n        //Assert new identity resource\r\n        identityResource.Should().BeEquivalentTo(identityResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new identity resource property\r\n        var resourceProperty = IdentityResourceDtoMock.GenerateRandomIdentityResourceProperty(0, resource.Id);\r\n        //Add new identity resource property\r\n        await identityResourceService.AddIdentityResourcePropertyAsync(resourceProperty);\r\n        //Get inserted identity resource property\r\n        var property = await context.IdentityResourceProperties.Where(x =\u003E x.Value == resourceProperty.Value \u0026\u0026 x.IdentityResource.Id == resource.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var propertyDto = property.ToModel();\r\n        //Get new identity resource property    \r\n        var resourcePropertiesDto = await identityResourceService.GetIdentityResourcePropertyAsync(property.Id);\r\n        //Assert\r\n        resourcePropertiesDto.Should().BeEquivalentTo(propertyDto, options =\u003E options.Excluding(o =\u003E o.IdentityResourcePropertyId).Excluding(o =\u003E o.IdentityResourceName));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIdentityResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceService = GetIdentityResourceService(context);\r\n        //Generate random new identity resource\r\n        var identityResource = IdentityResourceDtoMock.GenerateRandomIdentityResource(0);\r\n        await identityResourceService.AddIdentityResourceAsync(identityResource);\r\n        //Get new identity resource\r\n        var resource = await context.IdentityResources.Where(x =\u003E x.Name == identityResource.Name).SingleOrDefaultAsync();\r\n        var identityResourceDto = await identityResourceService.GetIdentityResourceAsync(resource.Id);\r\n        //Assert new identity resource\r\n        identityResource.Should().BeEquivalentTo(identityResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new identity resource property\r\n        var identityResourceProperty = IdentityResourceDtoMock.GenerateRandomIdentityResourceProperty(0, resource.Id);\r\n        //Add new identity resource property\r\n        await identityResourceService.AddIdentityResourcePropertyAsync(identityResourceProperty);\r\n        //Get inserted identity resource property\r\n        var property = await context.IdentityResourceProperties.Where(x =\u003E x.Value == identityResourceProperty.Value \u0026\u0026 x.IdentityResource.Id == resource.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var propertyDto = property.ToModel();\r\n        //Get new identity resource property    \r\n        var resourcePropertiesDto = await identityResourceService.GetIdentityResourcePropertyAsync(property.Id);\r\n        //Assert\r\n        resourcePropertiesDto.Should().BeEquivalentTo(propertyDto, options =\u003E options.Excluding(o =\u003E o.IdentityResourcePropertyId).Excluding(o =\u003E o.IdentityResourceName));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteIdentityResourcePropertyAsync",
        "Body": "{\r\n    using (var context = new IdentityServerConfigurationDbContext(_dbContextOptions, _storeOptions))\r\n    {\r\n        var identityResourceService = GetIdentityResourceService(context);\r\n        //Generate random new identity resource\r\n        var resourceDto = IdentityResourceDtoMock.GenerateRandomIdentityResource(0);\r\n        await identityResourceService.AddIdentityResourceAsync(resourceDto);\r\n        //Get new identity resource\r\n        var resource = await context.IdentityResources.Where(x =\u003E x.Name == resourceDto.Name).SingleOrDefaultAsync();\r\n        var identityResourceDto = await identityResourceService.GetIdentityResourceAsync(resource.Id);\r\n        //Assert new identity resource\r\n        resourceDto.Should().BeEquivalentTo(identityResourceDto, options =\u003E options.Excluding(o =\u003E o.Id));\r\n        //Generate random new identity resource Property\r\n        var identityResourcePropertiesDto = IdentityResourceDtoMock.GenerateRandomIdentityResourceProperty(0, resource.Id);\r\n        //Add new identity resource Property\r\n        await identityResourceService.AddIdentityResourcePropertyAsync(identityResourcePropertiesDto);\r\n        //Get inserted identity resource Property\r\n        var property = await context.IdentityResourceProperties.Where(x =\u003E x.Value == identityResourcePropertiesDto.Value \u0026\u0026 x.IdentityResource.Id == resource.Id).SingleOrDefaultAsync();\r\n        //Map entity to model\r\n        var propertiesDto = property.ToModel();\r\n        //Get new identity resource Property    \r\n        var resourcePropertiesDto = await identityResourceService.GetIdentityResourcePropertyAsync(property.Id);\r\n        //Assert\r\n        resourcePropertiesDto.Should().BeEquivalentTo(propertiesDto, options =\u003E options.Excluding(o =\u003E o.IdentityResourcePropertyId).Excluding(o =\u003E o.IdentityResourceName));\r\n        //Delete identity resource Property\r\n        await identityResourceService.DeleteIdentityResourcePropertyAsync(resourcePropertiesDto);\r\n        //Get removed identity resource Property\r\n        var identityResourceProperty = await context.IdentityResourceProperties.Where(x =\u003E x.Id == property.Id).SingleOrDefaultAsync();\r\n        //Assert after delete it\r\n        identityResourceProperty.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IdentityServiceTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AddUserAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new user\r\n        var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n        await identityService.CreateUserAsync(userDto);\r\n        //Get new user\r\n        var user = await context.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n        userDto.Id = user.Id;\r\n        var newUserDto = await identityService.GetUserAsync(userDto.Id.ToString());\r\n        //Assert new user\r\n        userDto.Should().BeEquivalentTo(newUserDto);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteUserProviderAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new user\r\n        var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n        await identityService.CreateUserAsync(userDto);\r\n        //Get new user\r\n        var user = await context.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n        userDto.Id = user.Id;\r\n        var newUserDto = await identityService.GetUserAsync(userDto.Id.ToString());\r\n        //Assert new user\r\n        userDto.Should().BeEquivalentTo(newUserDto);\r\n        var userProvider = IdentityMock.GenerateRandomUserProviders(Guid.NewGuid().ToString(), Guid.NewGuid().ToString(), newUserDto.Id);\r\n        //Add new user login\r\n        await context.UserLogins.AddAsync(userProvider);\r\n        await context.SaveChangesAsync();\r\n        //Get added user provider\r\n        var addedUserProvider = await context.UserLogins.Where(x =\u003E x.ProviderKey == userProvider.ProviderKey \u0026\u0026 x.LoginProvider == userProvider.LoginProvider).SingleOrDefaultAsync();\r\n        addedUserProvider.Should().NotBeNull();\r\n        var userProviderDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserProviders(userProvider.ProviderKey, userProvider.LoginProvider, userProvider.UserId);\r\n        await identityService.DeleteUserProvidersAsync(userProviderDto);\r\n        //Get deleted user provider\r\n        var deletedUserProvider = await context.UserLogins.Where(x =\u003E x.ProviderKey == userProvider.ProviderKey \u0026\u0026 x.LoginProvider == userProvider.LoginProvider).SingleOrDefaultAsync();\r\n        deletedUserProvider.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddUserRoleAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new user\r\n        var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n        await identityService.CreateUserAsync(userDto);\r\n        //Get new user\r\n        var user = await context.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n        userDto.Id = user.Id;\r\n        var newUserDto = await identityService.GetUserAsync(userDto.Id.ToString());\r\n        //Assert new user\r\n        userDto.Should().BeEquivalentTo(newUserDto);\r\n        //Generate random new role\r\n        var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n        await identityService.CreateRoleAsync(roleDto);\r\n        //Get new role\r\n        var role = await context.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n        roleDto.Id = role.Id;\r\n        var newRoleDto = await identityService.GetRoleAsync(roleDto.Id.ToString());\r\n        //Assert new role\r\n        roleDto.Should().BeEquivalentTo(newRoleDto);\r\n        var userRoleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserRole\u003CRoleDto\u003Cstring\u003E\u003E(roleDto.Id, userDto.Id);\r\n        await identityService.CreateUserRoleAsync(userRoleDto);\r\n        //Get new role\r\n        var userRole = await context.UserRoles.Where(x =\u003E x.RoleId == roleDto.Id \u0026\u0026 x.UserId == userDto.Id).SingleOrDefaultAsync();\r\n        userRole.Should().NotBeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteUserRoleAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new user\r\n        var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n        await identityService.CreateUserAsync(userDto);\r\n        //Get new user\r\n        var user = await context.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n        userDto.Id = user.Id;\r\n        var newUserDto = await identityService.GetUserAsync(userDto.Id.ToString());\r\n        //Assert new user\r\n        userDto.Should().BeEquivalentTo(newUserDto);\r\n        //Generate random new role\r\n        var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n        await identityService.CreateRoleAsync(roleDto);\r\n        //Get new role\r\n        var role = await context.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n        roleDto.Id = role.Id;\r\n        var newRoleDto = await identityService.GetRoleAsync(roleDto.Id.ToString());\r\n        //Assert new role\r\n        roleDto.Should().BeEquivalentTo(newRoleDto);\r\n        var userRoleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserRole\u003CRoleDto\u003Cstring\u003E\u003E(roleDto.Id, userDto.Id);\r\n        await identityService.CreateUserRoleAsync(userRoleDto);\r\n        //Get new role\r\n        var userRole = await context.UserRoles.Where(x =\u003E x.RoleId == roleDto.Id \u0026\u0026 x.UserId == userDto.Id).SingleOrDefaultAsync();\r\n        userRole.Should().NotBeNull();\r\n        await identityService.DeleteUserRoleAsync(userRoleDto);\r\n        //Get deleted role\r\n        var userRoleDeleted = await context.UserRoles.Where(x =\u003E x.RoleId == roleDto.Id \u0026\u0026 x.UserId == userDto.Id).SingleOrDefaultAsync();\r\n        userRoleDeleted.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddUserClaimAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new user\r\n        var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n        await identityService.CreateUserAsync(userDto);\r\n        //Get new user\r\n        var user = await context.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n        userDto.Id = user.Id;\r\n        var newUserDto = await identityService.GetUserAsync(userDto.Id.ToString());\r\n        //Assert new user\r\n        userDto.Should().BeEquivalentTo(newUserDto);\r\n        //Generate random new user claim\r\n        var userClaimDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserClaim(0, userDto.Id);\r\n        await identityService.CreateUserClaimsAsync(userClaimDto);\r\n        //Get new user claim\r\n        var claim = await context.UserClaims.Where(x =\u003E x.ClaimType == userClaimDto.ClaimType \u0026\u0026 x.ClaimValue == userClaimDto.ClaimValue).SingleOrDefaultAsync();\r\n        userClaimDto.ClaimId = claim.Id;\r\n        var newUserClaim = await identityService.GetUserClaimAsync(userDto.Id.ToString(), claim.Id);\r\n        //Assert new user claim\r\n        userClaimDto.Should().BeEquivalentTo(newUserClaim);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteUserClaimAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new user\r\n        var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n        await identityService.CreateUserAsync(userDto);\r\n        //Get new user\r\n        var user = await context.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n        userDto.Id = user.Id;\r\n        var newUserDto = await identityService.GetUserAsync(userDto.Id.ToString());\r\n        //Assert new user\r\n        userDto.Should().BeEquivalentTo(newUserDto);\r\n        //Generate random new user claim\r\n        var userClaimDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUserClaim(0, userDto.Id);\r\n        await identityService.CreateUserClaimsAsync(userClaimDto);\r\n        //Get new user claim\r\n        var claim = await context.UserClaims.Where(x =\u003E x.ClaimType == userClaimDto.ClaimType \u0026\u0026 x.ClaimValue == userClaimDto.ClaimValue).SingleOrDefaultAsync();\r\n        userClaimDto.ClaimId = claim.Id;\r\n        var newUserClaim = await identityService.GetUserClaimAsync(userDto.Id.ToString(), claim.Id);\r\n        //Assert new user claim\r\n        userClaimDto.Should().BeEquivalentTo(newUserClaim);\r\n        await identityService.DeleteUserClaimAsync(userClaimDto);\r\n        //Get deleted user claim\r\n        var deletedClaim = await context.UserClaims.Where(x =\u003E x.ClaimType == userClaimDto.ClaimType \u0026\u0026 x.ClaimValue == userClaimDto.ClaimValue).SingleOrDefaultAsync();\r\n        deletedClaim.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateUserAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new user\r\n        var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n        await identityService.CreateUserAsync(userDto);\r\n        //Get new user\r\n        var user = await context.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n        userDto.Id = user.Id;\r\n        var newUserDto = await identityService.GetUserAsync(userDto.Id.ToString());\r\n        //Assert new user\r\n        userDto.Should().BeEquivalentTo(newUserDto);\r\n        //Detached the added item\r\n        context.Entry(user).State = EntityState.Detached;\r\n        //Generete new user with added item id\r\n        var userDtoForUpdate = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser(user.Id);\r\n        //Update user\r\n        await identityService.UpdateUserAsync(userDtoForUpdate);\r\n        var updatedUser = await identityService.GetUserAsync(userDtoForUpdate.Id.ToString());\r\n        //Assert updated user\r\n        userDtoForUpdate.Should().BeEquivalentTo(updatedUser);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteUserAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new user\r\n        var userDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomUser();\r\n        await identityService.CreateUserAsync(userDto);\r\n        //Get new user\r\n        var user = await context.Users.Where(x =\u003E x.UserName == userDto.UserName).SingleOrDefaultAsync();\r\n        userDto.Id = user.Id;\r\n        var newUserDto = await identityService.GetUserAsync(userDto.Id.ToString());\r\n        //Assert new user\r\n        userDto.Should().BeEquivalentTo(newUserDto);\r\n        //Remove user\r\n        await identityService.DeleteUserAsync(newUserDto.Id.ToString(), newUserDto);\r\n        //Try Get Removed user\r\n        var removeUser = await context.Users.Where(x =\u003E x.Id == user.Id).SingleOrDefaultAsync();\r\n        //Assert removed user\r\n        removeUser.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddRoleAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new role\r\n        var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n        await identityService.CreateRoleAsync(roleDto);\r\n        //Get new role\r\n        var role = await context.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n        roleDto.Id = role.Id;\r\n        var newRoleDto = await identityService.GetRoleAsync(roleDto.Id.ToString());\r\n        //Assert new role\r\n        roleDto.Should().BeEquivalentTo(newRoleDto);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRoleAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new role\r\n        var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n        await identityService.CreateRoleAsync(roleDto);\r\n        //Get new role\r\n        var role = await context.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n        roleDto.Id = role.Id;\r\n        var newRoleDto = await identityService.GetRoleAsync(roleDto.Id.ToString());\r\n        //Assert new role\r\n        roleDto.Should().BeEquivalentTo(newRoleDto);\r\n        //Detached the added item\r\n        context.Entry(role).State = EntityState.Detached;\r\n        //Generete new role with added item id\r\n        var roleDtoForUpdate = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole(role.Id);\r\n        //Update role\r\n        await identityService.UpdateRoleAsync(roleDtoForUpdate);\r\n        var updatedRole = await identityService.GetRoleAsync(roleDtoForUpdate.Id.ToString());\r\n        //Assert updated role\r\n        roleDtoForUpdate.Should().BeEquivalentTo(updatedRole);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteRoleAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new role\r\n        var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n        await identityService.CreateRoleAsync(roleDto);\r\n        //Get new role\r\n        var role = await context.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n        roleDto.Id = role.Id;\r\n        var newRoleDto = await identityService.GetRoleAsync(roleDto.Id.ToString());\r\n        //Assert new role\r\n        roleDto.Should().BeEquivalentTo(newRoleDto);\r\n        //Remove role\r\n        await identityService.DeleteRoleAsync(newRoleDto);\r\n        //Try Get Removed role\r\n        var removeRole = await context.Roles.Where(x =\u003E x.Id == role.Id).SingleOrDefaultAsync();\r\n        //Assert removed role\r\n        removeRole.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddRoleClaimAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new role\r\n        var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n        await identityService.CreateRoleAsync(roleDto);\r\n        //Get new role\r\n        var role = await context.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n        roleDto.Id = role.Id;\r\n        var newRoleDto = await identityService.GetRoleAsync(roleDto.Id.ToString());\r\n        //Assert new role\r\n        roleDto.Should().BeEquivalentTo(newRoleDto);\r\n        //Generate random new role claim\r\n        var roleClaimDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRoleClaim(0, roleDto.Id);\r\n        await identityService.CreateRoleClaimsAsync(roleClaimDto);\r\n        //Get new role claim\r\n        var roleClaim = await context.RoleClaims.Where(x =\u003E x.ClaimType == roleClaimDto.ClaimType \u0026\u0026 x.ClaimValue == roleClaimDto.ClaimValue).SingleOrDefaultAsync();\r\n        roleClaimDto.ClaimId = roleClaim.Id;\r\n        var newRoleClaimDto = await identityService.GetRoleClaimAsync(roleDto.Id.ToString(), roleClaimDto.ClaimId);\r\n        //Assert new role\r\n        roleClaimDto.Should().BeEquivalentTo(newRoleClaimDto, options =\u003E options.Excluding(o =\u003E o.RoleName));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RemoveRoleClaimAsync",
        "Body": "{\r\n    using (var context = new AdminIdentityDbContext(_dbContextOptions))\r\n    {\r\n        var identityService = GetIdentityService(context);\r\n        //Generate random new role\r\n        var roleDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRole();\r\n        await identityService.CreateRoleAsync(roleDto);\r\n        //Get new role\r\n        var role = await context.Roles.Where(x =\u003E x.Name == roleDto.Name).SingleOrDefaultAsync();\r\n        roleDto.Id = role.Id;\r\n        var newRoleDto = await identityService.GetRoleAsync(roleDto.Id.ToString());\r\n        //Assert new role\r\n        roleDto.Should().BeEquivalentTo(newRoleDto);\r\n        //Generate random new role claim\r\n        var roleClaimDto = IdentityDtoMock\u003Cstring\u003E.GenerateRandomRoleClaim(0, roleDto.Id);\r\n        await identityService.CreateRoleClaimsAsync(roleClaimDto);\r\n        //Get new role claim\r\n        var roleClaim = await context.RoleClaims.Where(x =\u003E x.ClaimType == roleClaimDto.ClaimType \u0026\u0026 x.ClaimValue == roleClaimDto.ClaimValue).SingleOrDefaultAsync();\r\n        roleClaimDto.ClaimId = roleClaim.Id;\r\n        var newRoleClaimDto = await identityService.GetRoleClaimAsync(roleDto.Id.ToString(), roleClaimDto.ClaimId);\r\n        //Assert new role\r\n        roleClaimDto.Should().BeEquivalentTo(newRoleClaimDto, options =\u003E options.Excluding(o =\u003E o.RoleName));\r\n        await identityService.DeleteRoleClaimAsync(roleClaimDto);\r\n        var roleClaimToDelete = await context.RoleClaims.Where(x =\u003E x.ClaimType == roleClaimDto.ClaimType \u0026\u0026 x.ClaimValue == roleClaimDto.ClaimValue).SingleOrDefaultAsync();\r\n        //Assert removed role claim\r\n        roleClaimToDelete.Should().BeNull();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PersistedGrantServiceTests",
    "Message": null,
    "Methods": [
      {
        "Name": "GetPersistedGrantAsync",
        "Body": "{\r\n    using (var context = new IdentityServerPersistedGrantDbContext(_dbContextOptions, _operationalStore))\r\n    {\r\n        using (var identityDbContext = new AdminIdentityDbContext(_identityDbContextOptions))\r\n        {\r\n            var persistedGrantRepository = GetPersistedGrantRepository(identityDbContext, context);\r\n            var localizerMock = new Mock\u003CIPersistedGrantAspNetIdentityServiceResources\u003E();\r\n            var localizer = localizerMock.Object;\r\n            var auditLoggerMock = new Mock\u003CIAuditEventLogger\u003E();\r\n            var auditLogger = auditLoggerMock.Object;\r\n            var persistedGrantService = GetPersistedGrantService(persistedGrantRepository, localizer, auditLogger);\r\n            //Generate persisted grant\r\n            var persistedGrantKey = Guid.NewGuid().ToString();\r\n            var persistedGrant = PersistedGrantMock.GenerateRandomPersistedGrant(persistedGrantKey);\r\n            //Try add new persisted grant\r\n            await context.PersistedGrants.AddAsync(persistedGrant);\r\n            await context.SaveChangesAsync();\r\n            //Try get persisted grant\r\n            var persistedGrantAdded = await persistedGrantService.GetPersistedGrantAsync(persistedGrantKey);\r\n            //Assert\r\n            persistedGrant.Should().BeEquivalentTo(persistedGrantAdded, options =\u003E options.Excluding(x =\u003E x.SubjectName));\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeletePersistedGrantAsync",
        "Body": "{\r\n    using (var context = new IdentityServerPersistedGrantDbContext(_dbContextOptions, _operationalStore))\r\n    {\r\n        using (var identityDbContext = new AdminIdentityDbContext(_identityDbContextOptions))\r\n        {\r\n            var persistedGrantRepository = GetPersistedGrantRepository(identityDbContext, context);\r\n            var localizerMock = new Mock\u003CIPersistedGrantAspNetIdentityServiceResources\u003E();\r\n            var localizer = localizerMock.Object;\r\n            var auditLoggerMock = new Mock\u003CIAuditEventLogger\u003E();\r\n            var auditLogger = auditLoggerMock.Object;\r\n            var persistedGrantService = GetPersistedGrantService(persistedGrantRepository, localizer, auditLogger);\r\n            //Generate persisted grant\r\n            var persistedGrantKey = Guid.NewGuid().ToString();\r\n            var persistedGrant = PersistedGrantMock.GenerateRandomPersistedGrant(persistedGrantKey);\r\n            //Try add new persisted grant\r\n            await context.PersistedGrants.AddAsync(persistedGrant);\r\n            await context.SaveChangesAsync();\r\n            //Try delete persisted grant\r\n            await persistedGrantService.DeletePersistedGrantAsync(persistedGrantKey);\r\n            var grant = await persistedGrantRepository.GetPersistedGrantAsync(persistedGrantKey);\r\n            //Assert\r\n            grant.Should().BeNull();\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeletePersistedGrantsAsync",
        "Body": "{\r\n    using (var context = new IdentityServerPersistedGrantDbContext(_dbContextOptions, _operationalStore))\r\n    {\r\n        using (var identityDbContext = new AdminIdentityDbContext(_identityDbContextOptions))\r\n        {\r\n            var persistedGrantRepository = GetPersistedGrantRepository(identityDbContext, context);\r\n            var localizerMock = new Mock\u003CIPersistedGrantAspNetIdentityServiceResources\u003E();\r\n            var localizer = localizerMock.Object;\r\n            var auditLoggerMock = new Mock\u003CIAuditEventLogger\u003E();\r\n            var auditLogger = auditLoggerMock.Object;\r\n            var persistedGrantService = GetPersistedGrantService(persistedGrantRepository, localizer, auditLogger);\r\n            const int subjectId = 1;\r\n            for (var i = 0; i \u003C 4; i\u002B\u002B)\r\n            {\r\n                //Generate persisted grant\r\n                var persistedGrantKey = Guid.NewGuid().ToString();\r\n                var persistedGrant = PersistedGrantMock.GenerateRandomPersistedGrant(persistedGrantKey, subjectId.ToString());\r\n                //Try add new persisted grant\r\n                await context.PersistedGrants.AddAsync(persistedGrant);\r\n            }\r\n\r\n            await context.SaveChangesAsync();\r\n            //Try delete persisted grant\r\n            await persistedGrantService.DeletePersistedGrantsAsync(subjectId.ToString());\r\n            var grant = await persistedGrantRepository.GetPersistedGrantsByUserAsync(subjectId.ToString());\r\n            //Assert\r\n            grant.TotalCount.Should().Be(0);\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AccountControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "UserIsAbleToRegister",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Register new user\r\n    var registerFormData = UserMocks.GenerateRegisterData();\r\n    var registerResponse = await UserMocks.RegisterNewUserAsync(Client, registerFormData);\r\n    // Assert      \r\n    registerResponse.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    registerResponse.Headers.Location.ToString().Should().Be(\u0022/\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UserIsNotAbleToRegisterWithSameUserName",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Register new user\r\n    var registerFormData = UserMocks.GenerateRegisterData();\r\n    var registerResponseFirst = await UserMocks.RegisterNewUserAsync(Client, registerFormData);\r\n    // Assert      \r\n    registerResponseFirst.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    registerResponseFirst.Headers.Location.ToString().Should().Be(\u0022/\u0022);\r\n    var registerResponseSecond = await UserMocks.RegisterNewUserAsync(Client, registerFormData);\r\n    // Assert response\r\n    registerResponseSecond.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    // Get html content\r\n    var contentWithErrorMessage = await registerResponseSecond.Content.ReadAsStringAsync();\r\n    // From String\r\n    var doc = new HtmlDocument();\r\n    doc.LoadHtml(contentWithErrorMessage);\r\n    // Get error messages from validation summary\r\n    var errorNodes = doc.DocumentNode.SelectNodes(\u0022//div[contains(@class, \u0027validation-summary-errors\u0027)]/ul/li\u0022);\r\n    errorNodes.Should().HaveCount(2);\r\n    // Build expected error messages\r\n    var expectedErrorMessages = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022Username \u0026#x27;{registerFormData[\u0022UserName\u0022]}\u0026#x27; is already taken.\u0022,\r\n        $\u0022Email \u0026#x27;{registerFormData[\u0022Email\u0022]}\u0026#x27; is already taken.\u0022};\r\n    // Assert\r\n    var containErrors = errorNodes.Select(x =\u003E x.InnerText).ToList().SequenceEqual(expectedErrorMessages);\r\n    containErrors.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UserIsAbleToLogin",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Register new user\r\n    var registerFormData = UserMocks.GenerateRegisterData();\r\n    await UserMocks.RegisterNewUserAsync(Client, registerFormData);\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Prepare request to login\r\n    const string accountLoginAction = \u0022/Account/Login\u0022;\r\n    var loginResponse = await Client.GetAsync(accountLoginAction);\r\n    var antiForgeryToken = await loginResponse.ExtractAntiForgeryToken();\r\n    var loginDataForm = UserMocks.GenerateLoginData(registerFormData[\u0022UserName\u0022], registerFormData[\u0022Password\u0022], antiForgeryToken);\r\n    // Login\r\n    var requestMessage = RequestHelper.CreatePostRequestWithCookies(accountLoginAction, loginDataForm, loginResponse);\r\n    var responseMessage = await Client.SendAsync(requestMessage);\r\n    // Assert status code    \r\n    responseMessage.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    // Assert redirect location\r\n    responseMessage.Headers.Location.ToString().Should().Be(\u0022/\u0022);\r\n    // Check if response contain cookie with Identity\r\n    const string identityCookieName = \u0022.AspNetCore.Identity.Application\u0022;\r\n    var existsCookie = CookiesHelper.ExistsCookie(responseMessage, identityCookieName);\r\n    // Assert Identity cookie\r\n    existsCookie.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UserIsNotAbleToLoginWithIncorrectPassword",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Register new user\r\n    var registerFormData = UserMocks.GenerateRegisterData();\r\n    await UserMocks.RegisterNewUserAsync(Client, registerFormData);\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Prepare request to login\r\n    const string accountLoginAction = \u0022/Account/Login\u0022;\r\n    var loginResponse = await Client.GetAsync(accountLoginAction);\r\n    var antiForgeryToken = await loginResponse.ExtractAntiForgeryToken();\r\n    // User Guid like fake password\r\n    var loginDataForm = UserMocks.GenerateLoginData(registerFormData[\u0022UserName\u0022], Guid.NewGuid().ToString(), antiForgeryToken);\r\n    // Login\r\n    var requestMessage = RequestHelper.CreatePostRequestWithCookies(accountLoginAction, loginDataForm, loginResponse);\r\n    var responseMessage = await Client.SendAsync(requestMessage);\r\n    // Get html content\r\n    var contentWithErrorMessage = await responseMessage.Content.ReadAsStringAsync();\r\n    // Assert status code    \r\n    responseMessage.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    // From String\r\n    var doc = new HtmlDocument();\r\n    doc.LoadHtml(contentWithErrorMessage);\r\n    // Get error messages from validation summary\r\n    var errorNodes = doc.DocumentNode.SelectNodes(\u0022//div[contains(@class, \u0027validation-summary-errors\u0027)]/ul/li\u0022);\r\n    errorNodes.Should().HaveCount(1);\r\n    // Build expected error messages\r\n    var expectedErrorMessages = new List\u003Cstring\u003E\r\n    {\r\n        \u0022Invalid username or password\u0022\r\n    };\r\n    // Assert\r\n    var containErrors = errorNodes.Select(x =\u003E x.InnerText).ToList().SequenceEqual(expectedErrorMessages);\r\n    containErrors.Should().BeTrue();\r\n    // Check if response contain cookie with Identity\r\n    const string identityCookieName = \u0022.AspNetCore.Identity.Application\u0022;\r\n    var existsCookie = CookiesHelper.ExistsCookie(responseMessage, identityCookieName);\r\n    // Assert Identity cookie\r\n    existsCookie.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DiagnosticsControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "UnAuthorizeUserCannotAccessDiagnosticsView",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/Diagnostics/Index\u0022);\r\n    // Assert      \r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(\u0022Account/Login\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GrantsControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AuthorizeUserCanAccessGrantsView",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Register new user\r\n    var registerFormData = UserMocks.GenerateRegisterData();\r\n    var registerResponse = await UserMocks.RegisterNewUserAsync(Client, registerFormData);\r\n    // Get cookie with user identity for next request\r\n    Client.PutCookiesOnRequest(registerResponse);\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/Grants/Index\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnAuthorizeUserCannotAccessGrantsView",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/Grants/Index\u0022);\r\n    // Assert      \r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(\u0022Account/Login\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HomeControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "EveryoneHasAccessToHomepage",
        "Body": "{\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Act\r\n    var response = await Client.GetAsync(\u0022/home/index\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IdentityServerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "CanShowDiscoveryEndpoint",
        "Body": "{\r\n    var disco = await Client.GetDiscoveryDocumentAsync(\u0022http://localhost\u0022);\r\n    disco.Should().NotBeNull();\r\n    disco.IsError.Should().Be(false);\r\n    disco.KeySet.Keys.Count.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ManageControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AuthorizeUserCanAccessManageViews",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Register new user\r\n    var registerFormData = UserMocks.GenerateRegisterData();\r\n    var registerResponse = await UserMocks.RegisterNewUserAsync(Client, registerFormData);\r\n    // Get cookie with user identity for next request\r\n    Client.PutCookiesOnRequest(registerResponse);\r\n    foreach (var route in RoutesConstants.GetManageRoutes())\r\n    {\r\n        // Act\r\n        var response = await Client.GetAsync($\u0022/Manage/{route}\u0022);\r\n        // Assert\r\n        response.EnsureSuccessStatusCode();\r\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnAuthorizeUserCannotAccessManageViews",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    foreach (var route in RoutesConstants.GetManageRoutes())\r\n    {\r\n        // Act\r\n        var response = await Client.GetAsync($\u0022/Manage/{route}\u0022);\r\n        // Assert      \r\n        response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n        //The redirect to login\r\n        response.Headers.Location.ToString().Should().Contain(\u0022Account/Login\u0022);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UserIsAbleToUpdateProfile",
        "Body": "{\r\n    // Clear headers\r\n    Client.DefaultRequestHeaders.Clear();\r\n    // Register new user\r\n    var registerFormData = UserMocks.GenerateRegisterData();\r\n    var registerResponse = await UserMocks.RegisterNewUserAsync(Client, registerFormData);\r\n    // Get cookie with user identity for next request\r\n    Client.PutCookiesOnRequest(registerResponse);\r\n    // Prepare request to update profile\r\n    const string manageAction = \u0022/Manage/Index\u0022;\r\n    var manageResponse = await Client.GetAsync(manageAction);\r\n    var antiForgeryToken = await manageResponse.ExtractAntiForgeryToken();\r\n    var manageProfileData = UserMocks.GenerateManageProfileData(registerFormData[\u0022Email\u0022], antiForgeryToken);\r\n    // Update profile\r\n    var requestWithAntiForgeryCookie = RequestHelper.CreatePostRequestWithCookies(manageAction, manageProfileData, manageResponse);\r\n    var requestWithIdentityCookie = CookiesHelper.CopyCookiesFromResponse(requestWithAntiForgeryCookie, registerResponse);\r\n    var responseMessage = await Client.SendAsync(requestWithIdentityCookie);\r\n    // Assert      \r\n    responseMessage.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    responseMessage.Headers.Location.ToString().Should().Be(\u0022/Manage\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ApiResourcesControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "GetApiResourcesAsAdmin",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    var response = await Client.GetAsync(\u0022api/apiresources\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetApiResourcesWithoutPermissions",
        "Body": "{\r\n    Client.DefaultRequestHeaders.Clear();\r\n    var response = await Client.GetAsync(\u0022api/apiresources\u0022);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClientsControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "GetClientsAsAdmin",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    var response = await Client.GetAsync(\u0022api/clients\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetClientsWithoutPermissions",
        "Body": "{\r\n    Client.DefaultRequestHeaders.Clear();\r\n    var response = await Client.GetAsync(\u0022api/clients\u0022);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IdentityResourcesControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "GetIdentityResourcesAsAdmin",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    var response = await Client.GetAsync(\u0022api/identityresources\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIdentityResourcesWithoutPermissions",
        "Body": "{\r\n    Client.DefaultRequestHeaders.Clear();\r\n    var response = await Client.GetAsync(\u0022api/identityresources\u0022);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RolesControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "GetRolesAsAdmin",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    var response = await Client.GetAsync(\u0022api/roles\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetRolesWithoutPermissions",
        "Body": "{\r\n    Client.DefaultRequestHeaders.Clear();\r\n    var response = await Client.GetAsync(\u0022api/roles\u0022);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UsersControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "GetRolesAsAdmin",
        "Body": "{\r\n    SetupAdminClaimsViaHeaders();\r\n    var response = await Client.GetAsync(\u0022api/users\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetRolesWithoutPermissions",
        "Body": "{\r\n    Client.DefaultRequestHeaders.Clear();\r\n    var response = await Client.GetAsync(\u0022api/users\u0022);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.Redirect);\r\n    //The redirect to login\r\n    response.Headers.Location.ToString().Should().Contain(AuthenticationConsts.AccountLoginPage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]