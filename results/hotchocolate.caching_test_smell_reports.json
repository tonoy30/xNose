[
  {
    "Name": "ObjectQuery",
    "Message": null,
    "Methods": [
      {
        "Name": "CreateCacheControlDirective",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var directive = schema.DirectiveTypes.OfType\u003CCacheControlDirectiveType\u003E().FirstOrDefault()!;\r\n    Assert.NotNull(directive);\r\n    Assert.IsType\u003CCacheControlDirectiveType\u003E(directive);\r\n    Assert.Equal(\u0022cacheControl\u0022, directive.Name);\r\n    Assert.Collection(directive.Arguments, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022maxAge\u0022, t.Name);\r\n        Assert.IsType\u003CIntType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022scope\u0022, t.Name);\r\n        Assert.IsType\u003CCacheControlScopeType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022inheritMaxAge\u0022, t.Name);\r\n        Assert.IsType\u003CBooleanType\u003E(t.Type);\r\n    });\r\n    Assert.Collection(directive.Locations.AsEnumerable(), t =\u003E Assert.Equal(Types.DirectiveLocation.Object, t), t =\u003E Assert.Equal(Types.DirectiveLocation.FieldDefinition, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Interface, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Union, t));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirective_Cannot_Be_Applied_Multiple_Times",
        "Body": "{\r\n    var builder = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500).CacheControl(1000)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _);\r\n    var act = () =\u003E builder.Create();\r\n    var expectedException = Assert.Throws\u003CSchemaException\u003E(act);\r\n    expectedException.Message.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500, CacheControlScope.Private, true)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddInterfaceType(d =\u003E d.Name(\u0022InterfaceType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddUnionType(d =\u003E d.Name(\u0022UnionType\u0022).CacheControl(500, CacheControlScope.Private).Type(new NamedTypeNode(\u0022ObjectType\u0022))).AddObjectType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: UnionType\n            }\n\n            union UnionType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) = ObjectType\n\n            type ObjectType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CUnionQuery\u003E().AddType\u003CUnionObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "InterfaceObjectType",
    "Message": null,
    "Methods": [
      {
        "Name": "CreateCacheControlDirective",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var directive = schema.DirectiveTypes.OfType\u003CCacheControlDirectiveType\u003E().FirstOrDefault()!;\r\n    Assert.NotNull(directive);\r\n    Assert.IsType\u003CCacheControlDirectiveType\u003E(directive);\r\n    Assert.Equal(\u0022cacheControl\u0022, directive.Name);\r\n    Assert.Collection(directive.Arguments, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022maxAge\u0022, t.Name);\r\n        Assert.IsType\u003CIntType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022scope\u0022, t.Name);\r\n        Assert.IsType\u003CCacheControlScopeType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022inheritMaxAge\u0022, t.Name);\r\n        Assert.IsType\u003CBooleanType\u003E(t.Type);\r\n    });\r\n    Assert.Collection(directive.Locations.AsEnumerable(), t =\u003E Assert.Equal(Types.DirectiveLocation.Object, t), t =\u003E Assert.Equal(Types.DirectiveLocation.FieldDefinition, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Interface, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Union, t));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirective_Cannot_Be_Applied_Multiple_Times",
        "Body": "{\r\n    var builder = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500).CacheControl(1000)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _);\r\n    var act = () =\u003E builder.Create();\r\n    var expectedException = Assert.Throws\u003CSchemaException\u003E(act);\r\n    expectedException.Message.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500, CacheControlScope.Private, true)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddInterfaceType(d =\u003E d.Name(\u0022InterfaceType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddUnionType(d =\u003E d.Name(\u0022UnionType\u0022).CacheControl(500, CacheControlScope.Private).Type(new NamedTypeNode(\u0022ObjectType\u0022))).AddObjectType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: UnionType\n            }\n\n            union UnionType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) = ObjectType\n\n            type ObjectType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CUnionQuery\u003E().AddType\u003CUnionObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "InterfaceQuery",
    "Message": null,
    "Methods": [
      {
        "Name": "CreateCacheControlDirective",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var directive = schema.DirectiveTypes.OfType\u003CCacheControlDirectiveType\u003E().FirstOrDefault()!;\r\n    Assert.NotNull(directive);\r\n    Assert.IsType\u003CCacheControlDirectiveType\u003E(directive);\r\n    Assert.Equal(\u0022cacheControl\u0022, directive.Name);\r\n    Assert.Collection(directive.Arguments, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022maxAge\u0022, t.Name);\r\n        Assert.IsType\u003CIntType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022scope\u0022, t.Name);\r\n        Assert.IsType\u003CCacheControlScopeType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022inheritMaxAge\u0022, t.Name);\r\n        Assert.IsType\u003CBooleanType\u003E(t.Type);\r\n    });\r\n    Assert.Collection(directive.Locations.AsEnumerable(), t =\u003E Assert.Equal(Types.DirectiveLocation.Object, t), t =\u003E Assert.Equal(Types.DirectiveLocation.FieldDefinition, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Interface, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Union, t));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirective_Cannot_Be_Applied_Multiple_Times",
        "Body": "{\r\n    var builder = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500).CacheControl(1000)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _);\r\n    var act = () =\u003E builder.Create();\r\n    var expectedException = Assert.Throws\u003CSchemaException\u003E(act);\r\n    expectedException.Message.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500, CacheControlScope.Private, true)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddInterfaceType(d =\u003E d.Name(\u0022InterfaceType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddUnionType(d =\u003E d.Name(\u0022UnionType\u0022).CacheControl(500, CacheControlScope.Private).Type(new NamedTypeNode(\u0022ObjectType\u0022))).AddObjectType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: UnionType\n            }\n\n            union UnionType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) = ObjectType\n\n            type ObjectType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CUnionQuery\u003E().AddType\u003CUnionObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UnionObjectType",
    "Message": null,
    "Methods": [
      {
        "Name": "CreateCacheControlDirective",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var directive = schema.DirectiveTypes.OfType\u003CCacheControlDirectiveType\u003E().FirstOrDefault()!;\r\n    Assert.NotNull(directive);\r\n    Assert.IsType\u003CCacheControlDirectiveType\u003E(directive);\r\n    Assert.Equal(\u0022cacheControl\u0022, directive.Name);\r\n    Assert.Collection(directive.Arguments, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022maxAge\u0022, t.Name);\r\n        Assert.IsType\u003CIntType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022scope\u0022, t.Name);\r\n        Assert.IsType\u003CCacheControlScopeType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022inheritMaxAge\u0022, t.Name);\r\n        Assert.IsType\u003CBooleanType\u003E(t.Type);\r\n    });\r\n    Assert.Collection(directive.Locations.AsEnumerable(), t =\u003E Assert.Equal(Types.DirectiveLocation.Object, t), t =\u003E Assert.Equal(Types.DirectiveLocation.FieldDefinition, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Interface, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Union, t));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirective_Cannot_Be_Applied_Multiple_Times",
        "Body": "{\r\n    var builder = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500).CacheControl(1000)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _);\r\n    var act = () =\u003E builder.Create();\r\n    var expectedException = Assert.Throws\u003CSchemaException\u003E(act);\r\n    expectedException.Message.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500, CacheControlScope.Private, true)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddInterfaceType(d =\u003E d.Name(\u0022InterfaceType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddUnionType(d =\u003E d.Name(\u0022UnionType\u0022).CacheControl(500, CacheControlScope.Private).Type(new NamedTypeNode(\u0022ObjectType\u0022))).AddObjectType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: UnionType\n            }\n\n            union UnionType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) = ObjectType\n\n            type ObjectType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CUnionQuery\u003E().AddType\u003CUnionObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UnionQuery",
    "Message": null,
    "Methods": [
      {
        "Name": "CreateCacheControlDirective",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var directive = schema.DirectiveTypes.OfType\u003CCacheControlDirectiveType\u003E().FirstOrDefault()!;\r\n    Assert.NotNull(directive);\r\n    Assert.IsType\u003CCacheControlDirectiveType\u003E(directive);\r\n    Assert.Equal(\u0022cacheControl\u0022, directive.Name);\r\n    Assert.Collection(directive.Arguments, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022maxAge\u0022, t.Name);\r\n        Assert.IsType\u003CIntType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022scope\u0022, t.Name);\r\n        Assert.IsType\u003CCacheControlScopeType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022inheritMaxAge\u0022, t.Name);\r\n        Assert.IsType\u003CBooleanType\u003E(t.Type);\r\n    });\r\n    Assert.Collection(directive.Locations.AsEnumerable(), t =\u003E Assert.Equal(Types.DirectiveLocation.Object, t), t =\u003E Assert.Equal(Types.DirectiveLocation.FieldDefinition, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Interface, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Union, t));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirective_Cannot_Be_Applied_Multiple_Times",
        "Body": "{\r\n    var builder = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500).CacheControl(1000)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _);\r\n    var act = () =\u003E builder.Create();\r\n    var expectedException = Assert.Throws\u003CSchemaException\u003E(act);\r\n    expectedException.Message.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500, CacheControlScope.Private, true)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddInterfaceType(d =\u003E d.Name(\u0022InterfaceType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddUnionType(d =\u003E d.Name(\u0022UnionType\u0022).CacheControl(500, CacheControlScope.Private).Type(new NamedTypeNode(\u0022ObjectType\u0022))).AddObjectType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: UnionType\n            }\n\n            union UnionType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) = ObjectType\n\n            type ObjectType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CUnionQuery\u003E().AddType\u003CUnionObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CacheControlDirectiveTypeTests",
    "Message": null,
    "Methods": [
      {
        "Name": "CreateCacheControlDirective",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var directive = schema.DirectiveTypes.OfType\u003CCacheControlDirectiveType\u003E().FirstOrDefault()!;\r\n    Assert.NotNull(directive);\r\n    Assert.IsType\u003CCacheControlDirectiveType\u003E(directive);\r\n    Assert.Equal(\u0022cacheControl\u0022, directive.Name);\r\n    Assert.Collection(directive.Arguments, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022maxAge\u0022, t.Name);\r\n        Assert.IsType\u003CIntType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022scope\u0022, t.Name);\r\n        Assert.IsType\u003CCacheControlScopeType\u003E(t.Type);\r\n    }, t =\u003E\r\n    {\r\n        Assert.Equal(\u0022inheritMaxAge\u0022, t.Name);\r\n        Assert.IsType\u003CBooleanType\u003E(t.Type);\r\n    });\r\n    Assert.Collection(directive.Locations.AsEnumerable(), t =\u003E Assert.Equal(Types.DirectiveLocation.Object, t), t =\u003E Assert.Equal(Types.DirectiveLocation.FieldDefinition, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Interface, t), t =\u003E Assert.Equal(Types.DirectiveLocation.Union, t));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirective_Cannot_Be_Applied_Multiple_Times",
        "Body": "{\r\n    var builder = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500).CacheControl(1000)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _);\r\n    var act = () =\u003E builder.Create();\r\n    var expectedException = Assert.Throws\u003CSchemaException\u003E(act);\r\n    expectedException.Message.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E().CacheControl(500, CacheControlScope.Private, true)).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022ObjectType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: ObjectType\n            }\n\n            type ObjectType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_ObjectType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CObjectQuery\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CObjectType\u003E(\u0022ObjectType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType {\n                field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Fields[\u0022field\u0022].Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceField_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddInterfaceType(d =\u003E d.Name(\u0022InterfaceType\u0022).CacheControl(500, CacheControlScope.Private).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: InterfaceType\n            }\n\n            interface InterfaceType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {\n                field: String\n            }\n\n            type ObjectType implements InterfaceType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_InterfaceType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CInterfaceQuery\u003E().AddType\u003CInterfaceObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CInterfaceType\u003E(\u0022InterfaceType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_CodeFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddUnionType(d =\u003E d.Name(\u0022UnionType\u0022).CacheControl(500, CacheControlScope.Private).Type(new NamedTypeNode(\u0022ObjectType\u0022))).AddObjectType(d =\u003E d.Name(\u0022ObjectType\u0022).Field(\u0022field\u0022).Type\u003CStringType\u003E()).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_SchemaFirst",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddDocumentFromString(@\u0022\n            type Query {\n                field: UnionType\n            }\n\n            union UnionType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) = ObjectType\n\n            type ObjectType {\n                field: String\n            }\n            \u0022).AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Equal(true, obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlDirectiveType_UnionType_Annotation",
        "Body": "{\r\n    var schema = SchemaBuilder.New().AddQueryType\u003CUnionQuery\u003E().AddType\u003CUnionObjectType\u003E().AddDirectiveType\u003CCacheControlDirectiveType\u003E().Use(_ =\u003E _).Create();\r\n    var type = schema.GetType\u003CUnionType\u003E(\u0022UnionType\u0022);\r\n    var directive = type.Directives.Single(d =\u003E d.Type.Name == \u0022cacheControl\u0022);\r\n    var obj = directive.AsValue\u003CCacheControlDirective\u003E();\r\n    Assert.Equal(500, obj.MaxAge);\r\n    Assert.Equal(CacheControlScope.Private, obj.Scope);\r\n    Assert.Null(obj.InheritMaxAge);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Query",
    "Message": null,
    "Methods": [
      {
        "Name": "QueryFields_ApplyDefaults",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_ApplyDefaults_DifferentDefaultMaxAge",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.DefaultMaxAge = 100).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_ApplyDefaults_False",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_CacheControl_Disabled",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.Enable = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults_DifferentDefaultMaxAge",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.DefaultMaxAge = 100).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults_False",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_CacheControl_Disabled",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.Enable = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NegativeMaxAge",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: String @cacheControl(maxAge: -10)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAgeAndInheritMaxAgeOnSameField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: NestedType\n                }\n\n                type NestedType {\n                    field: String @cacheControl(maxAge: 10 inheritMaxAge: true)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlOnInterfaceField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: Interface!\n                }\n\n                interface Interface {\n                    field: String @cacheControl(maxAge: 10)\n                }\n\n                type Object implements Interface {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnObjectType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: ObjectType\n                }\n\n                type ObjectType @cacheControl(inheritMaxAge: true) {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnInterfaceType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: InterfaceType\n                }\n\n                type InterfaceType @cacheControl(inheritMaxAge: true) {\n                    field: String\n                }\n\n                type ObjectType {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnUnionType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: UnionType\n                }\n\n                union UnionType @cacheControl(inheritMaxAge: true) = ObjectType\n\n                type ObjectType {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnQueryTypeField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: String @cacheControl(inheritMaxAge: true)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "NestedType",
    "Message": null,
    "Methods": [
      {
        "Name": "QueryFields_ApplyDefaults",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_ApplyDefaults_DifferentDefaultMaxAge",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.DefaultMaxAge = 100).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_ApplyDefaults_False",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_CacheControl_Disabled",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.Enable = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults_DifferentDefaultMaxAge",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.DefaultMaxAge = 100).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults_False",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_CacheControl_Disabled",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.Enable = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NegativeMaxAge",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: String @cacheControl(maxAge: -10)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAgeAndInheritMaxAgeOnSameField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: NestedType\n                }\n\n                type NestedType {\n                    field: String @cacheControl(maxAge: 10 inheritMaxAge: true)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlOnInterfaceField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: Interface!\n                }\n\n                interface Interface {\n                    field: String @cacheControl(maxAge: 10)\n                }\n\n                type Object implements Interface {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnObjectType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: ObjectType\n                }\n\n                type ObjectType @cacheControl(inheritMaxAge: true) {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnInterfaceType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: InterfaceType\n                }\n\n                type InterfaceType @cacheControl(inheritMaxAge: true) {\n                    field: String\n                }\n\n                type ObjectType {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnUnionType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: UnionType\n                }\n\n                union UnionType @cacheControl(inheritMaxAge: true) = ObjectType\n\n                type ObjectType {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnQueryTypeField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: String @cacheControl(inheritMaxAge: true)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "NestedType2",
    "Message": null,
    "Methods": [
      {
        "Name": "QueryFields_ApplyDefaults",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_ApplyDefaults_DifferentDefaultMaxAge",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.DefaultMaxAge = 100).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_ApplyDefaults_False",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_CacheControl_Disabled",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.Enable = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults_DifferentDefaultMaxAge",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.DefaultMaxAge = 100).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults_False",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_CacheControl_Disabled",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.Enable = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NegativeMaxAge",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: String @cacheControl(maxAge: -10)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAgeAndInheritMaxAgeOnSameField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: NestedType\n                }\n\n                type NestedType {\n                    field: String @cacheControl(maxAge: 10 inheritMaxAge: true)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlOnInterfaceField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: Interface!\n                }\n\n                interface Interface {\n                    field: String @cacheControl(maxAge: 10)\n                }\n\n                type Object implements Interface {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnObjectType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: ObjectType\n                }\n\n                type ObjectType @cacheControl(inheritMaxAge: true) {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnInterfaceType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: InterfaceType\n                }\n\n                type InterfaceType @cacheControl(inheritMaxAge: true) {\n                    field: String\n                }\n\n                type ObjectType {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnUnionType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: UnionType\n                }\n\n                union UnionType @cacheControl(inheritMaxAge: true) = ObjectType\n\n                type ObjectType {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnQueryTypeField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: String @cacheControl(inheritMaxAge: true)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CacheControlTypeInterceptorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "QueryFields_ApplyDefaults",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_ApplyDefaults_DifferentDefaultMaxAge",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.DefaultMaxAge = 100).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_ApplyDefaults_False",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryFields_CacheControl_Disabled",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddDocumentFromString(@\u0022\n                type Query {\n                    field1: String\n                    field2: String @cacheControl(maxAge: 200)\n                }\n            \u0022).UseField(_ =\u003E _).AddCacheControl().ModifyCacheControlOptions(o =\u003E o.Enable = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults_DifferentDefaultMaxAge",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.DefaultMaxAge = 100).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_ApplyDefaults_False",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DataResolvers_CacheControl_Disabled",
        "Body": "{\r\n    await new ServiceCollection().AddGraphQL().AddQueryType\u003CQuery\u003E().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.Enable = false).BuildSchemaAsync().MatchSnapshotAsync();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NegativeMaxAge",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: String @cacheControl(maxAge: -10)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAgeAndInheritMaxAgeOnSameField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: NestedType\n                }\n\n                type NestedType {\n                    field: String @cacheControl(maxAge: 10 inheritMaxAge: true)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CacheControlOnInterfaceField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: Interface!\n                }\n\n                interface Interface {\n                    field: String @cacheControl(maxAge: 10)\n                }\n\n                type Object implements Interface {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnObjectType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: ObjectType\n                }\n\n                type ObjectType @cacheControl(inheritMaxAge: true) {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnInterfaceType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: InterfaceType\n                }\n\n                type InterfaceType @cacheControl(inheritMaxAge: true) {\n                    field: String\n                }\n\n                type ObjectType {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnUnionType",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: UnionType\n                }\n\n                union UnionType @cacheControl(inheritMaxAge: true) = ObjectType\n\n                type ObjectType {\n                    field: String\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InheritMaxAgeOnQueryTypeField",
        "Body": "{\r\n    ExpectErrors(builder =\u003E builder.AddDocumentFromString(@\u0022\n                type Query {\n                    field: String @cacheControl(inheritMaxAge: true)\n                }\n            \u0022).Use(_ =\u003E _ =\u003E default).AddCacheControl());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpCachingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "MaxAge_NonZero_Should_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(2000));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAge_Zero_Should_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(0));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JustScope_Should_Not_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(scope: CacheControlScope.Private));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAgeAndScope_Should_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(2000, CacheControlScope.Private));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GraphQLResult",
    "Message": null,
    "Methods": [
      {
        "Name": "MaxAge_NonZero_Should_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(2000));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAge_Zero_Should_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(0));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JustScope_Should_Not_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(scope: CacheControlScope.Private));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAgeAndScope_Should_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(2000, CacheControlScope.Private));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestServerExtensions",
    "Message": null,
    "Methods": [
      {
        "Name": "MaxAge_NonZero_Should_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(2000));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAge_Zero_Should_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(0));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JustScope_Should_Not_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(scope: CacheControlScope.Private));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MaxAgeAndScope_Should_Cache",
        "Body": "{\r\n    var server = CreateServer(services =\u003E\r\n    {\r\n        services.AddGraphQLServer().UseQueryCachePipeline().AddCacheControl().ModifyCacheControlOptions(o =\u003E o.ApplyDefaults = false).AddQueryType(d =\u003E d.Name(\u0022Query\u0022).Field(\u0022field\u0022).Resolve(\u0022\u0022).CacheControl(2000, CacheControlScope.Private));\r\n    });\r\n    var client = server.CreateClient();\r\n    var result = await client.PostQueryAsync(\u0022{ field }\u0022);\r\n    result.MatchSnapshot();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Query",
    "Message": null,
    "Methods": [
      {
        "Name": "Allow_CacheControl_On_FieldDefinition",
        "Body": "{\r\n    var schema = await new ServiceCollection().AddGraphQLServer().AddTypeExtension(typeof(Query)).ConfigureSchema(b =\u003E b.TryAddRootType(() =\u003E new ObjectType(d =\u003E d.Name(OperationTypeNames.Query)), Language.OperationType.Query)).AddCacheControl().BuildSchemaAsync();\r\n    schema.MatchInlineSnapshot(\u0022\u0022\u0022\n            schema {\n              query: Query\n            }\n\n            type Book {\n              title: String! @cacheControl(maxAge: 5000)\n              description: String!\n            }\n\n            type Query {\n              book: Book! @cacheControl(maxAge: 0)\n            }\n\n            \u0022The scope of a cache hint.\u0022\n            enum CacheControlScope {\n              \u0022The value to cache is not tied to a single user.\u0022\n              PUBLIC\n              \u0022The value to cache is specific to a single user.\u0022\n              PRIVATE\n            }\n\n            \u0022The \u0060@cacheControl\u0060 directive may be provided for individual fields or entire object, interface or union types to provide caching hints to the executor.\u0022\n            directive @cacheControl(\u0022The maximum amount of time this field\u0027s cached value is valid, in seconds.\u0022 maxAge: Int \u0022If \u0060PRIVATE\u0060, the field\u0027s value is specific to a single user. The default value is \u0060PUBLIC\u0060, which means the field\u0027s value is not tied to a single user.\u0022 scope: CacheControlScope \u0022If \u0060true\u0060, the field inherits the \u0060maxAge\u0060 of its parent field.\u0022 inheritMaxAge: Boolean) on OBJECT | FIELD_DEFINITION | INTERFACE | UNION\n            \u0022\u0022\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SchemaTests",
    "Message": null,
    "Methods": [
      {
        "Name": "Allow_CacheControl_On_FieldDefinition",
        "Body": "{\r\n    var schema = await new ServiceCollection().AddGraphQLServer().AddTypeExtension(typeof(Query)).ConfigureSchema(b =\u003E b.TryAddRootType(() =\u003E new ObjectType(d =\u003E d.Name(OperationTypeNames.Query)), Language.OperationType.Query)).AddCacheControl().BuildSchemaAsync();\r\n    schema.MatchInlineSnapshot(\u0022\u0022\u0022\n            schema {\n              query: Query\n            }\n\n            type Book {\n              title: String! @cacheControl(maxAge: 5000)\n              description: String!\n            }\n\n            type Query {\n              book: Book! @cacheControl(maxAge: 0)\n            }\n\n            \u0022The scope of a cache hint.\u0022\n            enum CacheControlScope {\n              \u0022The value to cache is not tied to a single user.\u0022\n              PUBLIC\n              \u0022The value to cache is specific to a single user.\u0022\n              PRIVATE\n            }\n\n            \u0022The \u0060@cacheControl\u0060 directive may be provided for individual fields or entire object, interface or union types to provide caching hints to the executor.\u0022\n            directive @cacheControl(\u0022The maximum amount of time this field\u0027s cached value is valid, in seconds.\u0022 maxAge: Int \u0022If \u0060PRIVATE\u0060, the field\u0027s value is specific to a single user. The default value is \u0060PUBLIC\u0060, which means the field\u0027s value is not tied to a single user.\u0022 scope: CacheControlScope \u0022If \u0060true\u0060, the field inherits the \u0060maxAge\u0060 of its parent field.\u0022 inheritMaxAge: Boolean) on OBJECT | FIELD_DEFINITION | INTERFACE | UNION\n            \u0022\u0022\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]