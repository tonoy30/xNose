[
  {
    "Name": "OcelotAdministrationBuilderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_set_up_administration_with_identity_server_options",
        "Body": "{\r\n    Action\u003CJwtBearerOptions\u003E options = o =\u003E\r\n    {\r\n    };\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E WhenISetUpAdministration(options)).Then(x =\u003E ThenAnExceptionIsntThrown()).Then(x =\u003E ThenTheCorrectAdminPathIsRegitered()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_up_administration",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E WhenISetUpAdministration()).Then(x =\u003E ThenAnExceptionIsntThrown()).Then(x =\u003E ThenTheCorrectAdminPathIsRegitered()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AuthenticationMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_next_middleware_if_route_is_not_authenticated",
        "Body": "{\r\n    this.Given(x =\u003E GivenTheDownStreamRouteIs(new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build())).And(x =\u003E GivenTheTestServerPipelineIsConfigured()).When(x =\u003E WhenICallTheMiddleware()).Then(x =\u003E ThenTheUserIsAuthenticated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_next_middleware_if_route_is_using_options_method",
        "Body": "{\r\n    this.Given(x =\u003E GivenTheDownStreamRouteIs(new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Options\u0022 }).WithIsAuthenticated(true).Build())).And(x =\u003E GivenTheRequestIsUsingOptionsMethod()).When(x =\u003E WhenICallTheMiddleware()).Then(x =\u003E ThenTheUserIsAuthenticated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StreamExtensions",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_next_middleware_if_route_is_not_authenticated",
        "Body": "{\r\n    this.Given(x =\u003E GivenTheDownStreamRouteIs(new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build())).And(x =\u003E GivenTheTestServerPipelineIsConfigured()).When(x =\u003E WhenICallTheMiddleware()).Then(x =\u003E ThenTheUserIsAuthenticated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_next_middleware_if_route_is_using_options_method",
        "Body": "{\r\n    this.Given(x =\u003E GivenTheDownStreamRouteIs(new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Options\u0022 }).WithIsAuthenticated(true).Build())).And(x =\u003E GivenTheRequestIsUsingOptionsMethod()).When(x =\u003E WhenICallTheMiddleware()).Then(x =\u003E ThenTheUserIsAuthenticated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AuthorizationMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_authorization_service",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(new List\u003CPlaceholderNameAndValue\u003E(), new DownstreamRouteBuilder().WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().Build()).WithIsAuthorized(true).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build())).And(x =\u003E x.GivenTheAuthServiceReturns(new OkResponse\u003Cbool\u003E(true))).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheAuthServiceIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimsAuthorizerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_authorize_user",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimsPrincipal(new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(\u0022UserType\u0022, \u0022registered\u0022), })))).And(x =\u003E x.GivenARouteClaimsRequirement(new Dictionary\u003Cstring, string\u003E { { \u0022UserType\u0022, \u0022registered\u0022 } })).When(x =\u003E x.WhenICallTheAuthorizer()).Then(x =\u003E x.ThenTheUserIsAuthorized()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_authorize_dynamic_user",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimsPrincipal(new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(\u0022userid\u0022, \u002214\u0022), })))).And(x =\u003E x.GivenARouteClaimsRequirement(new Dictionary\u003Cstring, string\u003E { { \u0022userid\u0022, \u0022{userId}\u0022 } })).And(x =\u003E x.GivenAPlaceHolderNameAndValueList(new List\u003CPlaceholderNameAndValue\u003E { new PlaceholderNameAndValue(\u0022{userId}\u0022, \u002214\u0022) })).When(x =\u003E x.WhenICallTheAuthorizer()).Then(x =\u003E x.ThenTheUserIsAuthorized()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_authorize_dynamic_user",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimsPrincipal(new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(\u0022userid\u0022, \u002215\u0022), })))).And(x =\u003E x.GivenARouteClaimsRequirement(new Dictionary\u003Cstring, string\u003E { { \u0022userid\u0022, \u0022{userId}\u0022 } })).And(x =\u003E x.GivenAPlaceHolderNameAndValueList(new List\u003CPlaceholderNameAndValue\u003E { new PlaceholderNameAndValue(\u0022{userId}\u0022, \u002214\u0022) })).When(x =\u003E x.WhenICallTheAuthorizer()).Then(x =\u003E x.ThenTheUserIsntAuthorized()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_authorize_user_multiple_claims_of_same_type",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimsPrincipal(new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(\u0022UserType\u0022, \u0022guest\u0022), new Claim(\u0022UserType\u0022, \u0022registered\u0022), })))).And(x =\u003E x.GivenARouteClaimsRequirement(new Dictionary\u003Cstring, string\u003E { { \u0022UserType\u0022, \u0022registered\u0022 } })).When(x =\u003E x.WhenICallTheAuthorizer()).Then(x =\u003E x.ThenTheUserIsAuthorized()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_authorize_user",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimsPrincipal(new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E())))).And(x =\u003E x.GivenARouteClaimsRequirement(new Dictionary\u003Cstring, string\u003E { { \u0022UserType\u0022, \u0022registered\u0022 } })).When(x =\u003E x.WhenICallTheAuthorizer()).Then(x =\u003E x.ThenTheUserIsntAuthorized()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Fake",
    "Message": null,
    "Methods": [
      {
        "Name": "should_cache",
        "Body": "{\r\n    var fake = new Fake(1);\r\n    _cache.Add(\u00221\u0022, fake, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    var result = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result.ShouldBe(fake);\r\n    fake.Value.ShouldBe(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "doesnt_exist",
        "Body": "{\r\n    var result = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result.ShouldBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_and_delete",
        "Body": "{\r\n    var fake = new Fake(1);\r\n    _cache.Add(\u00221\u0022, fake, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    var newFake = new Fake(1);\r\n    _cache.AddAndDelete(\u00221\u0022, newFake, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    var result = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result.ShouldBe(newFake);\r\n    newFake.Value.ShouldBe(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_clear_region",
        "Body": "{\r\n    var fake1 = new Fake(1);\r\n    var fake2 = new Fake(2);\r\n    _cache.Add(\u00221\u0022, fake1, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    _cache.Add(\u00222\u0022, fake2, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    _cache.ClearRegion(\u0022region\u0022);\r\n    var result1 = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result1.ShouldBeNull();\r\n    var result2 = _cache.Get(\u00222\u0022, \u0022region\u0022);\r\n    result2.ShouldBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_clear_key_if_ttl_expired",
        "Body": "{\r\n    var fake = new Fake(1);\r\n    _cache.Add(\u00221\u0022, fake, TimeSpan.FromMilliseconds(50), \u0022region\u0022);\r\n    Thread.Sleep(200);\r\n    var result = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result.ShouldBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AspMemoryCacheTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_cache",
        "Body": "{\r\n    var fake = new Fake(1);\r\n    _cache.Add(\u00221\u0022, fake, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    var result = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result.ShouldBe(fake);\r\n    fake.Value.ShouldBe(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "doesnt_exist",
        "Body": "{\r\n    var result = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result.ShouldBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_and_delete",
        "Body": "{\r\n    var fake = new Fake(1);\r\n    _cache.Add(\u00221\u0022, fake, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    var newFake = new Fake(1);\r\n    _cache.AddAndDelete(\u00221\u0022, newFake, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    var result = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result.ShouldBe(newFake);\r\n    newFake.Value.ShouldBe(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_clear_region",
        "Body": "{\r\n    var fake1 = new Fake(1);\r\n    var fake2 = new Fake(2);\r\n    _cache.Add(\u00221\u0022, fake1, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    _cache.Add(\u00222\u0022, fake2, TimeSpan.FromSeconds(100), \u0022region\u0022);\r\n    _cache.ClearRegion(\u0022region\u0022);\r\n    var result1 = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result1.ShouldBeNull();\r\n    var result2 = _cache.Get(\u00222\u0022, \u0022region\u0022);\r\n    result2.ShouldBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_clear_key_if_ttl_expired",
        "Body": "{\r\n    var fake = new Fake(1);\r\n    _cache.Add(\u00221\u0022, fake, TimeSpan.FromMilliseconds(50), \u0022region\u0022);\r\n    Thread.Sleep(200);\r\n    var result = _cache.Get(\u00221\u0022, \u0022region\u0022);\r\n    result.ShouldBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CacheKeyGeneratorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_generate_cache_key_from_context",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenCacheKeyFromContext(_downstreamRequest)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OutputCacheMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_returned_cached_item_when_it_is_in_cache",
        "Body": "{\r\n    var headers = new Dictionary\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\r\n    {\r\n        {\r\n            \u0022test\u0022,\r\n            new List\u003Cstring\u003E\r\n            {\r\n                \u0022test\u0022\r\n            }\r\n        }\r\n    };\r\n    var contentHeaders = new Dictionary\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\r\n    {\r\n        {\r\n            \u0022content-type\u0022,\r\n            new List\u003Cstring\u003E\r\n            {\r\n                \u0022application/json\u0022\r\n            }\r\n        }\r\n    };\r\n    var cachedResponse = new CachedResponse(HttpStatusCode.OK, headers, \u0022\u0022, contentHeaders, \u0022some reason\u0022);\r\n    this.Given(x =\u003E x.GivenThereIsACachedResponse(cachedResponse)).And(x =\u003E x.GivenTheDownstreamRouteIs()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheCacheGetIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_returned_cached_item_when_it_is_in_cache_expires_header",
        "Body": "{\r\n    var contentHeaders = new Dictionary\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\r\n    {\r\n        {\r\n            \u0022Expires\u0022,\r\n            new List\u003Cstring\u003E\r\n            {\r\n                \u0022-1\u0022\r\n            }\r\n        }\r\n    };\r\n    var cachedResponse = new CachedResponse(HttpStatusCode.OK, new Dictionary\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(), \u0022\u0022, contentHeaders, \u0022some reason\u0022);\r\n    this.Given(x =\u003E x.GivenThereIsACachedResponse(cachedResponse)).And(x =\u003E x.GivenTheDownstreamRouteIs()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheCacheGetIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_continue_with_pipeline_and_cache_response",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenResponseIsNotCached(new HttpResponseMessage())).And(x =\u003E x.GivenTheDownstreamRouteIs()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheCacheAddIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RegionCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_region",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        UpstreamHttpMethod = new List\u003Cstring\u003E\r\n        {\r\n            \u0022Get\u0022\r\n        },\r\n        UpstreamPathTemplate = \u0022/testdummy\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenTheRoute(route)).When(_ =\u003E WhenICreateTheRegion()).Then(_ =\u003E ThenTheRegionIs(\u0022Gettestdummy\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_region",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        FileCacheOptions = new FileCacheOptions\r\n        {\r\n            Region = \u0022region\u0022\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenTheRoute(route)).When(_ =\u003E WhenICreateTheRegion()).Then(_ =\u003E ThenTheRegionIs(\u0022region\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotBuilderExtensionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_set_up_cache_manager",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E WhenISetUpCacheManager()).Then(x =\u003E ThenAnExceptionIsntThrown()).And(x =\u003E OnlyOneVersionOfEachCacheIsRegistered()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotCacheManagerCache",
    "Message": null,
    "Methods": [
      {
        "Name": "should_get_from_cache",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheFollowingIsCached(\u0022someKey\u0022, \u0022someRegion\u0022, \u0022someValue\u0022)).When(x =\u003E x.WhenIGetFromTheCache()).Then(x =\u003E x.ThenTheResultIs(\u0022someValue\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_to_cache",
        "Body": "{\r\n    this.When(x =\u003E x.WhenIAddToTheCache(\u0022someKey\u0022, \u0022someValue\u0022, TimeSpan.FromSeconds(1))).Then(x =\u003E x.ThenTheCacheIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_delete_key_from_cache",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheFollowingRegion(\u0022fookey\u0022)).When(_ =\u003E WhenIDeleteTheRegion(\u0022fookey\u0022)).Then(_ =\u003E ThenTheRegionIsDeleted(\u0022fookey\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OutputCacheMiddlewareRealCacheTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_cache_content_headers",
        "Body": "{\r\n    var content = new StringContent(\u0022{\\\u0022Test\\\u0022: 1}\u0022)\r\n    {\r\n        Headers =\r\n        {\r\n            ContentType = new MediaTypeHeaderValue(\u0022application/json\u0022)\r\n        }\r\n    };\r\n    var response = new DownstreamResponse(content, HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022fooreason\u0022);\r\n    this.Given(x =\u003E x.GivenResponseIsNotCached(response)).And(x =\u003E x.GivenTheDownstreamRouteIs()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheContentTypeHeaderIsCached()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AnyError",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_claims_to_context",
        "Body": "{\r\n    var context = new DefaultHttpContext\r\n    {\r\n        User = new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(\u0022test\u0022, \u0022data\u0022) }))\r\n    };\r\n    this.Given(x =\u003E x.GivenClaimsToThings(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022claim-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenHttpContext(context)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddClaimsToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "if_claims_exists_should_replace_it",
        "Body": "{\r\n    var context = new DefaultHttpContext\r\n    {\r\n        User = new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(\u0022existing-key\u0022, \u0022data\u0022), new Claim(\u0022new-key\u0022, \u0022data\u0022) })),\r\n    };\r\n    this.Given(x =\u003E x.GivenClaimsToThings(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022existing-key\u0022, \u0022new-key\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenHttpContext(context)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddClaimsToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenClaimsToThings(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenHttpContext(new DefaultHttpContext())).And(x =\u003E x.GivenTheClaimParserReturns(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new AnyError() }))).When(x =\u003E x.WhenIAddClaimsToTheRequest()).Then(x =\u003E x.ThenTheResultIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddClaimsToRequestTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_claims_to_context",
        "Body": "{\r\n    var context = new DefaultHttpContext\r\n    {\r\n        User = new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(\u0022test\u0022, \u0022data\u0022) }))\r\n    };\r\n    this.Given(x =\u003E x.GivenClaimsToThings(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022claim-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenHttpContext(context)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddClaimsToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "if_claims_exists_should_replace_it",
        "Body": "{\r\n    var context = new DefaultHttpContext\r\n    {\r\n        User = new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(\u0022existing-key\u0022, \u0022data\u0022), new Claim(\u0022new-key\u0022, \u0022data\u0022) })),\r\n    };\r\n    this.Given(x =\u003E x.GivenClaimsToThings(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022existing-key\u0022, \u0022new-key\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenHttpContext(context)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddClaimsToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenClaimsToThings(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenHttpContext(new DefaultHttpContext())).And(x =\u003E x.GivenTheClaimParserReturns(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new AnyError() }))).When(x =\u003E x.WhenIAddClaimsToTheRequest()).Then(x =\u003E x.ThenTheResultIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimsToClaimsMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_claims_to_request_correctly",
        "Body": "{\r\n    var downstreamRoute = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithClaimsToClaims(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022sub\u0022, \u0022UserType\u0022, \u0022|\u0022, 0) }).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E x.GivenTheAddClaimsToRequestReturns()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheClaimsToRequestIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AggregatesCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_aggregates",
        "Body": "{\r\n    var fileConfig = new FileConfiguration\r\n    {\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022key1\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var routes = new List\u003CRoute\u003E();\r\n    this.Given(_ =\u003E GivenThe(fileConfig)).And(_ =\u003E GivenThe(routes)).When(_ =\u003E WhenICreate()).Then(_ =\u003E TheUtpCreatorIsNotCalled()).And(_ =\u003E ThenTheResultIsNotNull()).And(_ =\u003E ThenTheResultIsEmpty()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_aggregates",
        "Body": "{\r\n    var fileConfig = new FileConfiguration\r\n    {\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022key1\u0022,\r\n                    \u0022key2\u0022\r\n                },\r\n                UpstreamHost = \u0022hosty\u0022,\r\n                UpstreamPathTemplate = \u0022templatey\u0022,\r\n                Aggregator = \u0022aggregatory\u0022,\r\n                RouteIsCaseSensitive = true\r\n            },\r\n            new FileAggregateRoute\r\n            {\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022key3\u0022,\r\n                    \u0022key4\u0022\r\n                },\r\n                UpstreamHost = \u0022hosty\u0022,\r\n                UpstreamPathTemplate = \u0022templatey\u0022,\r\n                Aggregator = \u0022aggregatory\u0022,\r\n                RouteIsCaseSensitive = true\r\n            }\r\n        }\r\n    };\r\n    var routes = new List\u003CRoute\u003E\r\n    {\r\n        new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithKey(\u0022key1\u0022).Build()).Build(),\r\n        new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithKey(\u0022key2\u0022).Build()).Build(),\r\n        new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithKey(\u0022key3\u0022).Build()).Build(),\r\n        new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithKey(\u0022key4\u0022).Build()).Build()\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileConfig)).And(_ =\u003E GivenThe(routes)).And(_ =\u003E GivenTheUtpCreatorReturns()).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheUtpCreatorIsCalledCorrectly()).And(_ =\u003E ThenTheAggregatesAreCreated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AuthenticationOptionsCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_auth_options",
        "Body": "{\r\n    var fileRoute = new FileRoute()\r\n    {\r\n        AuthenticationOptions = new FileAuthenticationOptions\r\n        {\r\n            AuthenticationProviderKey = \u0022Test\u0022,\r\n            AllowedScopes = new List\u003Cstring\u003E\r\n            {\r\n                \u0022cheese\u0022\r\n            },\r\n        }\r\n    };\r\n    var expected = new AuthenticationOptionsBuilder().WithAllowedScopes(fileRoute.AuthenticationOptions?.AllowedScopes).WithAuthenticationProviderKey(\u0022Test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenTheFollowing(fileRoute)).When(x =\u003E x.WhenICreateTheAuthenticationOptions()).Then(x =\u003E x.ThenTheFollowingConfigIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotConfigurationChangeTokenSourceTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_activate_change_token",
        "Body": "{\r\n    this.Given(_ =\u003E GivenIActivateTheChangeTokenSource()).Then(_ =\u003E ThenTheChangeTokenShouldBeActivated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotConfigurationChangeTokenTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_callback_with_state",
        "Body": "{\r\n    this.Given(_ =\u003E GivenIHaveAChangeToken()).And(_ =\u003E AndIRegisterACallback()).Then(_ =\u003E ThenIShouldGetADisposableWrapper()).Given(_ =\u003E GivenIActivateTheToken()).Then(_ =\u003E ThenTheCallbackShouldBeCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_call_callback_if_it_is_disposed",
        "Body": "{\r\n    this.Given(_ =\u003E GivenIHaveAChangeToken()).And(_ =\u003E AndIRegisterACallback()).Then(_ =\u003E ThenIShouldGetADisposableWrapper()).And(_ =\u003E GivenIActivateTheToken()).And(_ =\u003E AndIDisposeTheCallbackWrapper()).And(_ =\u003E GivenIActivateTheToken()).Then(_ =\u003E ThenTheCallbackShouldNotBeCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimsToThingCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_claims_to_things",
        "Body": "{\r\n    var userInput = new Dictionary\u003Cstring, string\u003E()\r\n    {\r\n        {\r\n            \u0022CustomerId\u0022,\r\n            \u0022Claims[CustomerId] \u003E value\u0022\r\n        }\r\n    };\r\n    var claimsToThing = new OkResponse\u003CClaimToThing\u003E(new ClaimToThing(\u0022CustomerId\u0022, \u0022CustomerId\u0022, \u0022\u0022, 0));\r\n    this.Given(x =\u003E x.GivenTheFollowingDictionary(userInput)).And(x =\u003E x.GivenTheConfigHeaderExtractorReturns(claimsToThing)).When(x =\u003E x.WhenIGetTheThings()).Then(x =\u003E x.ThenTheConfigParserIsCalledCorrectly()).And(x =\u003E x.ThenClaimsToThingsAreReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_error_if_cannot_parse_claim_to_thing",
        "Body": "{\r\n    var userInput = new Dictionary\u003Cstring, string\u003E()\r\n    {\r\n        {\r\n            \u0022CustomerId\u0022,\r\n            \u0022Claims[CustomerId] \u003E value\u0022\r\n        }\r\n    };\r\n    var claimsToThing = new ErrorResponse\u003CClaimToThing\u003E(It.IsAny\u003CError\u003E());\r\n    this.Given(x =\u003E x.GivenTheFollowingDictionary(userInput)).And(x =\u003E x.GivenTheConfigHeaderExtractorReturns(claimsToThing)).When(x =\u003E x.WhenIGetTheThings()).Then(x =\u003E x.ThenTheConfigParserIsCalledCorrectly()).And(x =\u003E x.ThenNoClaimsToThingsAreReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimToThingConfigurationParserTests",
    "Message": null,
    "Methods": [
      {
        "Name": "returns_no_instructions_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheDictionaryIs(new Dictionary\u003Cstring, string\u003E() { { \u0022CustomerId\u0022, \u0022\u0022 }, })).When(x =\u003E x.WhenICallTheExtractor()).Then(x =\u003E x.ThenAnErrorIsReturned(new ErrorResponse\u003CClaimToThing\u003E(new List\u003CError\u003E { new NoInstructionsError(\u0022\u003E\u0022) }))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "returns_no_instructions_not_for_claims_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheDictionaryIs(new Dictionary\u003Cstring, string\u003E() { { \u0022CustomerId\u0022, \u0022Cheese[CustomerId] \u003E value\u0022 }, })).When(x =\u003E x.WhenICallTheExtractor()).Then(x =\u003E x.ThenAnErrorIsReturned(new ErrorResponse\u003CClaimToThing\u003E(new List\u003CError\u003E { new InstructionNotForClaimsError() }))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_parse_entry_to_work_out_properties_with_key",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheDictionaryIs(new Dictionary\u003Cstring, string\u003E() { { \u0022CustomerId\u0022, \u0022Claims[CustomerId] \u003E value\u0022 }, })).When(x =\u003E x.WhenICallTheExtractor()).Then(x =\u003E x.ThenTheClaimParserPropertiesAreReturned(new OkResponse\u003CClaimToThing\u003E(new ClaimToThing(\u0022CustomerId\u0022, \u0022CustomerId\u0022, \u0022\u0022, 0)))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_parse_entry_to_work_out_properties_with_key_delimiter_and_index",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheDictionaryIs(new Dictionary\u003Cstring, string\u003E() { { \u0022UserId\u0022, \u0022Claims[Subject] \u003E value[0] \u003E |\u0022 }, })).When(x =\u003E x.WhenICallTheExtractor()).Then(x =\u003E x.ThenTheClaimParserPropertiesAreReturned(new OkResponse\u003CClaimToThing\u003E(new ClaimToThing(\u0022UserId\u0022, \u0022Subject\u0022, \u0022|\u0022, 0)))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigurationCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_build_configuration_with_no_admin_path",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheDependenciesAreSetUp()).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDepdenciesAreCalledCorrectly()).And(_ =\u003E ThenThePropertiesAreSetCorrectly()).And(_ =\u003E ThenTheAdminPathIsNull()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_build_configuration_with_admin_path",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheDependenciesAreSetUp()).And(_ =\u003E GivenTheAdminPath()).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDepdenciesAreCalledCorrectly()).And(_ =\u003E ThenThePropertiesAreSetCorrectly()).And(_ =\u003E ThenTheAdminPathIsSet()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DiskFileConfigurationRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_file_configuration",
        "Body": "{\r\n    var config = FakeFileConfigurationForGet();\r\n    this.Given(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenIGetTheRoutes()).Then(_ =\u003E ThenTheFollowingIsReturned(config)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_file_configuration_if_environment_name_is_unavailable",
        "Body": "{\r\n    var config = FakeFileConfigurationForGet();\r\n    this.Given(_ =\u003E GivenTheEnvironmentNameIsUnavailable()).And(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenIGetTheRoutes()).Then(_ =\u003E ThenTheFollowingIsReturned(config)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_file_configuration",
        "Body": "{\r\n    var config = FakeFileConfigurationForSet();\r\n    this.Given(_ =\u003E GivenIHaveAConfiguration(config)).When(_ =\u003E WhenISetTheConfiguration()).Then(_ =\u003E ThenTheConfigurationIsStoredAs(config)).And(_ =\u003E ThenTheConfigurationJsonIsIndented(config)).And(x =\u003E AndTheChangeTokenIsActivated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_file_configuration_if_environment_name_is_unavailable",
        "Body": "{\r\n    var config = FakeFileConfigurationForSet();\r\n    this.Given(_ =\u003E GivenIHaveAConfiguration(config)).And(_ =\u003E GivenTheEnvironmentNameIsUnavailable()).When(_ =\u003E WhenISetTheConfiguration()).Then(_ =\u003E ThenTheConfigurationIsStoredAs(config)).And(_ =\u003E ThenTheConfigurationJsonIsIndented(config)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_environment_file_configuration_and_ocelot_file_configuration",
        "Body": "{\r\n    var config = FakeFileConfigurationForSet();\r\n    this.Given(_ =\u003E GivenIHaveAConfiguration(config)).And(_ =\u003E GivenTheConfigurationIs(config)).And(_ =\u003E GivenTheUserAddedOcelotJson()).When(_ =\u003E WhenISetTheConfiguration()).Then(_ =\u003E ThenTheConfigurationIsStoredAs(config)).And(_ =\u003E ThenTheConfigurationJsonIsIndented(config)).Then(_ =\u003E ThenTheOcelotJsonIsStoredAs(config)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DownstreamAddressesCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_do_nothing",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n    };\r\n    var expected = new List\u003CDownstreamHostAndPort\u003E\r\n    {\r\n    };\r\n    this.Given(x =\u003E GivenTheFollowingRoute(route)).When(x =\u003E WhenICreate()).Then(x =\u003E TheThenFollowingIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_addresses_from_old_downstream_path_and_port",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n        {\r\n            new FileHostAndPort\r\n            {\r\n                Host = \u0022test\u0022,\r\n                Port = 80\r\n            }\r\n        },\r\n    };\r\n    var expected = new List\u003CDownstreamHostAndPort\u003E\r\n    {\r\n        new DownstreamHostAndPort(\u0022test\u0022, 80),\r\n    };\r\n    this.Given(x =\u003E GivenTheFollowingRoute(route)).When(x =\u003E WhenICreate()).Then(x =\u003E TheThenFollowingIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_addresses_from_downstream_host_and_ports",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n        {\r\n            new FileHostAndPort\r\n            {\r\n                Host = \u0022test\u0022,\r\n                Port = 80\r\n            },\r\n            new FileHostAndPort\r\n            {\r\n                Host = \u0022west\u0022,\r\n                Port = 443\r\n            }\r\n        }\r\n    };\r\n    var expected = new List\u003CDownstreamHostAndPort\u003E\r\n    {\r\n        new DownstreamHostAndPort(\u0022test\u0022, 80),\r\n        new DownstreamHostAndPort(\u0022west\u0022, 443)\r\n    };\r\n    this.Given(x =\u003E GivenTheFollowingRoute(route)).When(x =\u003E WhenICreate()).Then(x =\u003E TheThenFollowingIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DynamicsCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_nothing",
        "Body": "{\r\n    var fileConfig = new FileConfiguration();\r\n    this.Given(_ =\u003E GivenThe(fileConfig)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenNothingIsReturned()).And(_ =\u003E ThenTheRloCreatorIsNotCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_re_routes",
        "Body": "{\r\n    var fileConfig = new FileConfiguration\r\n    {\r\n        DynamicRoutes = new List\u003CFileDynamicRoute\u003E\r\n        {\r\n            new FileDynamicRoute\r\n            {\r\n                ServiceName = \u00221\u0022,\r\n                RateLimitRule = new FileRateLimitRule\r\n                {\r\n                    EnableRateLimiting = false\r\n                },\r\n                DownstreamHttpVersion = \u00221.1\u0022\r\n            },\r\n            new FileDynamicRoute\r\n            {\r\n                ServiceName = \u00222\u0022,\r\n                RateLimitRule = new FileRateLimitRule\r\n                {\r\n                    EnableRateLimiting = true\r\n                },\r\n                DownstreamHttpVersion = \u00222.0\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileConfig)).And(_ =\u003E GivenTheRloCreatorReturns()).And(_ =\u003E GivenTheVersionCreatorReturns()).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheRoutesAreReturned()).And(_ =\u003E ThenTheRloCreatorIsCalledCorrectly()).And(_ =\u003E ThenTheVersionCreatorIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FileConfigurationPollerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_start",
        "Body": "{\r\n    this.Given(x =\u003E GivenPollerHasStarted()).Given(x =\u003E ThenTheSetterIsCalled(_fileConfig, 1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_setter_when_gets_new_config",
        "Body": "{\r\n    var newConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022test\u0022\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenPollerHasStarted()).Given(x =\u003E WhenTheConfigIsChanged(newConfig, 0)).Then(x =\u003E ThenTheSetterIsCalledAtLeast(newConfig, 1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_poll_if_already_polling",
        "Body": "{\r\n    var newConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022test\u0022\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenPollerHasStarted()).Given(x =\u003E WhenTheConfigIsChanged(newConfig, 10)).Then(x =\u003E ThenTheSetterIsCalled(newConfig, 1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_do_nothing_if_call_to_provider_fails",
        "Body": "{\r\n    var newConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022test\u0022\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenPollerHasStarted()).Given(x =\u003E WhenProviderErrors()).Then(x =\u003E ThenTheSetterIsCalled(newConfig, 0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_dispose_cleanly_without_starting",
        "Body": "{\r\n    this.When(x =\u003E WhenPollerIsDisposed()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FileConfigurationSetterTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_set_configuration",
        "Body": "{\r\n    var fileConfig = new FileConfiguration();\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    var config = new InternalConfiguration(new List\u003CRoute\u003E(), string.Empty, serviceProviderConfig, \u0022asdf\u0022, new LoadBalancerOptionsBuilder().Build(), \u0022\u0022, new QoSOptionsBuilder().Build(), new HttpHandlerOptionsBuilder().Build(), new Version(\u00221.1\u0022));\r\n    this.Given(x =\u003E GivenTheFollowingConfiguration(fileConfig)).And(x =\u003E GivenTheRepoReturns(new OkResponse())).And(x =\u003E GivenTheCreatorReturns(new OkResponse\u003CIInternalConfiguration\u003E(config))).When(x =\u003E WhenISetTheConfiguration()).Then(x =\u003E ThenTheConfigurationRepositoryIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_unable_to_set_file_configuration",
        "Body": "{\r\n    var fileConfig = new FileConfiguration();\r\n    this.Given(x =\u003E GivenTheFollowingConfiguration(fileConfig)).And(x =\u003E GivenTheRepoReturns(new ErrorResponse(It.IsAny\u003CError\u003E()))).When(x =\u003E WhenISetTheConfiguration()).And(x =\u003E ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_unable_to_set_ocelot_configuration",
        "Body": "{\r\n    var fileConfig = new FileConfiguration();\r\n    this.Given(x =\u003E GivenTheFollowingConfiguration(fileConfig)).And(x =\u003E GivenTheRepoReturns(new OkResponse())).And(x =\u003E GivenTheCreatorReturns(new ErrorResponse\u003CIInternalConfiguration\u003E(It.IsAny\u003CError\u003E()))).When(x =\u003E WhenISetTheConfiguration()).And(x =\u003E ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FileInternalConfigurationCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_validation_error",
        "Body": "{\r\n    var fileConfiguration = new FileConfiguration();\r\n    this.Given(_ =\u003E GivenThe(fileConfiguration)).And(_ =\u003E GivenTheValidationFails()).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_internal_configuration",
        "Body": "{\r\n    var fileConfiguration = new FileConfiguration();\r\n    this.Given(_ =\u003E GivenThe(fileConfiguration)).And(_ =\u003E GivenTheValidationSucceeds()).And(_ =\u003E GivenTheDependenciesAreSetUp()).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDependenciesAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HashCreationTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_hash_and_salt",
        "Body": "{\r\n    var password = \u0022secret\u0022;\r\n    var salt = new byte[128 / 8];\r\n    using (var rng = RandomNumberGenerator.Create())\r\n    {\r\n        rng.GetBytes(salt);\r\n    }\r\n\r\n    var storedSalt = Convert.ToBase64String(salt);\r\n    var storedHash = Convert.ToBase64String(KeyDerivation.Pbkdf2(password: password, salt: salt, prf: KeyDerivationPrf.HMACSHA256, iterationCount: 10000, numBytesRequested: 256 / 8));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HeaderFindAndReplaceCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        UpstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                \u0022Test\u0022,\r\n                \u0022Test, Chicken\u0022\r\n            },\r\n            {\r\n                \u0022Moop\u0022,\r\n                \u0022o, a\u0022\r\n            }\r\n        },\r\n        DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                \u0022Pop\u0022,\r\n                \u0022West, East\u0022\r\n            },\r\n            {\r\n                \u0022Bop\u0022,\r\n                \u0022e, r\u0022\r\n            }\r\n        }\r\n    };\r\n    var upstream = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Test\u0022, \u0022Test\u0022, \u0022Chicken\u0022, 0),\r\n        new HeaderFindAndReplace(\u0022Moop\u0022, \u0022o\u0022, \u0022a\u0022, 0)\r\n    };\r\n    var downstream = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Pop\u0022, \u0022West\u0022, \u0022East\u0022, 0),\r\n        new HeaderFindAndReplace(\u0022Bop\u0022, \u0022e\u0022, \u0022r\u0022, 0)\r\n    };\r\n    this.Given(x =\u003E GivenTheRoute(route)).When(x =\u003E WhenICreate()).Then(x =\u003E ThenTheFollowingUpstreamIsReturned(upstream)).Then(x =\u003E ThenTheFollowingDownstreamIsReturned(downstream)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_with_add_headers_to_request",
        "Body": "{\r\n    const string key = \u0022X-Forwarded-For\u0022;\r\n    const string value = \u0022{RemoteIpAddress}\u0022;\r\n    var route = new FileRoute\r\n    {\r\n        UpstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                key,\r\n                value\r\n            },\r\n        }\r\n    };\r\n    var expected = new AddHeader(key, value);\r\n    this.Given(x =\u003E GivenTheRoute(route)).When(x =\u003E WhenICreate()).Then(x =\u003E ThenTheFollowingAddHeaderToUpstreamIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_base_url_placeholder",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                \u0022Location\u0022,\r\n                \u0022http://www.bbc.co.uk/, {BaseUrl}\u0022\r\n            },\r\n        }\r\n    };\r\n    var downstream = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Location\u0022, \u0022http://www.bbc.co.uk/\u0022, \u0022http://ocelot.com/\u0022, 0),\r\n    };\r\n    this.Given(x =\u003E GivenTheRoute(route)).And(x =\u003E GivenTheBaseUrlIs(\u0022http://ocelot.com/\u0022)).When(x =\u003E WhenICreate()).Then(x =\u003E ThenTheFollowingDownstreamIsReturned(downstream)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_errors_and_not_add_headers",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                \u0022Location\u0022,\r\n                \u0022http://www.bbc.co.uk/, {BaseUrl}\u0022\r\n            },\r\n        },\r\n        UpstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                \u0022Location\u0022,\r\n                \u0022http://www.bbc.co.uk/, {BaseUrl}\u0022\r\n            },\r\n        }\r\n    };\r\n    var expected = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n    };\r\n    this.Given(x =\u003E GivenTheRoute(route)).And(x =\u003E GivenTheBaseUrlErrors()).When(x =\u003E WhenICreate()).Then(x =\u003E ThenTheFollowingDownstreamIsReturned(expected)).And(x =\u003E ThenTheFollowingUpstreamIsReturned(expected)).And(x =\u003E ThenTheLoggerIsCalledCorrectly(\u0022Unable to add DownstreamHeaderTransform Location: http://www.bbc.co.uk/, {BaseUrl}\u0022)).And(x =\u003E ThenTheLoggerIsCalledCorrectly(\u0022Unable to add UpstreamHeaderTransform Location: http://www.bbc.co.uk/, {BaseUrl}\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_base_url_partial_placeholder",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                \u0022Location\u0022,\r\n                \u0022http://www.bbc.co.uk/pay, {BaseUrl}pay\u0022\r\n            },\r\n        }\r\n    };\r\n    var downstream = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Location\u0022, \u0022http://www.bbc.co.uk/pay\u0022, \u0022http://ocelot.com/pay\u0022, 0),\r\n    };\r\n    this.Given(x =\u003E GivenTheRoute(route)).And(x =\u003E GivenTheBaseUrlIs(\u0022http://ocelot.com/\u0022)).When(x =\u003E WhenICreate()).Then(x =\u003E ThenTheFollowingDownstreamIsReturned(downstream)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_trace_id_header",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                \u0022Trace-Id\u0022,\r\n                \u0022{TraceId}\u0022\r\n            },\r\n        }\r\n    };\r\n    var expected = new AddHeader(\u0022Trace-Id\u0022, \u0022{TraceId}\u0022);\r\n    this.Given(x =\u003E GivenTheRoute(route)).And(x =\u003E GivenTheBaseUrlIs(\u0022http://ocelot.com/\u0022)).When(x =\u003E WhenICreate()).Then(x =\u003E ThenTheFollowingAddHeaderToDownstreamIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_downstream_header_as_is_when_no_replacement_is_given",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                \u0022X-Custom-Header\u0022,\r\n                \u0022Value\u0022\r\n            },\r\n        }\r\n    };\r\n    var expected = new AddHeader(\u0022X-Custom-Header\u0022, \u0022Value\u0022);\r\n    this.Given(x =\u003E GivenTheRoute(route)).And(x =\u003E WhenICreate()).Then(x =\u003E x.ThenTheFollowingAddHeaderToDownstreamIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_upstream_header_as_is_when_no_replacement_is_given",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        UpstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            {\r\n                \u0022X-Custom-Header\u0022,\r\n                \u0022Value\u0022\r\n            },\r\n        }\r\n    };\r\n    var expected = new AddHeader(\u0022X-Custom-Header\u0022, \u0022Value\u0022);\r\n    this.Given(x =\u003E GivenTheRoute(route)).And(x =\u003E WhenICreate()).Then(x =\u003E x.ThenTheFollowingAddHeaderToUpstreamIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeTracer",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_use_tracing_if_fake_tracer_registered",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            UseTracing = true\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_tracing_if_real_tracer_registered",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            UseTracing = true\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, true, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).And(x =\u003E GivenARealTracer()).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_useCookie_false_and_allowAutoRedirect_true_as_default",
        "Body": "{\r\n    var fileRoute = new FileRoute();\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_specified_useCookie_and_allowAutoRedirect",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            AllowAutoRedirect = false,\r\n            UseCookieContainer = false,\r\n            UseTracing = false\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_useproxy_true_as_default",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions()\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_specified_useproxy",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            UseProxy = false\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, false, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_specified_MaxConnectionsPerServer",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            MaxConnectionsPerServer = 10\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, 10);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_fixing_specified_MaxConnectionsPerServer_range",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            MaxConnectionsPerServer = -1\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_fixing_specified_MaxConnectionsPerServer_range_when_zero",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            MaxConnectionsPerServer = 0\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpHandlerOptionsCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_use_tracing_if_fake_tracer_registered",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            UseTracing = true\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_tracing_if_real_tracer_registered",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            UseTracing = true\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, true, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).And(x =\u003E GivenARealTracer()).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_useCookie_false_and_allowAutoRedirect_true_as_default",
        "Body": "{\r\n    var fileRoute = new FileRoute();\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_specified_useCookie_and_allowAutoRedirect",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            AllowAutoRedirect = false,\r\n            UseCookieContainer = false,\r\n            UseTracing = false\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_useproxy_true_as_default",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions()\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_specified_useproxy",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            UseProxy = false\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, false, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_with_specified_MaxConnectionsPerServer",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            MaxConnectionsPerServer = 10\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, 10);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_fixing_specified_MaxConnectionsPerServer_range",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            MaxConnectionsPerServer = -1\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_options_fixing_specified_MaxConnectionsPerServer_range_when_zero",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        HttpHandlerOptions = new FileHttpHandlerOptions\r\n        {\r\n            MaxConnectionsPerServer = 0\r\n        }\r\n    };\r\n    var expectedOptions = new HttpHandlerOptions(false, false, false, true, int.MaxValue);\r\n    this.Given(x =\u003E GivenTheFollowing(fileRoute)).When(x =\u003E WhenICreateHttpHandlerOptions()).Then(x =\u003E ThenTheFollowingOptionsReturned(expectedOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeConfig",
    "Message": null,
    "Methods": [
      {
        "Name": "can_add_config",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheConfigurationIs(new FakeConfig(\u0022initial\u0022, \u0022adminath\u0022))).When(x =\u003E x.WhenIAddOrReplaceTheConfig()).Then(x =\u003E x.ThenNoErrorsAreReturned()).And(x =\u003E AndTheChangeTokenIsActivated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_get_config",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenThereIsASavedConfiguration()).When(x =\u003E x.WhenIGetTheConfiguration()).Then(x =\u003E x.ThenTheConfigurationIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "InMemoryConfigurationRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "can_add_config",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheConfigurationIs(new FakeConfig(\u0022initial\u0022, \u0022adminath\u0022))).When(x =\u003E x.WhenIAddOrReplaceTheConfig()).Then(x =\u003E x.ThenNoErrorsAreReturned()).And(x =\u003E AndTheChangeTokenIsActivated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_get_config",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenThereIsASavedConfiguration()).When(x =\u003E x.WhenIGetTheConfiguration()).Then(x =\u003E x.ThenTheConfigurationIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoadBalancerOptionsCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create",
        "Body": "{\r\n    var fileLoadBalancerOptions = new FileLoadBalancerOptions\r\n    {\r\n        Type = \u0022test\u0022,\r\n        Key = \u0022west\u0022,\r\n        Expiry = 1\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileLoadBalancerOptions)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheOptionsAreCreated(fileLoadBalancerOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "QoSOptionsCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_qos_options",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        QoSOptions = new FileQoSOptions\r\n        {\r\n            ExceptionsAllowedBeforeBreaking = 1,\r\n            DurationOfBreak = 1,\r\n            TimeoutValue = 1\r\n        }\r\n    };\r\n    var expected = new QoSOptionsBuilder().WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).WithTimeoutValue(1).Build();\r\n    this.Given(x =\u003E x.GivenTheFollowingRoute(route)).When(x =\u003E x.WhenICreate()).Then(x =\u003E x.ThenTheFollowingIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RateLimitOptionsCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_rate_limit_options",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        RateLimitOptions = new FileRateLimitRule\r\n        {\r\n            ClientWhitelist = new List\u003Cstring\u003E(),\r\n            Period = \u0022Period\u0022,\r\n            Limit = 1,\r\n            PeriodTimespan = 1,\r\n            EnableRateLimiting = true\r\n        }\r\n    };\r\n    var fileGlobalConfig = new FileGlobalConfiguration\r\n    {\r\n        RateLimitOptions = new FileRateLimitOptions\r\n        {\r\n            ClientIdHeader = \u0022ClientIdHeader\u0022,\r\n            DisableRateLimitHeaders = true,\r\n            QuotaExceededMessage = \u0022QuotaExceededMessage\u0022,\r\n            RateLimitCounterPrefix = \u0022RateLimitCounterPrefix\u0022,\r\n            HttpStatusCode = 200\r\n        }\r\n    };\r\n    var expected = new RateLimitOptionsBuilder().WithClientIdHeader(\u0022ClientIdHeader\u0022).WithClientWhiteList(() =\u003E fileRoute.RateLimitOptions.ClientWhitelist).WithDisableRateLimitHeaders(true).WithEnableRateLimiting(true).WithHttpStatusCode(200).WithQuotaExceededMessage(\u0022QuotaExceededMessage\u0022).WithRateLimitCounterPrefix(\u0022RateLimitCounterPrefix\u0022).WithRateLimitRule(new RateLimitRule(fileRoute.RateLimitOptions.Period, fileRoute.RateLimitOptions.PeriodTimespan, fileRoute.RateLimitOptions.Limit)).Build();\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).And(x =\u003E x.GivenTheFollowingFileGlobalConfig(fileGlobalConfig)).And(x =\u003E x.GivenRateLimitingIsEnabled()).When(x =\u003E x.WhenICreate()).Then(x =\u003E x.ThenTheFollowingIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RequestIdKeyCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_use_global_configuration",
        "Body": "{\r\n    var route = new FileRoute();\r\n    var globalConfig = new FileGlobalConfiguration\r\n    {\r\n        RequestIdKey = \u0022cheese\u0022\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingRoute(route)).And(x =\u003E x.GivenTheFollowingGlobalConfig(globalConfig)).When(x =\u003E x.WhenICreate()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022cheese\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_re_route_specific",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        RequestIdKey = \u0022cheese\u0022\r\n    };\r\n    var globalConfig = new FileGlobalConfiguration();\r\n    this.Given(x =\u003E x.GivenTheFollowingRoute(route)).And(x =\u003E x.GivenTheFollowingGlobalConfig(globalConfig)).When(x =\u003E x.WhenICreate()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022cheese\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_re_route_over_global_specific",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        RequestIdKey = \u0022cheese\u0022\r\n    };\r\n    var globalConfig = new FileGlobalConfiguration\r\n    {\r\n        RequestIdKey = \u0022test\u0022\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingRoute(route)).And(x =\u003E x.GivenTheFollowingGlobalConfig(globalConfig)).When(x =\u003E x.WhenICreate()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022cheese\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RouteKeyCreatorTests",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "Methods": [
      {
        "Name": "should_return_sticky_session_key",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        LoadBalancerOptions = new FileLoadBalancerOptions\r\n        {\r\n            Key = \u0022testy\u0022,\r\n            Type = nameof(CookieStickySessions)\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(route)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheResultIs($\u0022{nameof(CookieStickySessions)}:{route.LoadBalancerOptions.Key}\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_re_route_key",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/api/product\u0022,\r\n        UpstreamHttpMethod = new List\u003Cstring\u003E\r\n        {\r\n            \u0022GET\u0022,\r\n            \u0022POST\u0022,\r\n            \u0022PUT\u0022\r\n        },\r\n        DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n        {\r\n            new FileHostAndPort\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = 123\r\n            },\r\n            new FileHostAndPort\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = 123\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(route)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheResultIs($\u0022{route.UpstreamPathTemplate}|{string.Join(\u0022,\u0022, route.UpstreamHttpMethod)}|{string.Join(\u0022,\u0022, route.DownstreamHostAndPorts.Select(x =\u003E $\u0022{x.Host}:{x.Port}\u0022))}\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RouteOptionsCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_re_route_options",
        "Body": "{\r\n    var route = new FileRoute\r\n    {\r\n        RateLimitOptions = new FileRateLimitRule\r\n        {\r\n            EnableRateLimiting = true\r\n        },\r\n        AuthenticationOptions = new FileAuthenticationOptions()\r\n        {\r\n            AuthenticationProviderKey = \u0022Test\u0022\r\n        },\r\n        RouteClaimsRequirement = new Dictionary\u003Cstring, string\u003E()\r\n        {\r\n            {\r\n                \u0022\u0022,\r\n                \u0022\u0022\r\n            }\r\n        },\r\n        FileCacheOptions = new FileCacheOptions\r\n        {\r\n            TtlSeconds = 1\r\n        },\r\n        ServiceName = \u0022west\u0022\r\n    };\r\n    var expected = new RouteOptionsBuilder().WithIsAuthenticated(true).WithIsAuthorized(true).WithIsCached(true).WithRateLimiting(true).WithUseServiceDiscovery(true).Build();\r\n    this.Given(x =\u003E x.GivenTheFollowing(route)).When(x =\u003E x.WhenICreate()).Then(x =\u003E x.ThenTheFollowingIsReturned(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RoutesCreatorTests",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "Methods": [
      {
        "Name": "should_return_nothing",
        "Body": "{\r\n    var fileConfig = new FileConfiguration();\r\n    this.Given(_ =\u003E GivenThe(fileConfig)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenNoRoutesAreReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_re_routes",
        "Body": "{\r\n    var fileConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                ServiceName = \u0022dave\u0022,\r\n                DangerousAcceptAnyServerCertificateValidator = true,\r\n                AddClaimsToRequest = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022a\u0022,\r\n                        \u0022b\u0022\r\n                    }\r\n                },\r\n                AddHeadersToRequest = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022c\u0022,\r\n                        \u0022d\u0022\r\n                    }\r\n                },\r\n                AddQueriesToRequest = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022e\u0022,\r\n                        \u0022f\u0022\r\n                    }\r\n                },\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022GET\u0022,\r\n                    \u0022POST\u0022\r\n                }\r\n            },\r\n            new FileRoute\r\n            {\r\n                ServiceName = \u0022wave\u0022,\r\n                DangerousAcceptAnyServerCertificateValidator = false,\r\n                AddClaimsToRequest = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022g\u0022,\r\n                        \u0022h\u0022\r\n                    }\r\n                },\r\n                AddHeadersToRequest = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022i\u0022,\r\n                        \u0022j\u0022\r\n                    }\r\n                },\r\n                AddQueriesToRequest = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022k\u0022,\r\n                        \u0022l\u0022\r\n                    }\r\n                },\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022PUT\u0022,\r\n                    \u0022DELETE\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileConfig)).And(_ =\u003E GivenTheDependenciesAreSetUpCorrectly()).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDependenciesAreCalledCorrectly()).And(_ =\u003E ThenTheRoutesAreCreated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SecurityOptionsCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_security_config",
        "Body": "{\r\n    var ipAllowedList = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022127.0.0.1\u0022,\r\n        \u0022192.168.1.1\u0022\r\n    };\r\n    var ipBlockedList = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022127.0.0.1\u0022,\r\n        \u0022192.168.1.1\u0022\r\n    };\r\n    var fileRoute = new FileRoute\r\n    {\r\n        SecurityOptions = new FileSecurityOptions()\r\n        {\r\n            IPAllowedList = ipAllowedList,\r\n            IPBlockedList = ipBlockedList\r\n        }\r\n    };\r\n    var expected = new SecurityOptions(ipAllowedList, ipBlockedList);\r\n    this.Given(x =\u003E x.GivenThe(fileRoute)).When(x =\u003E x.WhenICreate()).Then(x =\u003E x.ThenTheResultIs(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ServiceProviderCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_service_provider_config",
        "Body": "{\r\n    var globalConfig = new FileGlobalConfiguration\r\n    {\r\n        ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n        {\r\n            Scheme = \u0022https\u0022,\r\n            Host = \u0022127.0.0.1\u0022,\r\n            Port = 1234,\r\n            Type = \u0022ServiceFabric\u0022,\r\n            Token = \u0022testtoken\u0022,\r\n            ConfigurationKey = \u0022woo\u0022,\r\n            Namespace = \u0022default\u0022\r\n        }\r\n    };\r\n    var expected = new ServiceProviderConfigurationBuilder().WithScheme(\u0022https\u0022).WithHost(\u0022127.0.0.1\u0022).WithPort(1234).WithType(\u0022ServiceFabric\u0022).WithToken(\u0022testtoken\u0022).WithConfigurationKey(\u0022woo\u0022).WithNamespace(\u0022default\u0022).Build();\r\n    this.Given(x =\u003E x.GivenTheFollowingGlobalConfig(globalConfig)).When(x =\u003E x.WhenICreate()).Then(x =\u003E x.ThenTheConfigIs(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpstreamTemplatePatternCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_match_up_to_next_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/api/v{apiVersion}/cards\u0022,\r\n        Priority = 0\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^(?i)/api/v[^/]\u002B/cards$\u0022)).And(x =\u003E ThenThePriorityIs(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_re_route_priority",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/orders/{catchAll}\u0022,\r\n        Priority = 0\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^(?i)/orders/.\u002B$\u0022)).And(x =\u003E ThenThePriorityIs(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_zero_priority",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/{catchAll}\u0022,\r\n        Priority = 1\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^/.*\u0022)).And(x =\u003E ThenThePriorityIs(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_upstream_template_pattern_to_ignore_case_sensitivity",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/PRODUCTS/{productId}\u0022,\r\n        RouteIsCaseSensitive = false\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^(?i)/PRODUCTS/.\u002B$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_forward_slash_or_no_forward_slash_if_template_end_with_forward_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/PRODUCTS/\u0022,\r\n        RouteIsCaseSensitive = false\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^(?i)/PRODUCTS(/|)$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_upstream_template_pattern_to_respect_case_sensitivity",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/PRODUCTS/{productId}\u0022,\r\n        RouteIsCaseSensitive = true\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^/PRODUCTS/.\u002B$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_template_pattern_that_matches_anything_to_end_of_string",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/api/products/{productId}\u0022,\r\n        RouteIsCaseSensitive = true\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^/api/products/.\u002B$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_template_pattern_that_matches_more_than_one_placeholder",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/api/products/{productId}/variants/{variantId}\u0022,\r\n        RouteIsCaseSensitive = true\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^/api/products/[^/]\u002B/variants/.\u002B$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_template_pattern_that_matches_more_than_one_placeholder_with_trailing_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/api/products/{productId}/variants/{variantId}/\u0022,\r\n        RouteIsCaseSensitive = true\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^/api/products/[^/]\u002B/variants/[^/]\u002B(/|)$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_template_pattern_that_matches_to_end_of_string",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/\u0022\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^/$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_template_pattern_that_matches_to_end_of_string_when_slash_and_placeholder",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/{url}\u0022\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^/.*\u0022)).And(x =\u003E ThenThePriorityIs(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_template_pattern_that_starts_with_placeholder_then_has_another_later",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/{productId}/products/variants/{variantId}/\u0022,\r\n        RouteIsCaseSensitive = true\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^/[^/]\u002B/products/variants/[^/]\u002B(/|)$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_template_pattern_that_matches_query_string",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/api/subscriptions/{subscriptionId}/updates?unitId={unitId}\u0022\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^(?i)/api/subscriptions/[^/]\u002B/updates\\\\?unitId=.\u002B$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_template_pattern_that_matches_query_string_with_multiple_params",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        UpstreamPathTemplate = \u0022/api/subscriptions/{subscriptionId}/updates?unitId={unitId}\u0026productId={productId}\u0022\r\n    };\r\n    this.Given(x =\u003E x.GivenTheFollowingFileRoute(fileRoute)).When(x =\u003E x.WhenICreateTheTemplatePattern()).Then(x =\u003E x.ThenTheFollowingIsReturned(\u0022^(?i)/api/subscriptions/[^/]\u002B/updates\\\\?unitId=.\u002B\u0026productId=.\u002B$\u0022)).And(x =\u003E ThenThePriorityIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeServiceDiscoveryProvider",
    "Message": null,
    "Methods": [
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_and_has_service_fabric_as_option",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022ServiceFabric\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_and_has_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAServiceDiscoveryHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_dynamically_and_has_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAServiceDiscoveryHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_but_no_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_dynamically_but_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_but_no_service_discovery_handler_with_matching_name",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022consul\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).And(x =\u003E x.GivenAServiceDiscoveryHandler()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_qos_options_specified_and_has_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1,\r\n                    ExceptionsAllowedBeforeBreaking = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAQoSHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_qos_options_specified_globally_and_has_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            QoSOptions = new FileQoSOptions\r\n            {\r\n                TimeoutValue = 1,\r\n                ExceptionsAllowedBeforeBreaking = 1\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAQoSHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_qos_options_specified_but_no_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1,\r\n                    ExceptionsAllowedBeforeBreaking = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_qos_options_specified_globally_but_no_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            QoSOptions = new FileQoSOptions\r\n            {\r\n                TimeoutValue = 1,\r\n                ExceptionsAllowedBeforeBreaking = 1\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_aggregates_are_valid",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregates_are_duplicate_of_re_routes",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /tom has duplicate aggregate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_aggregates_are_not_duplicate_of_re_routes",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregates_are_duplicate_of_aggregates",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/lol\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            },\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022aggregate /tom has duplicate aggregate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_re_routes_dont_exist_for_aggregate",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Routes for aggregateRoute / either do not exist or do not have correct ServiceName property\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregate_has_re_routes_with_specific_request_id_keys",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RequestIdKey = \u0022should_fail\u0022,\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022aggregateRoute / contains Route with specific RequestIdKey, this is not possible with Aggregates\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_scheme_in_downstream_or_upstream_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022http://www.bbc.co.uk/api/products/{productId}\u0022, UpstreamPathTemplate = \u0022http://asdf.com\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).Then(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} doesnt start with forward slash\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(1, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(2, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} contains scheme\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(3, \u0022Upstream Path Template http://asdf.com contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(4, \u0022Upstream Path Template http://asdf.com doesnt start with forward slash\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(5, \u0022Upstream Path Template http://asdf.com contains scheme\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_one_route",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_without_slash_prefix_downstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template api/products/ doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_without_slash_prefix_upstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022api/prod/\u0022, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Upstream Path Template api/prod/ doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_upstream_url_contains_forward_slash_then_another_forward_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022//api/prod/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, Port = 80 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Upstream Path Template //api/prod/ contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_downstream_url_contains_forward_slash_then_another_forward_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022//api/products/\u0022, UpstreamPathTemplate = \u0022/api/prod/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, Port = 80 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template //api/products/ contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_valid_authentication_provider",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, AuthenticationOptions = new FileAuthenticationOptions() { AuthenticationProviderKey = \u0022Test\u0022 } } } })).And(x =\u003E x.GivenTheAuthSchemeExists(\u0022Test\u0022)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_with_invalid_authentication_provider",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, AuthenticationOptions = new FileAuthenticationOptions() { AuthenticationProviderKey = \u0022Test\u0022 } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Authentication Options AuthenticationProviderKey:Test,AllowedScopes:[] is unsupported authentication provider\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_all_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_all_verbs_but_different_hosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, UpstreamHost = \u0022host1\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, UpstreamHost = \u0022host2\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_specific_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 } }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_different_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Post\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_with_duplicated_upstreamhosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_but_different_upstreamhosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost111\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost222\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_but_one_upstreamhost_is_not_set",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E() } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_with_invalid_rate_limit_configuration",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, RateLimitOptions = new FileRateLimitRule { Period = \u00221x\u0022, EnableRateLimiting = true } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022RateLimitOptions.Period does not contain integer then s (second), m (minute), h (hour), d (day) e.g. 1m for 1 minute period\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_valid_rate_limit_configuration",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, RateLimitOptions = new FileRateLimitRule { Period = \u00221d\u0022, EnableRateLimiting = true } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_using_service_discovery_and_service_name",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, ServiceName = \u0022Test\u0022 } }, GlobalConfiguration = new FileGlobalConfiguration { ServiceDiscoveryProvider = new FileServiceDiscoveryProvider { Scheme = \u0022https\u0022, Type = \u0022servicefabric\u0022, Host = \u0022localhost\u0022, Port = 1234 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_when_not_using_service_discovery_and_host_is_set",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_when_no_downstream_but_has_host_and_port",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022test\u0022 } } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_when_no_host_and_port",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022When not using service discovery DownstreamHostAndPorts must be set and not empty or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_when_host_and_port_is_empty",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort() } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022When not using service discovery Host must be set on DownstreamHostAndPorts if you are not using Route.Host or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_when_placeholder_is_used_twice_in_upstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/bar/{everything}\u0022, DownstreamScheme = \u0022http\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort() { Host = \u0022a.b.cd\u0022 }, }, UpstreamPathTemplate = \u0022/foo/bar/{everything}/{everything}\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, }, }, })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /foo/bar/{everything}/{everything} has duplicated placeholder\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestOptions",
    "Message": null,
    "Methods": [
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_and_has_service_fabric_as_option",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022ServiceFabric\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_and_has_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAServiceDiscoveryHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_dynamically_and_has_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAServiceDiscoveryHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_but_no_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_dynamically_but_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_but_no_service_discovery_handler_with_matching_name",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022consul\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).And(x =\u003E x.GivenAServiceDiscoveryHandler()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_qos_options_specified_and_has_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1,\r\n                    ExceptionsAllowedBeforeBreaking = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAQoSHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_qos_options_specified_globally_and_has_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            QoSOptions = new FileQoSOptions\r\n            {\r\n                TimeoutValue = 1,\r\n                ExceptionsAllowedBeforeBreaking = 1\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAQoSHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_qos_options_specified_but_no_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1,\r\n                    ExceptionsAllowedBeforeBreaking = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_qos_options_specified_globally_but_no_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            QoSOptions = new FileQoSOptions\r\n            {\r\n                TimeoutValue = 1,\r\n                ExceptionsAllowedBeforeBreaking = 1\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_aggregates_are_valid",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregates_are_duplicate_of_re_routes",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /tom has duplicate aggregate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_aggregates_are_not_duplicate_of_re_routes",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregates_are_duplicate_of_aggregates",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/lol\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            },\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022aggregate /tom has duplicate aggregate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_re_routes_dont_exist_for_aggregate",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Routes for aggregateRoute / either do not exist or do not have correct ServiceName property\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregate_has_re_routes_with_specific_request_id_keys",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RequestIdKey = \u0022should_fail\u0022,\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022aggregateRoute / contains Route with specific RequestIdKey, this is not possible with Aggregates\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_scheme_in_downstream_or_upstream_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022http://www.bbc.co.uk/api/products/{productId}\u0022, UpstreamPathTemplate = \u0022http://asdf.com\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).Then(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} doesnt start with forward slash\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(1, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(2, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} contains scheme\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(3, \u0022Upstream Path Template http://asdf.com contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(4, \u0022Upstream Path Template http://asdf.com doesnt start with forward slash\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(5, \u0022Upstream Path Template http://asdf.com contains scheme\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_one_route",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_without_slash_prefix_downstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template api/products/ doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_without_slash_prefix_upstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022api/prod/\u0022, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Upstream Path Template api/prod/ doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_upstream_url_contains_forward_slash_then_another_forward_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022//api/prod/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, Port = 80 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Upstream Path Template //api/prod/ contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_downstream_url_contains_forward_slash_then_another_forward_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022//api/products/\u0022, UpstreamPathTemplate = \u0022/api/prod/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, Port = 80 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template //api/products/ contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_valid_authentication_provider",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, AuthenticationOptions = new FileAuthenticationOptions() { AuthenticationProviderKey = \u0022Test\u0022 } } } })).And(x =\u003E x.GivenTheAuthSchemeExists(\u0022Test\u0022)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_with_invalid_authentication_provider",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, AuthenticationOptions = new FileAuthenticationOptions() { AuthenticationProviderKey = \u0022Test\u0022 } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Authentication Options AuthenticationProviderKey:Test,AllowedScopes:[] is unsupported authentication provider\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_all_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_all_verbs_but_different_hosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, UpstreamHost = \u0022host1\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, UpstreamHost = \u0022host2\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_specific_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 } }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_different_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Post\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_with_duplicated_upstreamhosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_but_different_upstreamhosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost111\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost222\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_but_one_upstreamhost_is_not_set",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E() } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_with_invalid_rate_limit_configuration",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, RateLimitOptions = new FileRateLimitRule { Period = \u00221x\u0022, EnableRateLimiting = true } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022RateLimitOptions.Period does not contain integer then s (second), m (minute), h (hour), d (day) e.g. 1m for 1 minute period\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_valid_rate_limit_configuration",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, RateLimitOptions = new FileRateLimitRule { Period = \u00221d\u0022, EnableRateLimiting = true } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_using_service_discovery_and_service_name",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, ServiceName = \u0022Test\u0022 } }, GlobalConfiguration = new FileGlobalConfiguration { ServiceDiscoveryProvider = new FileServiceDiscoveryProvider { Scheme = \u0022https\u0022, Type = \u0022servicefabric\u0022, Host = \u0022localhost\u0022, Port = 1234 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_when_not_using_service_discovery_and_host_is_set",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_when_no_downstream_but_has_host_and_port",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022test\u0022 } } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_when_no_host_and_port",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022When not using service discovery DownstreamHostAndPorts must be set and not empty or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_when_host_and_port_is_empty",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort() } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022When not using service discovery Host must be set on DownstreamHostAndPorts if you are not using Route.Host or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_when_placeholder_is_used_twice_in_upstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/bar/{everything}\u0022, DownstreamScheme = \u0022http\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort() { Host = \u0022a.b.cd\u0022 }, }, UpstreamPathTemplate = \u0022/foo/bar/{everything}/{everything}\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, }, }, })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /foo/bar/{everything}/{everything} has duplicated placeholder\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_and_has_service_fabric_as_option",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022ServiceFabric\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_and_has_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAServiceDiscoveryHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_dynamically_and_has_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAServiceDiscoveryHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_but_no_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_dynamically_but_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_but_no_service_discovery_handler_with_matching_name",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022consul\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).And(x =\u003E x.GivenAServiceDiscoveryHandler()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_qos_options_specified_and_has_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1,\r\n                    ExceptionsAllowedBeforeBreaking = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAQoSHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_qos_options_specified_globally_and_has_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            QoSOptions = new FileQoSOptions\r\n            {\r\n                TimeoutValue = 1,\r\n                ExceptionsAllowedBeforeBreaking = 1\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAQoSHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_qos_options_specified_but_no_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1,\r\n                    ExceptionsAllowedBeforeBreaking = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_qos_options_specified_globally_but_no_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            QoSOptions = new FileQoSOptions\r\n            {\r\n                TimeoutValue = 1,\r\n                ExceptionsAllowedBeforeBreaking = 1\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_aggregates_are_valid",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregates_are_duplicate_of_re_routes",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /tom has duplicate aggregate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_aggregates_are_not_duplicate_of_re_routes",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregates_are_duplicate_of_aggregates",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/lol\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            },\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022aggregate /tom has duplicate aggregate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_re_routes_dont_exist_for_aggregate",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Routes for aggregateRoute / either do not exist or do not have correct ServiceName property\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregate_has_re_routes_with_specific_request_id_keys",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RequestIdKey = \u0022should_fail\u0022,\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022aggregateRoute / contains Route with specific RequestIdKey, this is not possible with Aggregates\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_scheme_in_downstream_or_upstream_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022http://www.bbc.co.uk/api/products/{productId}\u0022, UpstreamPathTemplate = \u0022http://asdf.com\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).Then(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} doesnt start with forward slash\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(1, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(2, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} contains scheme\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(3, \u0022Upstream Path Template http://asdf.com contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(4, \u0022Upstream Path Template http://asdf.com doesnt start with forward slash\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(5, \u0022Upstream Path Template http://asdf.com contains scheme\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_one_route",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_without_slash_prefix_downstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template api/products/ doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_without_slash_prefix_upstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022api/prod/\u0022, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Upstream Path Template api/prod/ doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_upstream_url_contains_forward_slash_then_another_forward_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022//api/prod/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, Port = 80 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Upstream Path Template //api/prod/ contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_downstream_url_contains_forward_slash_then_another_forward_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022//api/products/\u0022, UpstreamPathTemplate = \u0022/api/prod/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, Port = 80 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template //api/products/ contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_valid_authentication_provider",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, AuthenticationOptions = new FileAuthenticationOptions() { AuthenticationProviderKey = \u0022Test\u0022 } } } })).And(x =\u003E x.GivenTheAuthSchemeExists(\u0022Test\u0022)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_with_invalid_authentication_provider",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, AuthenticationOptions = new FileAuthenticationOptions() { AuthenticationProviderKey = \u0022Test\u0022 } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Authentication Options AuthenticationProviderKey:Test,AllowedScopes:[] is unsupported authentication provider\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_all_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_all_verbs_but_different_hosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, UpstreamHost = \u0022host1\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, UpstreamHost = \u0022host2\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_specific_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 } }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_different_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Post\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_with_duplicated_upstreamhosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_but_different_upstreamhosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost111\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost222\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_but_one_upstreamhost_is_not_set",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E() } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_with_invalid_rate_limit_configuration",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, RateLimitOptions = new FileRateLimitRule { Period = \u00221x\u0022, EnableRateLimiting = true } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022RateLimitOptions.Period does not contain integer then s (second), m (minute), h (hour), d (day) e.g. 1m for 1 minute period\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_valid_rate_limit_configuration",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, RateLimitOptions = new FileRateLimitRule { Period = \u00221d\u0022, EnableRateLimiting = true } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_using_service_discovery_and_service_name",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, ServiceName = \u0022Test\u0022 } }, GlobalConfiguration = new FileGlobalConfiguration { ServiceDiscoveryProvider = new FileServiceDiscoveryProvider { Scheme = \u0022https\u0022, Type = \u0022servicefabric\u0022, Host = \u0022localhost\u0022, Port = 1234 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_when_not_using_service_discovery_and_host_is_set",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_when_no_downstream_but_has_host_and_port",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022test\u0022 } } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_when_no_host_and_port",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022When not using service discovery DownstreamHostAndPorts must be set and not empty or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_when_host_and_port_is_empty",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort() } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022When not using service discovery Host must be set on DownstreamHostAndPorts if you are not using Route.Host or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_when_placeholder_is_used_twice_in_upstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/bar/{everything}\u0022, DownstreamScheme = \u0022http\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort() { Host = \u0022a.b.cd\u0022 }, }, UpstreamPathTemplate = \u0022/foo/bar/{everything}/{everything}\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, }, }, })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /foo/bar/{everything}/{everything} has duplicated placeholder\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FileConfigurationFluentValidatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_and_has_service_fabric_as_option",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022ServiceFabric\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_and_has_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAServiceDiscoveryHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_service_discovery_options_specified_dynamically_and_has_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAServiceDiscoveryHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_but_no_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_dynamically_but_service_discovery_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022FakeServiceDiscoveryProvider\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_service_discovery_options_specified_but_no_service_discovery_handler_with_matching_name",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022consul\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).And(x =\u003E x.GivenAServiceDiscoveryHandler()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_qos_options_specified_and_has_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1,\r\n                    ExceptionsAllowedBeforeBreaking = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAQoSHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_qos_options_specified_globally_and_has_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            QoSOptions = new FileQoSOptions\r\n            {\r\n                TimeoutValue = 1,\r\n                ExceptionsAllowedBeforeBreaking = 1\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).And(x =\u003E x.GivenAQoSHandler()).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_qos_options_specified_but_no_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1,\r\n                    ExceptionsAllowedBeforeBreaking = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_qos_options_specified_globally_but_no_qos_handler",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            QoSOptions = new FileQoSOptions\r\n            {\r\n                TimeoutValue = 1,\r\n                ExceptionsAllowedBeforeBreaking = 1\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_aggregates_are_valid",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregates_are_duplicate_of_re_routes",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /tom has duplicate aggregate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_if_aggregates_are_not_duplicate_of_re_routes",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregates_are_duplicate_of_aggregates",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/lol\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            },\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022aggregate /tom has duplicate aggregate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_re_routes_dont_exist_for_aggregate",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Routes for aggregateRoute / either do not exist or do not have correct ServiceName property\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_aggregate_has_re_routes_with_specific_request_id_keys",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RequestIdKey = \u0022should_fail\u0022,\r\n                Key = \u0022Tom\u0022\r\n            }\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Tom\u0022,\r\n                    \u0022Laura\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenAConfiguration(configuration)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022aggregateRoute / contains Route with specific RequestIdKey, this is not possible with Aggregates\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_scheme_in_downstream_or_upstream_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022http://www.bbc.co.uk/api/products/{productId}\u0022, UpstreamPathTemplate = \u0022http://asdf.com\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).Then(x =\u003E x.ThenTheErrorIs\u003CFileValidationFailedError\u003E()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} doesnt start with forward slash\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(1, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(2, \u0022Downstream Path Template http://www.bbc.co.uk/api/products/{productId} contains scheme\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(3, \u0022Upstream Path Template http://asdf.com contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(4, \u0022Upstream Path Template http://asdf.com doesnt start with forward slash\u0022)).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(5, \u0022Upstream Path Template http://asdf.com contains scheme\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_one_route",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_without_slash_prefix_downstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template api/products/ doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_without_slash_prefix_upstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022api/prod/\u0022, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Upstream Path Template api/prod/ doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_upstream_url_contains_forward_slash_then_another_forward_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022//api/prod/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, Port = 80 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Upstream Path Template //api/prod/ contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_if_downstream_url_contains_forward_slash_then_another_forward_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022//api/products/\u0022, UpstreamPathTemplate = \u0022/api/prod/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, Port = 80 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Downstream Path Template //api/products/ contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_valid_authentication_provider",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, AuthenticationOptions = new FileAuthenticationOptions() { AuthenticationProviderKey = \u0022Test\u0022 } } } })).And(x =\u003E x.GivenTheAuthSchemeExists(\u0022Test\u0022)).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_with_invalid_authentication_provider",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, AuthenticationOptions = new FileAuthenticationOptions() { AuthenticationProviderKey = \u0022Test\u0022 } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022Authentication Options AuthenticationProviderKey:Test,AllowedScopes:[] is unsupported authentication provider\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_all_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_all_verbs_but_different_hosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, UpstreamHost = \u0022host1\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bb.co.uk\u0022 } }, UpstreamHost = \u0022host2\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_specific_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 } }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_different_verbs",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Post\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_with_duplicate_routes_with_duplicated_upstreamhosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /asdf/ has duplicate\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_but_different_upstreamhosts",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost111\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost222\u0022 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_duplicate_routes_but_one_upstreamhost_is_not_set",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E(), UpstreamHost = \u0022upstreamhost\u0022 }, new FileRoute { DownstreamPathTemplate = \u0022/www/test/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, UpstreamHttpMethod = new List\u003Cstring\u003E() } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_with_invalid_rate_limit_configuration",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, RateLimitOptions = new FileRateLimitRule { Period = \u00221x\u0022, EnableRateLimiting = true } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022RateLimitOptions.Period does not contain integer then s (second), m (minute), h (hour), d (day) e.g. 1m for 1 minute period\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_valid_rate_limit_configuration",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022, } }, RateLimitOptions = new FileRateLimitRule { Period = \u00221d\u0022, EnableRateLimiting = true } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_with_using_service_discovery_and_service_name",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, ServiceName = \u0022Test\u0022 } }, GlobalConfiguration = new FileGlobalConfiguration { ServiceDiscoveryProvider = new FileServiceDiscoveryProvider { Scheme = \u0022https\u0022, Type = \u0022servicefabric\u0022, Host = \u0022localhost\u0022, Port = 1234 } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_when_not_using_service_discovery_and_host_is_set",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022bbc.co.uk\u0022 } }, } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_valid_when_no_downstream_but_has_host_and_port",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort { Host = \u0022test\u0022 } } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_when_no_host_and_port",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022When not using service discovery DownstreamHostAndPorts must be set and not empty or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_not_valid_when_host_and_port_is_empty",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/api/products/\u0022, UpstreamPathTemplate = \u0022/asdf/\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort() } } } })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022When not using service discovery Host must be set on DownstreamHostAndPorts if you are not using Route.Host or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "configuration_is_invalid_when_placeholder_is_used_twice_in_upstream_path_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAConfiguration(new FileConfiguration { Routes = new List\u003CFileRoute\u003E { new FileRoute { DownstreamPathTemplate = \u0022/bar/{everything}\u0022, DownstreamScheme = \u0022http\u0022, DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E { new FileHostAndPort() { Host = \u0022a.b.cd\u0022 }, }, UpstreamPathTemplate = \u0022/foo/bar/{everything}/{everything}\u0022, UpstreamHttpMethod = new List\u003Cstring\u003E { \u0022Get\u0022 }, }, }, })).When(x =\u003E x.WhenIValidateTheConfiguration()).Then(x =\u003E x.ThenTheResultIsNotValid()).And(x =\u003E x.ThenTheErrorMessageAtPositionIs(0, \u0022route /foo/bar/{everything}/{everything} has duplicated placeholder\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FileQoSOptionsFluentValidatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_be_valid_as_nothing_set",
        "Body": "{\r\n    this.Given(_ =\u003E GivenThe(new FileQoSOptions())).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_valid_as_qos_delegate_set",
        "Body": "{\r\n    var qosOptions = new FileQoSOptions\r\n    {\r\n        TimeoutValue = 1,\r\n        ExceptionsAllowedBeforeBreaking = 1\r\n    };\r\n    this.Given(_ =\u003E GivenThe(qosOptions)).And(_ =\u003E GivenAQosDelegate()).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_invalid_as_no_qos_delegate",
        "Body": "{\r\n    var qosOptions = new FileQoSOptions\r\n    {\r\n        TimeoutValue = 1,\r\n        ExceptionsAllowedBeforeBreaking = 1\r\n    };\r\n    this.Given(_ =\u003E GivenThe(qosOptions)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInValid()).And(_ =\u003E ThenTheErrorIs()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HostAndPortValidatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_be_valid_because_host_set",
        "Body": "{\r\n    var fileHostAndPort = new FileHostAndPort\r\n    {\r\n        Host = \u0022test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileHostAndPort)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeAutheHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "downstream_path_template_should_not_be_empty",
        "Body": "{\r\n    var fileRoute = new FileRoute();\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Downstream Path Template cannot be empty\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "upstream_path_template_should_not_be_empty",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Upstream Path Template cannot be empty\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "downstream_path_template_should_start_with_forward_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Downstream Path Template test doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "downstream_path_template_should_not_contain_double_forward_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022//test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Downstream Path Template //test contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "upstream_path_template_should_start_with_forward_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Upstream Path Template test doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "upstream_path_template_should_not_contain_double_forward_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022//test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Upstream Path Template //test contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_be_valid_if_enable_rate_limiting_true_and_period_is_empty",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        RateLimitOptions = new FileRateLimitRule\r\n        {\r\n            EnableRateLimiting = true\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022RateLimitOptions.Period is empty\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_be_valid_if_enable_rate_limiting_true_and_period_has_value",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        RateLimitOptions = new FileRateLimitRule\r\n        {\r\n            EnableRateLimiting = true,\r\n            Period = \u0022test\u0022\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022RateLimitOptions.Period does not contain integer then s (second), m (minute), h (hour), d (day) e.g. 1m for 1 minute period\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_be_valid_if_specified_authentication_provider_isnt_registered",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        AuthenticationOptions = new FileAuthenticationOptions\r\n        {\r\n            AuthenticationProviderKey = \u0022JwtLads\u0022\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains($\u0022Authentication Options AuthenticationProviderKey:JwtLads,AllowedScopes:[] is unsupported authentication provider\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_be_valid_if_not_using_service_discovery_and_no_host_and_ports",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022When not using service discovery DownstreamHostAndPorts must be set and not empty or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_valid_if_using_service_discovery_and_no_host_and_ports",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        ServiceName = \u0022Lads\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_valid_re_route_using_host_and_port_and_paths",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n        {\r\n            new FileHostAndPort\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = 5000\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_valid_if_specified_authentication_provider_is_registered",
        "Body": "{\r\n    const string key = \u0022JwtLads\u0022;\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        AuthenticationOptions = new FileAuthenticationOptions\r\n        {\r\n            AuthenticationProviderKey = key\r\n        },\r\n        DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n        {\r\n            new FileHostAndPort\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = 5000\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).And(_ =\u003E GivenAnAuthProvider(key)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RouteFluentValidatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "downstream_path_template_should_not_be_empty",
        "Body": "{\r\n    var fileRoute = new FileRoute();\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Downstream Path Template cannot be empty\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "upstream_path_template_should_not_be_empty",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Upstream Path Template cannot be empty\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "downstream_path_template_should_start_with_forward_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Downstream Path Template test doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "downstream_path_template_should_not_contain_double_forward_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022//test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Downstream Path Template //test contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "upstream_path_template_should_start_with_forward_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Upstream Path Template test doesnt start with forward slash\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "upstream_path_template_should_not_contain_double_forward_slash",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022//test\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022Upstream Path Template //test contains double forward slash, Ocelot does not support this at the moment. Please raise an issue in GitHib if you need this feature.\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_be_valid_if_enable_rate_limiting_true_and_period_is_empty",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        RateLimitOptions = new FileRateLimitRule\r\n        {\r\n            EnableRateLimiting = true\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022RateLimitOptions.Period is empty\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_be_valid_if_enable_rate_limiting_true_and_period_has_value",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        RateLimitOptions = new FileRateLimitRule\r\n        {\r\n            EnableRateLimiting = true,\r\n            Period = \u0022test\u0022\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022RateLimitOptions.Period does not contain integer then s (second), m (minute), h (hour), d (day) e.g. 1m for 1 minute period\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_be_valid_if_specified_authentication_provider_isnt_registered",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        AuthenticationOptions = new FileAuthenticationOptions\r\n        {\r\n            AuthenticationProviderKey = \u0022JwtLads\u0022\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains($\u0022Authentication Options AuthenticationProviderKey:JwtLads,AllowedScopes:[] is unsupported authentication provider\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_be_valid_if_not_using_service_discovery_and_no_host_and_ports",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsInvalid()).And(_ =\u003E ThenTheErrorsContains(\u0022When not using service discovery DownstreamHostAndPorts must be set and not empty or Ocelot cannot find your service!\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_valid_if_using_service_discovery_and_no_host_and_ports",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        ServiceName = \u0022Lads\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_valid_re_route_using_host_and_port_and_paths",
        "Body": "{\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n        {\r\n            new FileHostAndPort\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = 5000\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_valid_if_specified_authentication_provider_is_registered",
        "Body": "{\r\n    const string key = \u0022JwtLads\u0022;\r\n    var fileRoute = new FileRoute\r\n    {\r\n        DownstreamPathTemplate = \u0022/test\u0022,\r\n        UpstreamPathTemplate = \u0022/test\u0022,\r\n        AuthenticationOptions = new FileAuthenticationOptions\r\n        {\r\n            AuthenticationProviderKey = key\r\n        },\r\n        DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n        {\r\n            new FileHostAndPort\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = 5000\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThe(fileRoute)).And(_ =\u003E GivenAnAuthProvider(key)).When(_ =\u003E WhenIValidate()).Then(_ =\u003E ThenTheResultIsValid()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "VersionCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_version_based_on_input",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheInput(\u00222.0\u0022)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheResultIs(2, 0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_default_to_version_one_point_one",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheInput(\u0022\u0022)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheResultIs(1, 1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConsulFileConfigurationRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_set_config",
        "Body": "{\r\n    var config = FakeFileConfiguration();\r\n    this.Given(_ =\u003E GivenIHaveAConfiguration(config)).And(_ =\u003E GivenWritingToConsulSucceeds()).When(_ =\u003E WhenISetTheConfiguration()).Then(_ =\u003E ThenTheConfigurationIsStoredAs(config)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_config",
        "Body": "{\r\n    var config = FakeFileConfiguration();\r\n    this.Given(_ =\u003E GivenIHaveAConfiguration(config)).And(_ =\u003E GivenFetchFromConsulSucceeds()).When(_ =\u003E WhenIGetTheConfiguration()).Then(_ =\u003E ThenTheConfigurationIs(config)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_null_config",
        "Body": "{\r\n    var config = FakeFileConfiguration();\r\n    this.Given(_ =\u003E GivenIHaveAConfiguration(config)).Given(_ =\u003E GivenFetchFromConsulReturnsNull()).When(_ =\u003E WhenIGetTheConfiguration()).Then(_ =\u003E ThenTheConfigurationIsNull()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_config_from_cache",
        "Body": "{\r\n    var config = FakeFileConfiguration();\r\n    this.Given(_ =\u003E GivenIHaveAConfiguration(config)).And(_ =\u003E GivenFetchFromCacheSucceeds()).When(_ =\u003E WhenIGetTheConfiguration()).Then(_ =\u003E ThenTheConfigurationIs(config)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_config_key",
        "Body": "{\r\n    var config = FakeFileConfiguration();\r\n    this.Given(_ =\u003E GivenIHaveAConfiguration(config)).And(_ =\u003E GivenTheConfigKeyComesFromFileConfig(\u0022Tom\u0022)).And(_ =\u003E GivenFetchFromConsulSucceeds()).When(_ =\u003E WhenIGetTheConfiguration()).And(_ =\u003E ThenTheConfigKeyIs(\u0022Tom\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_default_config_key",
        "Body": "{\r\n    var config = FakeFileConfiguration();\r\n    this.Given(_ =\u003E GivenIHaveAConfiguration(config)).And(_ =\u003E GivenFetchFromConsulSucceeds()).When(_ =\u003E WhenIGetTheConfiguration()).And(_ =\u003E ThenTheConfigKeyIs(\u0022InternalConfiguration\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConsulServiceDiscoveryProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_service_from_consul",
        "Body": "{\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = _serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = 50881,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(_fakeConsulServiceDiscoveryUrl, _serviceName)).And(x =\u003E GivenTheServicesAreRegisteredWithConsul(serviceEntryOne)).When(x =\u003E WhenIGetTheServices()).Then(x =\u003E ThenTheCountIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_token",
        "Body": "{\r\n    var token = \u0022test token\u0022;\r\n    var config = new ConsulRegistryConfiguration(_consulScheme, _consulHost, _port, _serviceName, token);\r\n    _provider = new Consul(config, _factory.Object, _clientFactory);\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = _serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = 50881,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0],\r\n        },\r\n    };\r\n    this.Given(_ =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(_fakeConsulServiceDiscoveryUrl, _serviceName)).And(_ =\u003E GivenTheServicesAreRegisteredWithConsul(serviceEntryOne)).When(_ =\u003E WhenIGetTheServices()).Then(_ =\u003E ThenTheCountIs(1)).And(_ =\u003E ThenTheTokenIs(token)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_services_with_invalid_address",
        "Body": "{\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = _serviceName,\r\n            Address = \u0022http://localhost\u0022,\r\n            Port = 50881,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var serviceEntryTwo = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = _serviceName,\r\n            Address = \u0022http://localhost\u0022,\r\n            Port = 50888,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(_fakeConsulServiceDiscoveryUrl, _serviceName)).And(x =\u003E GivenTheServicesAreRegisteredWithConsul(serviceEntryOne, serviceEntryTwo)).When(x =\u003E WhenIGetTheServices()).Then(x =\u003E ThenTheCountIs(0)).And(x =\u003E ThenTheLoggerHasBeenCalledCorrectlyForInvalidAddress()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_services_with_empty_address",
        "Body": "{\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = _serviceName,\r\n            Address = \u0022\u0022,\r\n            Port = 50881,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var serviceEntryTwo = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = _serviceName,\r\n            Address = null,\r\n            Port = 50888,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(_fakeConsulServiceDiscoveryUrl, _serviceName)).And(x =\u003E GivenTheServicesAreRegisteredWithConsul(serviceEntryOne, serviceEntryTwo)).When(x =\u003E WhenIGetTheServices()).Then(x =\u003E ThenTheCountIs(0)).And(x =\u003E ThenTheLoggerHasBeenCalledCorrectlyForEmptyAddress()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_services_with_invalid_port",
        "Body": "{\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = _serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = -1,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var serviceEntryTwo = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = _serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = 0,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(_fakeConsulServiceDiscoveryUrl, _serviceName)).And(x =\u003E GivenTheServicesAreRegisteredWithConsul(serviceEntryOne, serviceEntryTwo)).When(x =\u003E WhenIGetTheServices()).Then(x =\u003E ThenTheCountIs(0)).And(x =\u003E ThenTheLoggerHasBeenCalledCorrectlyForInvalidPorts()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotBuilderExtensionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_set_up_consul",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E WhenISetUpConsul()).Then(x =\u003E ThenAnExceptionIsntThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PollingConsulServiceDiscoveryProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_service_from_consul",
        "Body": "{\r\n    var service = new Service(\u0022\u0022, new ServiceHostAndPort(\u0022\u0022, 0), \u0022\u0022, \u0022\u0022, new List\u003Cstring\u003E());\r\n    this.Given(x =\u003E GivenConsulReturns(service)).When(x =\u003E WhenIGetTheServices(1)).Then(x =\u003E ThenTheCountIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ProviderFactoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_ConsulServiceDiscoveryProvider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022\u0022).Build();\r\n    var provider = ConsulProviderFactory.Get(_provider, new ServiceProviderConfiguration(\u0022\u0022, \u0022\u0022, \u0022\u0022, 1, \u0022\u0022, \u0022\u0022, 1), route);\r\n    provider.ShouldBeOfType\u003CConsul\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_PollingConsulServiceDiscoveryProvider",
        "Body": "{\r\n    var stopsPollerFromPolling = 10000;\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022\u0022).Build();\r\n    var provider = ConsulProviderFactory.Get(_provider, new ServiceProviderConfiguration(\u0022pollconsul\u0022, \u0022http\u0022, \u0022\u0022, 1, \u0022\u0022, \u0022\u0022, stopsPollerFromPolling), route);\r\n    var pollProvider = provider as PollConsul;\r\n    pollProvider.ShouldNotBeNull();\r\n    pollProvider.Dispose();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeError",
    "Message": null,
    "Methods": [
      {
        "Name": "should_get_file_configuration",
        "Body": "{\r\n    var expected = new Responses.OkResponse\u003CFileConfiguration\u003E(new FileConfiguration());\r\n    this.Given(x =\u003E x.GivenTheGetConfigurationReturns(expected)).When(x =\u003E x.WhenIGetTheFileConfiguration()).Then(x =\u003E x.TheTheGetFileConfigurationIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_cannot_get_config",
        "Body": "{\r\n    var expected = new Responses.ErrorResponse\u003CFileConfiguration\u003E(It.IsAny\u003CError\u003E());\r\n    this.Given(x =\u003E x.GivenTheGetConfigurationReturns(expected)).When(x =\u003E x.WhenIGetTheFileConfiguration()).Then(x =\u003E x.TheTheGetFileConfigurationIsCalledCorrectly()).And(x =\u003E x.ThenTheResponseIs\u003CBadRequestObjectResult\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_post_file_configuration",
        "Body": "{\r\n    var expected = new FileConfiguration();\r\n    this.Given(x =\u003E GivenTheFileConfiguration(expected)).And(x =\u003E GivenTheConfigSetterReturns(new OkResponse())).When(x =\u003E WhenIPostTheFileConfiguration()).Then(x =\u003E x.ThenTheConfigrationSetterIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_cannot_set_config",
        "Body": "{\r\n    var expected = new FileConfiguration();\r\n    this.Given(x =\u003E GivenTheFileConfiguration(expected)).And(x =\u003E GivenTheConfigSetterReturns(new ErrorResponse(new FakeError()))).When(x =\u003E WhenIPostTheFileConfiguration()).Then(x =\u003E x.ThenTheConfigrationSetterIsCalledCorrectly()).And(x =\u003E ThenTheResponseIs\u003CBadRequestObjectResult\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FileConfigurationControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_get_file_configuration",
        "Body": "{\r\n    var expected = new Responses.OkResponse\u003CFileConfiguration\u003E(new FileConfiguration());\r\n    this.Given(x =\u003E x.GivenTheGetConfigurationReturns(expected)).When(x =\u003E x.WhenIGetTheFileConfiguration()).Then(x =\u003E x.TheTheGetFileConfigurationIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_cannot_get_config",
        "Body": "{\r\n    var expected = new Responses.ErrorResponse\u003CFileConfiguration\u003E(It.IsAny\u003CError\u003E());\r\n    this.Given(x =\u003E x.GivenTheGetConfigurationReturns(expected)).When(x =\u003E x.WhenIGetTheFileConfiguration()).Then(x =\u003E x.TheTheGetFileConfigurationIsCalledCorrectly()).And(x =\u003E x.ThenTheResponseIs\u003CBadRequestObjectResult\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_post_file_configuration",
        "Body": "{\r\n    var expected = new FileConfiguration();\r\n    this.Given(x =\u003E GivenTheFileConfiguration(expected)).And(x =\u003E GivenTheConfigSetterReturns(new OkResponse())).When(x =\u003E WhenIPostTheFileConfiguration()).Then(x =\u003E x.ThenTheConfigrationSetterIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_cannot_set_config",
        "Body": "{\r\n    var expected = new FileConfiguration();\r\n    this.Given(x =\u003E GivenTheFileConfiguration(expected)).And(x =\u003E GivenTheConfigSetterReturns(new ErrorResponse(new FakeError()))).When(x =\u003E WhenIPostTheFileConfiguration()).Then(x =\u003E x.ThenTheConfigrationSetterIsCalledCorrectly()).And(x =\u003E ThenTheResponseIs\u003CBadRequestObjectResult\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OutputCacheControllerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_delete_key",
        "Body": "{\r\n    this.When(_ =\u003E WhenIDeleteTheKey(\u0022a\u0022)).Then(_ =\u003E ThenTheKeyIsDeleted(\u0022a\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigurationBuilderExtensionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_base_url_to_config",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheBaseUrl(\u0022test\u0022)).When(_ =\u003E WhenIGet(\u0022BaseUrl\u0022)).Then(_ =\u003E ThenTheResultIs(\u0022test\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_merge_files",
        "Body": "{\r\n    this.Given(_ =\u003E GivenMultipleConfigurationFiles(\u0022\u0022, false)).And(_ =\u003E GivenTheEnvironmentIs(null)).When(_ =\u003E WhenIAddOcelotConfiguration()).Then(_ =\u003E ThenTheConfigsAreMerged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_merge_files_except_env",
        "Body": "{\r\n    this.Given(_ =\u003E GivenMultipleConfigurationFiles(\u0022\u0022, true)).And(_ =\u003E GivenTheEnvironmentIs(\u0022Env\u0022)).When(_ =\u003E WhenIAddOcelotConfiguration()).Then(_ =\u003E ThenTheConfigsAreMerged()).And(_ =\u003E NotContainsEnvSpecificConfig()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_merge_files_in_specific_folder",
        "Body": "{\r\n    string configFolder = \u0022ConfigFiles\u0022;\r\n    this.Given(_ =\u003E GivenMultipleConfigurationFiles(configFolder, false)).When(_ =\u003E WhenIAddOcelotConfigurationWithSpecificFolder(configFolder)).Then(_ =\u003E ThenTheConfigsAreMerged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeCustomLoadBalancer",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_specific_delegating_handlers_transient",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddSpecificTransientDelegatingHandler\u003CFakeDelegatingHandler\u003E()).And(x =\u003E AddSpecificTransientDelegatingHandler\u003CFakeDelegatingHandlerTwo\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsSpecificHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E ThenTheSpecificHandlersAreTransient()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_type_specific_delegating_handlers_transient",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddTypeSpecificTransientDelegatingHandler(typeof(FakeDelegatingHandler))).And(x =\u003E AddTypeSpecificTransientDelegatingHandler(typeof(FakeDelegatingHandlerTwo))).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsSpecificHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E ThenTheSpecificHandlersAreTransient()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_global_delegating_handlers_transient",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddTransientGlobalDelegatingHandler\u003CFakeDelegatingHandler\u003E()).And(x =\u003E AddTransientGlobalDelegatingHandler\u003CFakeDelegatingHandlerTwo\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E ThenTheGlobalHandlersAreTransient()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_global_type_delegating_handlers_transient",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddTransientGlobalDelegatingHandler\u003CFakeDelegatingHandler\u003E()).And(x =\u003E AddTransientGlobalDelegatingHandler\u003CFakeDelegatingHandlerTwo\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E ThenTheGlobalHandlersAreTransient()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_up_services",
        "Body": "{\r\n    this.When(x =\u003E WhenISetUpOcelotServices()).Then(x =\u003E ThenAnExceptionIsntThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_ocelot_builder",
        "Body": "{\r\n    this.When(x =\u003E WhenISetUpOcelotServices()).Then(x =\u003E ThenAnOcelotBuilderIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_logger_factory",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E WhenIValidateScopes()).When(x =\u003E WhenIAccessLoggerFactory()).Then(x =\u003E ThenAnExceptionIsntThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_up_without_passing_in_config",
        "Body": "{\r\n    this.When(x =\u003E WhenISetUpOcelotServicesWithoutConfig()).Then(x =\u003E ThenAnExceptionIsntThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_singleton_defined_aggregators",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddSingletonDefinedAggregator\u003CTestDefinedAggregator\u003E()).When(x =\u003E AddSingletonDefinedAggregator\u003CTestDefinedAggregator\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsSpecificAggregators\u003CTestDefinedAggregator, TestDefinedAggregator\u003E()).And(x =\u003E ThenTheAggregatorsAreSingleton\u003CTestDefinedAggregator, TestDefinedAggregator\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_transient_defined_aggregators",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddTransientDefinedAggregator\u003CTestDefinedAggregator\u003E()).When(x =\u003E AddTransientDefinedAggregator\u003CTestDefinedAggregator\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsSpecificAggregators\u003CTestDefinedAggregator, TestDefinedAggregator\u003E()).And(x =\u003E ThenTheAggregatorsAreTransient\u003CTestDefinedAggregator, TestDefinedAggregator\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators_by_default_ctor",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer\u003CFakeCustomLoadBalancer\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators_by_factory_method",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer(() =\u003E new FakeCustomLoadBalancer())).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators_by_di_factory_method",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer(provider =\u003E new FakeCustomLoadBalancer())).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators_by_factory_method_with_arguments",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer((route, discoveryProvider) =\u003E new FakeCustomLoadBalancer())).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_iplaceholder",
        "Body": "{\r\n    this.Given(x =\u003E x.WhenISetUpOcelotServices()).When(x =\u003E AddConfigPlaceholders()).Then(x =\u003E ThenAnExceptionIsntThrown()).And(x =\u003E ThenTheIPlaceholderInstanceIsReplaced()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer((provider, route, discoveryProvider) =\u003E new FakeCustomLoadBalancer())).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotBuilderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_specific_delegating_handlers_transient",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddSpecificTransientDelegatingHandler\u003CFakeDelegatingHandler\u003E()).And(x =\u003E AddSpecificTransientDelegatingHandler\u003CFakeDelegatingHandlerTwo\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsSpecificHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E ThenTheSpecificHandlersAreTransient()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_type_specific_delegating_handlers_transient",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddTypeSpecificTransientDelegatingHandler(typeof(FakeDelegatingHandler))).And(x =\u003E AddTypeSpecificTransientDelegatingHandler(typeof(FakeDelegatingHandlerTwo))).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsSpecificHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E ThenTheSpecificHandlersAreTransient()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_global_delegating_handlers_transient",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddTransientGlobalDelegatingHandler\u003CFakeDelegatingHandler\u003E()).And(x =\u003E AddTransientGlobalDelegatingHandler\u003CFakeDelegatingHandlerTwo\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E ThenTheGlobalHandlersAreTransient()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_global_type_delegating_handlers_transient",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddTransientGlobalDelegatingHandler\u003CFakeDelegatingHandler\u003E()).And(x =\u003E AddTransientGlobalDelegatingHandler\u003CFakeDelegatingHandlerTwo\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E ThenTheGlobalHandlersAreTransient()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_up_services",
        "Body": "{\r\n    this.When(x =\u003E WhenISetUpOcelotServices()).Then(x =\u003E ThenAnExceptionIsntThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_ocelot_builder",
        "Body": "{\r\n    this.When(x =\u003E WhenISetUpOcelotServices()).Then(x =\u003E ThenAnOcelotBuilderIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_logger_factory",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E WhenIValidateScopes()).When(x =\u003E WhenIAccessLoggerFactory()).Then(x =\u003E ThenAnExceptionIsntThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_up_without_passing_in_config",
        "Body": "{\r\n    this.When(x =\u003E WhenISetUpOcelotServicesWithoutConfig()).Then(x =\u003E ThenAnExceptionIsntThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_singleton_defined_aggregators",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddSingletonDefinedAggregator\u003CTestDefinedAggregator\u003E()).When(x =\u003E AddSingletonDefinedAggregator\u003CTestDefinedAggregator\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsSpecificAggregators\u003CTestDefinedAggregator, TestDefinedAggregator\u003E()).And(x =\u003E ThenTheAggregatorsAreSingleton\u003CTestDefinedAggregator, TestDefinedAggregator\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_transient_defined_aggregators",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E AddTransientDefinedAggregator\u003CTestDefinedAggregator\u003E()).When(x =\u003E AddTransientDefinedAggregator\u003CTestDefinedAggregator\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsSpecificAggregators\u003CTestDefinedAggregator, TestDefinedAggregator\u003E()).And(x =\u003E ThenTheAggregatorsAreTransient\u003CTestDefinedAggregator, TestDefinedAggregator\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators_by_default_ctor",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer\u003CFakeCustomLoadBalancer\u003E()).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators_by_factory_method",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer(() =\u003E new FakeCustomLoadBalancer())).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators_by_di_factory_method",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer(provider =\u003E new FakeCustomLoadBalancer())).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators_by_factory_method_with_arguments",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer((route, discoveryProvider) =\u003E new FakeCustomLoadBalancer())).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_iplaceholder",
        "Body": "{\r\n    this.Given(x =\u003E x.WhenISetUpOcelotServices()).When(x =\u003E AddConfigPlaceholders()).Then(x =\u003E ThenAnExceptionIsntThrown()).And(x =\u003E ThenTheIPlaceholderInstanceIsReplaced()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_custom_load_balancer_creators",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E _ocelotBuilder.AddCustomLoadBalancer((provider, route, discoveryProvider) =\u003E new FakeCustomLoadBalancer())).Then(x =\u003E ThenTheProviderIsRegisteredAndReturnsBothBuiltInAndCustomLoadBalancerCreators()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ChangeDownstreamPathTemplateTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_change_downstream_path_request",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022),\r\n    };\r\n    var placeHolderValues = new List\u003CPlaceholderNameAndValue\u003E();\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022path-key\u0022, \u0022\u0022, \u0022\u0022, 0), })).And(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenDownstreamPathTemplate(\u0022/api/test/{path-key}\u0022)).And(x =\u003E x.GivenPlaceholderNameAndValues(placeHolderValues)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIChangeDownstreamPath()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenClaimDataIsContainedInPlaceHolder(\u0022{path-key}\u0022, \u0022value\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_existing_placeholder_value",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022),\r\n    };\r\n    var placeHolderValues = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{path-key}\u0022, \u0022old_value\u0022),\r\n    };\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022path-key\u0022, \u0022\u0022, \u0022\u0022, 0), })).And(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenDownstreamPathTemplate(\u0022/api/test/{path-key}\u0022)).And(x =\u003E x.GivenPlaceholderNameAndValues(placeHolderValues)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIChangeDownstreamPath()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenClaimDataIsContainedInPlaceHolder(\u0022{path-key}\u0022, \u0022value\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_no_placeholder_in_downstream_path",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022),\r\n    };\r\n    var placeHolderValues = new List\u003CPlaceholderNameAndValue\u003E();\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022path-key\u0022, \u0022\u0022, \u0022\u0022, 0), })).And(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenDownstreamPathTemplate(\u0022/api/test\u0022)).And(x =\u003E x.GivenPlaceholderNameAndValues(placeHolderValues)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIChangeDownstreamPath()).Then(x =\u003E x.ThenTheResultIsCouldNotFindPlaceholderError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_claim_parser_returns_error",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022),\r\n    };\r\n    var placeHolderValues = new List\u003CPlaceholderNameAndValue\u003E();\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022path-key\u0022, \u0022\u0022, \u0022\u0022, 0), })).And(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenDownstreamPathTemplate(\u0022/api/test/{path-key}\u0022)).And(x =\u003E x.GivenPlaceholderNameAndValues(placeHolderValues)).And(x =\u003E x.GivenTheClaimParserReturns(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new AnyError(), }))).When(x =\u003E x.WhenIChangeDownstreamPath()).Then(x =\u003E x.ThenTheResultIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimsToDownstreamPathMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_add_queries_correctly",
        "Body": "{\r\n    var downstreamRoute = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithClaimsToDownstreamPath(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022UserId\u0022, \u0022Subject\u0022, \u0022\u0022, 0), }).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E x.GivenTheChangeDownstreamPathReturnsOk()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenChangeDownstreamPathIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DownstreamRouteCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_downstream_route",
        "Body": "{\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDownstreamRouteIsCreated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_route_with_rate_limit_options",
        "Body": "{\r\n    var rateLimitOptions = new RateLimitOptionsBuilder().WithEnableRateLimiting(true).WithClientIdHeader(\u0022test\u0022).Build();\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithServiceName(\u0022auth\u0022).WithRateLimitOptions(rateLimitOptions).Build();\r\n    var route = new RouteBuilder().WithDownstreamRoute(downstreamRoute).Build();\r\n    var routes = new List\u003CRoute\u003E\r\n    {\r\n        route\r\n    };\r\n    var configuration = new InternalConfiguration(routes, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDownstreamRouteIsCreated()).And(_ =\u003E WithRateLimitOptions(rateLimitOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_cache_downstream_route",
        "Body": "{\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration, \u0022/geoffisthebest/\u0022)).When(_ =\u003E WhenICreate()).And(_ =\u003E GivenTheConfiguration(configuration, \u0022/geoffisthebest/\u0022)).When(_ =\u003E WhenICreateAgain()).Then(_ =\u003E ThenTheDownstreamRoutesAreTheSameReference()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_cache_downstream_route",
        "Body": "{\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration, \u0022/geoffistheworst/\u0022)).When(_ =\u003E WhenICreate()).And(_ =\u003E GivenTheConfiguration(configuration, \u0022/geoffisthebest/\u0022)).When(_ =\u003E WhenICreateAgain()).Then(_ =\u003E ThenTheDownstreamRoutesAreTheNotSameReference()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_route_with_no_path",
        "Body": "{\r\n    var upstreamUrlPath = \u0022/auth/\u0022;\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration, upstreamUrlPath)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDownstreamPathIsForwardSlash()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_route_with_only_first_segment_no_traling_slash",
        "Body": "{\r\n    var upstreamUrlPath = \u0022/auth\u0022;\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration, upstreamUrlPath)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDownstreamPathIsForwardSlash()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_route_with_segments_no_traling_slash",
        "Body": "{\r\n    var upstreamUrlPath = \u0022/auth/test\u0022;\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration, upstreamUrlPath)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenThePathDoesNotHaveTrailingSlash()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_route_and_remove_query_string",
        "Body": "{\r\n    var upstreamUrlPath = \u0022/auth/test?test=1\u0026best=2\u0022;\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration, upstreamUrlPath)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheQueryStringIsRemoved()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_route_for_sticky_sessions",
        "Body": "{\r\n    var loadBalancerOptions = new LoadBalancerOptionsBuilder().WithType(nameof(CookieStickySessions)).WithKey(\u0022boom\u0022).WithExpiryInMs(1).Build();\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheStickySessionLoadBalancerIsUsed(loadBalancerOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_route_with_qos",
        "Body": "{\r\n    var qoSOptions = new QoSOptionsBuilder().WithExceptionsAllowedBeforeBreaking(1).WithTimeoutValue(1).Build();\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration)).And(_ =\u003E GivenTheQosCreatorReturns(qoSOptions)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheQosOptionsAreSet(qoSOptions)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_downstream_route_with_handler_options",
        "Body": "{\r\n    var configuration = new InternalConfiguration(null, \u0022doesnt matter\u0022, null, \u0022doesnt matter\u0022, _loadBalancerOptions, \u0022http\u0022, _qoSOptions, _handlerOptions, new Version(\u00221.1\u0022));\r\n    this.Given(_ =\u003E GivenTheConfiguration(configuration)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheHandlerOptionsAreSet()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DownstreamRouteFinderMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_scoped_data_repository_correctly",
        "Body": "{\r\n    var config = new InternalConfiguration(null, null, new ServiceProviderConfigurationBuilder().Build(), \u0022\u0022, new LoadBalancerOptionsBuilder().Build(), \u0022\u0022, new QoSOptionsBuilder().Build(), new HttpHandlerOptionsBuilder().Build(), new Version(\u00221.1\u0022));\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteFinderReturns(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(downstreamRoute).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).And(x =\u003E GivenTheFollowingConfig(config)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheScopedDataRepositoryIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DownstreamRouteFinderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_highest_priority_when_first",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022someUpstreamPath\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 0, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 0, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Post\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).Build()).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).Build()))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_highest_priority_when_lowest",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022someUpstreamPath\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 0, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 0, false, \u0022someUpstreamPath\u0022)).Build(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Post\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).Build()).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022test\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).Build()))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_route",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022matchInUrlMatcher/\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()))).And(x =\u003E x.ThenTheUrlMatcherIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_append_slash_to_upstream_url_path",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022matchInUrlMatcher\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()))).And(x =\u003E x.ThenTheUrlMatcherIsCalledCorrectly(\u0022matchInUrlMatcher\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_route_if_upstream_path_and_upstream_template_are_the_same",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022someUpstreamPath\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_correct_route_for_http_verb",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022someUpstreamPath\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPathForAPost\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Post\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPathForAPost\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_route",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022dontMatchPath/\u0022)).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022somPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022somePath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022somePath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build(), }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(false)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheUrlMatcherIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_correct_route_for_http_verb_setting_multiple_upstream_http_method",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022someUpstreamPath\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022, \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022, \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Post\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_correct_route_for_http_verb_setting_all_upstream_http_method",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022someUpstreamPath\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E()).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E()).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Post\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_route_for_http_verb_not_setting_in_upstream_http_method",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022someUpstreamPath\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022, \u0022Patch\u0022, \u0022Delete\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022, \u0022Patch\u0022, \u0022Delete\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Post\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheUrlMatcherIsNotCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_route_when_host_matches",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022matchInUrlMatcher/\u0022)).And(x =\u003E GivenTheUpstreamHostIs(\u0022MATCH\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHost(\u0022MATCH\u0022).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()))).And(x =\u003E x.ThenTheUrlMatcherIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_route_when_upstreamhost_is_null",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022matchInUrlMatcher/\u0022)).And(x =\u003E GivenTheUpstreamHostIs(\u0022MATCH\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()))).And(x =\u003E x.ThenTheUrlMatcherIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_route_when_host_doesnt_match",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022matchInUrlMatcher/\u0022)).And(x =\u003E GivenTheUpstreamHostIs(\u0022DONTMATCH\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHost(\u0022MATCH\u0022).Build(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { }) // empty list of methods\r\n    .WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { }) // empty list of methods\r\n    .WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHost(\u0022MATCH\u0022).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheUrlMatcherIsNotCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_route_when_host_doesnt_match_with_empty_upstream_http_method",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022matchInUrlMatcher/\u0022)).And(x =\u003E GivenTheUpstreamHostIs(\u0022DONTMATCH\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E()).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E()).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHost(\u0022MATCH\u0022).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheUrlMatcherIsNotCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_route_when_host_does_match_with_empty_upstream_http_method",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022matchInUrlMatcher/\u0022)).And(x =\u003E GivenTheUpstreamHostIs(\u0022MATCH\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E()).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E()).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHost(\u0022MATCH\u0022).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).And(x =\u003E x.ThenTheUrlMatcherIsCalledCorrectly(1, 0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_route_when_host_matches_but_null_host_on_same_path_first",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenThereIsAnUpstreamUrlPath(\u0022matchInUrlMatcher/\u0022)).And(x =\u003E GivenTheUpstreamHostIs(\u0022MATCH\u0022)).And(x =\u003E x.GivenTheTemplateVariableAndNameFinderReturns(new OkResponse\u003CList\u003CPlaceholderNameAndValue\u003E\u003E(new List\u003CPlaceholderNameAndValue\u003E()))).And(x =\u003E x.GivenTheConfigurationIs(new List\u003CRoute\u003E { new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022THENULLPATH\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022someUpstreamPath\u0022)).WithUpstreamHost(\u0022MATCH\u0022).Build() }, string.Empty, serviceProviderConfig)).And(x =\u003E x.GivenTheUrlMatcherReturns(new OkResponse\u003CUrlMatch\u003E(new UrlMatch(true)))).And(x =\u003E x.GivenTheUpstreamHttpMethodIs(\u0022Get\u0022)).When(x =\u003E x.WhenICallTheFinder()).Then(x =\u003E x.ThenTheFollowingIsReturned(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022someDownstreamPath\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022test\u0022)).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022someUpstreamPath\u0022, 1, false, \u0022test\u0022)).Build()))).And(x =\u003E x.ThenTheUrlMatcherIsCalledCorrectly(1, 0)).And(x =\u003E x.ThenTheUrlMatcherIsCalledCorrectly(1, 1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DownstreamRouteProviderFactoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_downstream_route_finder",
        "Body": "{\r\n    var routes = new List\u003CRoute\u003E\r\n    {\r\n        new RouteBuilder().Build()\r\n    };\r\n    this.Given(_ =\u003E GivenTheRoutes(routes)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheResultShouldBe\u003CDownstreamRouteFinder\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_downstream_route_finder_when_not_dynamic_re_route_and_service_discovery_on",
        "Body": "{\r\n    var spConfig = new ServiceProviderConfigurationBuilder().WithScheme(\u0022http\u0022).WithHost(\u0022test\u0022).WithPort(50).WithType(\u0022test\u0022).Build();\r\n    var routes = new List\u003CRoute\u003E\r\n    {\r\n        new RouteBuilder().WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022woot\u0022).Build()).Build()\r\n    };\r\n    this.Given(_ =\u003E GivenTheRoutes(routes, spConfig)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheResultShouldBe\u003CDownstreamRouteFinder\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_downstream_route_finder_as_no_service_discovery_given_no_scheme",
        "Body": "{\r\n    var spConfig = new ServiceProviderConfigurationBuilder().WithScheme(\u0022\u0022).WithHost(\u0022test\u0022).WithPort(50).Build();\r\n    var routes = new List\u003CRoute\u003E();\r\n    this.Given(_ =\u003E GivenTheRoutes(routes, spConfig)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheResultShouldBe\u003CDownstreamRouteFinder\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_downstream_route_finder_as_no_service_discovery_given_no_host",
        "Body": "{\r\n    var spConfig = new ServiceProviderConfigurationBuilder().WithScheme(\u0022http\u0022).WithHost(\u0022\u0022).WithPort(50).Build();\r\n    var routes = new List\u003CRoute\u003E();\r\n    this.Given(_ =\u003E GivenTheRoutes(routes, spConfig)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheResultShouldBe\u003CDownstreamRouteFinder\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_downstream_route_finder_given_no_service_discovery_port",
        "Body": "{\r\n    var spConfig = new ServiceProviderConfigurationBuilder().WithScheme(\u0022http\u0022).WithHost(\u0022localhost\u0022).WithPort(0).Build();\r\n    var routes = new List\u003CRoute\u003E();\r\n    this.Given(_ =\u003E GivenTheRoutes(routes, spConfig)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheResultShouldBe\u003CDownstreamRouteFinder\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_downstream_route_finder_given_no_service_discovery_type",
        "Body": "{\r\n    var spConfig = new ServiceProviderConfigurationBuilder().WithScheme(\u0022http\u0022).WithHost(\u0022localhost\u0022).WithPort(50).WithType(\u0022\u0022).Build();\r\n    var routes = new List\u003CRoute\u003E();\r\n    this.Given(_ =\u003E GivenTheRoutes(routes, spConfig)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheResultShouldBe\u003CDownstreamRouteFinder\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_downstream_route_creator",
        "Body": "{\r\n    var spConfig = new ServiceProviderConfigurationBuilder().WithScheme(\u0022http\u0022).WithHost(\u0022test\u0022).WithPort(50).WithType(\u0022test\u0022).Build();\r\n    var routes = new List\u003CRoute\u003E();\r\n    this.Given(_ =\u003E GivenTheRoutes(routes, spConfig)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheResultShouldBe\u003CDownstreamRouteCreator\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_downstream_route_creator_with_dynamic_re_route",
        "Body": "{\r\n    var spConfig = new ServiceProviderConfigurationBuilder().WithScheme(\u0022http\u0022).WithHost(\u0022test\u0022).WithPort(50).WithType(\u0022test\u0022).Build();\r\n    var routes = new List\u003CRoute\u003E\r\n    {\r\n        new RouteBuilder().Build()\r\n    };\r\n    this.Given(_ =\u003E GivenTheRoutes(routes, spConfig)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheResultShouldBe\u003CDownstreamRouteCreator\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RegExUrlMatcherTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_match",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/api/v1/aaaaaaaaa/cards\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^(?i)/api/v[^/]\u002B/cards$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsFalse()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/api/v1/cards\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^(?i)/api/v[^/]\u002B/cards$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_path_with_no_query_string",
        "Body": "{\r\n    const string regExForwardSlashAndOnePlaceHolder = \u0022^(?i)/newThing$\u0022;\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/newThing\u0022)).And(_ =\u003E GivenIHaveAQueryString(\u0022?DeviceType=IphoneApp\u0026Browser=moonpigIphone\u0026BrowserString=-\u0026CountryCode=123\u0026DeviceName=iPhone 5 (GSM\u002BCDMA)\u0026OperatingSystem=iPhone OS 7.1.2\u0026BrowserVersion=3708AdHoc\u0026ipAddress=-\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(regExForwardSlashAndOnePlaceHolder)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_query_string",
        "Body": "{\r\n    const string regExForwardSlashAndOnePlaceHolder = \u0022^(?i)/api/subscriptions/[^/]\u002B/updates\\\\?unitId=.\u002B$\u0022;\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/api/subscriptions/1/updates\u0022)).And(_ =\u003E GivenIHaveAQueryString(\u0022?unitId=2\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(regExForwardSlashAndOnePlaceHolder)).And(_ =\u003E GivenThereIsAQueryInTemplate()).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_query_string_with_multiple_params",
        "Body": "{\r\n    const string regExForwardSlashAndOnePlaceHolder = \u0022^(?i)/api/subscriptions/[^/]\u002B/updates\\\\?unitId=.\u002B\u0026productId=.\u002B$\u0022;\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/api/subscriptions/1/updates?unitId=2\u0022)).And(_ =\u003E GivenIHaveAQueryString(\u0022?unitId=2\u0026productId=2\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(regExForwardSlashAndOnePlaceHolder)).And(_ =\u003E GivenThereIsAQueryInTemplate()).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_match_slash_becaue_we_need_to_match_something_after_it",
        "Body": "{\r\n    const string regExForwardSlashAndOnePlaceHolder = \u0022^/[0-9a-zA-Z].\u002B\u0022;\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(regExForwardSlashAndOnePlaceHolder)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsFalse()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_match_forward_slash_only_regex",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/working/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^/$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsFalse()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_match_issue_134",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/api/vacancy/1/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^(?i)/vacancy/[^/]\u002B/$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsFalse()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_forward_slash_only_regex",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^/$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_find_match_when_template_smaller_than_valid_path",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/api/products/2354325435624623464235\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^/api/products/.\u002B$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_find_match",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/api/values\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^/$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsFalse()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).And(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_no_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^api$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_one_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^api/$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^api/product/products/$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_one_place_holder",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^api/product/products/.\u002B$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_two_place_holders",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1/2\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^api/product/products/[^/]\u002B/.\u002B$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_two_place_holders_seperated_by_something",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1/categories/2\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^api/product/products/[^/]\u002B/categories/.\u002B$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_three_place_holders_seperated_by_something",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1/categories/2/variant/123\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^api/product/products/[^/]\u002B/categories/[^/]\u002B/variant/.\u002B$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_three_place_holders",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1/categories/2/variant/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^api/product/products/[^/]\u002B/categories/[^/]\u002B/variant/$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_ignore_case_sensitivity",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022API/product/products/1/categories/2/variant/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^(?i)api/product/products/[^/]\u002B/categories/[^/]\u002B/variant/$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsTrue()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_respect_case_sensitivity",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022API/product/products/1/categories/2/variant/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplatePattern(\u0022^api/product/products/[^/]\u002B/categories/[^/]\u002B/variant/$\u0022)).When(x =\u003E x.WhenIMatchThePaths()).Then(x =\u003E x.ThenTheResultIsFalse()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UrlPathPlaceholderNameAndValueFinderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "can_match_down_stream_url",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(new List\u003CPlaceholderNameAndValue\u003E())).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_nothing_then_placeholder_no_value_is_blank",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{url}\u0022, \u0022\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/{url}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_nothing_then_placeholder_value_is_test",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{url}\u0022, \u0022test\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/test\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/{url}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_everything_in_path_with_query",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{everything}\u0022, \u0022test/toot\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/test/toot\u0022)).And(x =\u003E GivenIHaveAQuery(\u0022?$filter=Name%20eq%20\u0027Sam\u0027\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/{everything}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_everything_in_path",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{everything}\u0022, \u0022test/toot\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/test/toot\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/{everything}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_forward_slash_then_placeholder_no_value_is_blank",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{url}\u0022, \u0022\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/{url}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_forward_slash",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_forward_slash_then_placeholder_then_another_value",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{url}\u0022, \u00221\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/1/products\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/{url}/products\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_find_anything",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/products\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/products/\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(new List\u003CPlaceholderNameAndValue\u003E())).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_find_query_string",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/products\u0022)).And(x =\u003E x.GivenIHaveAQuery(\u0022?productId=1\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/products?productId={productId}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_find_query_string_dont_include_hardcoded",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/products\u0022)).And(x =\u003E x.GivenIHaveAQuery(\u0022?productId=1\u0026categoryId=2\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/products?productId={productId}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_find_multiple_query_string",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022),\r\n        new PlaceholderNameAndValue(\u0022{categoryId}\u0022, \u00222\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/products\u0022)).And(x =\u003E x.GivenIHaveAQuery(\u0022?productId=1\u0026categoryId=2\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/products?productId={productId}\u0026categoryId={categoryId}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_find_multiple_query_string_and_path",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022),\r\n        new PlaceholderNameAndValue(\u0022{categoryId}\u0022, \u00222\u0022),\r\n        new PlaceholderNameAndValue(\u0022{account}\u0022, \u00223\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/products/3\u0022)).And(x =\u003E x.GivenIHaveAQuery(\u0022?productId=1\u0026categoryId=2\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/products/{account}?productId={productId}\u0026categoryId={categoryId}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_find_multiple_query_string_and_path_that_ends_with_slash",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022),\r\n        new PlaceholderNameAndValue(\u0022{categoryId}\u0022, \u00222\u0022),\r\n        new PlaceholderNameAndValue(\u0022{account}\u0022, \u00223\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022/products/3/\u0022)).And(x =\u003E x.GivenIHaveAQuery(\u0022?productId=1\u0026categoryId=2\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022/products/{account}/?productId={productId}\u0026categoryId={categoryId}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_no_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022api\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(new List\u003CPlaceholderNameAndValue\u003E())).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_one_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022api/\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(new List\u003CPlaceholderNameAndValue\u003E())).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022api/product/products/\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(new List\u003CPlaceholderNameAndValue\u003E())).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_one_place_holder",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022api/product/products/{productId}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_two_place_holders",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022),\r\n        new PlaceholderNameAndValue(\u0022{categoryId}\u0022, \u00222\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1/2\u0022)).Given(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022api/product/products/{productId}/{categoryId}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_two_place_holders_seperated_by_something",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022),\r\n        new PlaceholderNameAndValue(\u0022{categoryId}\u0022, \u00222\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1/categories/2\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022api/product/products/{productId}/categories/{categoryId}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_three_place_holders_seperated_by_something",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022),\r\n        new PlaceholderNameAndValue(\u0022{categoryId}\u0022, \u00222\u0022),\r\n        new PlaceholderNameAndValue(\u0022{variantId}\u0022, \u0022123\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1/categories/2/variant/123\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022api/product/products/{productId}/categories/{categoryId}/variant/{variantId}\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_three_place_holders",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022),\r\n        new PlaceholderNameAndValue(\u0022{categoryId}\u0022, \u00222\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/1/categories/2/variant/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022api/product/products/{productId}/categories/{categoryId}/variant/\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_match_down_stream_url_with_downstream_template_with_place_holder_to_final_url_path",
        "Body": "{\r\n    var expectedTemplates = new List\u003CPlaceholderNameAndValue\u003E\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{finalUrlPath}\u0022, \u0022product/products/categories/\u0022),\r\n    };\r\n    this.Given(x =\u003E x.GivenIHaveAUpstreamPath(\u0022api/product/products/categories/\u0022)).And(x =\u003E x.GivenIHaveAnUpstreamUrlTemplate(\u0022api/{finalUrlPath}/\u0022)).When(x =\u003E x.WhenIFindTheUrlVariableNamesAndValues()).And(x =\u003E x.ThenTheTemplatesVariablesAre(expectedTemplates)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DownstreamUrlCreatorMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_replace_scheme_and_path",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithDownstreamScheme(\u0022https\u0022).Build();\r\n    var config = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(downstreamRoute).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://my.url/abc?q=123\u0022)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheUrlReplacerWillReturn(\u0022/api/products/1\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022https://my.url:80/api/products/1?q=123\u0022)).And(x =\u003E ThenTheQueryStringIs(\u0022?q=123\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_query_string",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022/api/units/{subscriptionId}/{unitId}/updates\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithDownstreamScheme(\u0022https\u0022).Build();\r\n    var config = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E { new PlaceholderNameAndValue(\u0022{subscriptionId}\u0022, \u00221\u0022), new PlaceholderNameAndValue(\u0022{unitId}\u0022, \u00222\u0022) }, new RouteBuilder().WithDownstreamRoute(downstreamRoute).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://localhost:5000/api/subscriptions/1/updates?unitId=2\u0022)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheUrlReplacerWillReturn(\u0022api/units/1/2/updates\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022https://localhost:5000/api/units/1/2/updates\u0022)).And(x =\u003E ThenTheQueryStringIs(\u0022\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_query_string_but_leave_non_placeholder_queries",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022/api/units/{subscriptionId}/{unitId}/updates\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithDownstreamScheme(\u0022https\u0022).Build();\r\n    var config = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E { new PlaceholderNameAndValue(\u0022{subscriptionId}\u0022, \u00221\u0022), new PlaceholderNameAndValue(\u0022{unitId}\u0022, \u00222\u0022) }, new RouteBuilder().WithDownstreamRoute(downstreamRoute).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://localhost:5000/api/subscriptions/1/updates?unitId=2\u0026productId=2\u0022)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheUrlReplacerWillReturn(\u0022api/units/1/2/updates\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022https://localhost:5000/api/units/1/2/updates?productId=2\u0022)).And(x =\u003E ThenTheQueryStringIs(\u0022?productId=2\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_query_string_exact_match",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022/api/units/{subscriptionId}/{unitId}/updates/{unitIdIty}\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithDownstreamScheme(\u0022https\u0022).Build();\r\n    var config = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E { new PlaceholderNameAndValue(\u0022{subscriptionId}\u0022, \u00221\u0022), new PlaceholderNameAndValue(\u0022{unitId}\u0022, \u00222\u0022), new PlaceholderNameAndValue(\u0022{unitIdIty}\u0022, \u00223\u0022) }, new RouteBuilder().WithDownstreamRoute(downstreamRoute).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://localhost:5000/api/subscriptions/1/updates?unitId=2?unitIdIty=3\u0022)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheUrlReplacerWillReturn(\u0022api/units/1/2/updates/3\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022https://localhost:5000/api/units/1/2/updates/3\u0022)).And(x =\u003E ThenTheQueryStringIs(\u0022\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_create_service_fabric_url",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithDownstreamScheme(\u0022https\u0022).Build();\r\n    var config = new ServiceProviderConfigurationBuilder().WithType(\u0022ServiceFabric\u0022).WithHost(\u0022localhost\u0022).WithPort(19081).Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(downstreamRoute).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://my.url/abc?q=123\u0022)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheUrlReplacerWillReturn(\u0022/api/products/1\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022https://my.url:80/api/products/1?q=123\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_service_fabric_url",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamScheme(\u0022http\u0022).WithServiceName(\u0022Ocelot/OcelotApp\u0022).WithUseServiceDiscovery(true).Build();\r\n    var downstreamRouteHolder = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(downstreamRoute).Build());\r\n    var config = new ServiceProviderConfigurationBuilder().WithType(\u0022ServiceFabric\u0022).WithHost(\u0022localhost\u0022).WithPort(19081).Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRouteHolder)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://localhost:19081\u0022)).And(x =\u003E x.GivenTheUrlReplacerWillReturnSequence(\u0022/api/products/1\u0022, \u0022Ocelot/OcelotApp\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022http://localhost:19081/Ocelot/OcelotApp/api/products/1\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_service_fabric_url_with_query_string_for_stateless_service",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamScheme(\u0022http\u0022).WithServiceName(\u0022Ocelot/OcelotApp\u0022).WithUseServiceDiscovery(true).Build();\r\n    var downstreamRouteHolder = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(downstreamRoute).Build());\r\n    var config = new ServiceProviderConfigurationBuilder().WithType(\u0022ServiceFabric\u0022).WithHost(\u0022localhost\u0022).WithPort(19081).Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRouteHolder)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://localhost:19081?Tom=test\u0026laura=1\u0022)).And(x =\u003E x.GivenTheUrlReplacerWillReturnSequence(\u0022/api/products/1\u0022, \u0022Ocelot/OcelotApp\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022http://localhost:19081/Ocelot/OcelotApp/api/products/1?Tom=test\u0026laura=1\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_service_fabric_url_with_query_string_for_stateful_service",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamScheme(\u0022http\u0022).WithServiceName(\u0022Ocelot/OcelotApp\u0022).WithUseServiceDiscovery(true).Build();\r\n    var downstreamRouteHolder = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(downstreamRoute).Build());\r\n    var config = new ServiceProviderConfigurationBuilder().WithType(\u0022ServiceFabric\u0022).WithHost(\u0022localhost\u0022).WithPort(19081).Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRouteHolder)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://localhost:19081?PartitionKind=test\u0026PartitionKey=1\u0022)).And(x =\u003E x.GivenTheUrlReplacerWillReturnSequence(\u0022/api/products/1\u0022, \u0022Ocelot/OcelotApp\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022http://localhost:19081/Ocelot/OcelotApp/api/products/1?PartitionKind=test\u0026PartitionKey=1\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_create_service_fabric_url_with_version_from_upstream_path_template",
        "Body": "{\r\n    var downstreamRoute = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamScheme(\u0022http\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022/products\u0022).Build()).WithUseServiceDiscovery(true).Build()).Build());\r\n    var config = new ServiceProviderConfigurationBuilder().WithType(\u0022ServiceFabric\u0022).WithHost(\u0022localhost\u0022).WithPort(19081).Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://localhost:19081?PartitionKind=test\u0026PartitionKey=1\u0022)).And(x =\u003E x.GivenTheUrlReplacerWillReturnSequence(\u0022/products\u0022, \u0022Service_1.0/Api\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022http://localhost:19081/Service_1.0/Api/products?PartitionKind=test\u0026PartitionKey=1\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "issue_473_should_not_remove_additional_query_string",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022/Authorized/{action}?server={server}\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022, \u0022Get\u0022 }).WithDownstreamScheme(\u0022http\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022/uc/Authorized/{server}/{action}\u0022).Build()).Build();\r\n    var config = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E { new PlaceholderNameAndValue(\u0022{action}\u0022, \u00221\u0022), new PlaceholderNameAndValue(\u0022{server}\u0022, \u00222\u0022) }, new RouteBuilder().WithDownstreamRoute(downstreamRoute).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Post\u0022, \u0022Get\u0022 }).Build()))).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022http://localhost:5000/uc/Authorized/2/1/refresh?refreshToken=2288356cfb1338fdc5ff4ca558ec785118dfe1ff2864340937da8226863ff66d\u0022)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheUrlReplacerWillReturn(\u0022/Authorized/1?server=2\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022http://localhost:5000/Authorized/1?refreshToken=2288356cfb1338fdc5ff4ca558ec785118dfe1ff2864340937da8226863ff66d\u0026server=2\u0022)).And(x =\u003E ThenTheQueryStringIs(\u0022?refreshToken=2288356cfb1338fdc5ff4ca558ec785118dfe1ff2864340937da8226863ff66d\u0026server=2\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_replace_by_empty_scheme",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithDownstreamScheme(\u0022\u0022).WithServiceName(\u0022Ocelot/OcelotApp\u0022).WithUseServiceDiscovery(true).Build();\r\n    var downstreamRouteHolder = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(downstreamRoute).Build());\r\n    var config = new ServiceProviderConfigurationBuilder().WithType(\u0022ServiceFabric\u0022).WithHost(\u0022localhost\u0022).WithPort(19081).Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRouteHolder)).And(x =\u003E GivenTheServiceProviderConfigIs(config)).And(x =\u003E x.GivenTheDownstreamRequestUriIs(\u0022https://localhost:19081?PartitionKind=test\u0026PartitionKey=1\u0022)).And(x =\u003E x.GivenTheUrlReplacerWillReturnSequence(\u0022/api/products/1\u0022, \u0022Ocelot/OcelotApp\u0022)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamRequestUriIs(\u0022https://localhost:19081/Ocelot/OcelotApp/api/products/1?PartitionKind=test\u0026PartitionKey=1\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpstreamUrlPathTemplateVariableReplacerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "can_replace_no_template_variables",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenThereIsAUrlMatch(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).When(x =\u003E x.WhenIReplaceTheTemplateVariables()).Then(x =\u003E x.ThenTheDownstreamUrlPathIsReturned(\u0022\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_replace_no_template_variables_with_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenThereIsAUrlMatch(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022/\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).When(x =\u003E x.WhenIReplaceTheTemplateVariables()).Then(x =\u003E x.ThenTheDownstreamUrlPathIsReturned(\u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_replace_url_no_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenThereIsAUrlMatch(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022api\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).When(x =\u003E x.WhenIReplaceTheTemplateVariables()).Then(x =\u003E x.ThenTheDownstreamUrlPathIsReturned(\u0022api\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_replace_url_one_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenThereIsAUrlMatch(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022api/\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).When(x =\u003E x.WhenIReplaceTheTemplateVariables()).Then(x =\u003E x.ThenTheDownstreamUrlPathIsReturned(\u0022api/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_replace_url_multiple_slash",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenThereIsAUrlMatch(new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022api/product/products/\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).When(x =\u003E x.WhenIReplaceTheTemplateVariables()).Then(x =\u003E x.ThenTheDownstreamUrlPathIsReturned(\u0022api/product/products/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_replace_url_one_template_variable",
        "Body": "{\r\n    var templateVariables = new List\u003CPlaceholderNameAndValue\u003E()\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAUrlMatch(new DownstreamRouteHolder(templateVariables, new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022productservice/products/{productId}/\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).When(x =\u003E x.WhenIReplaceTheTemplateVariables()).Then(x =\u003E x.ThenTheDownstreamUrlPathIsReturned(\u0022productservice/products/1/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_replace_url_one_template_variable_with_path_after",
        "Body": "{\r\n    var templateVariables = new List\u003CPlaceholderNameAndValue\u003E()\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAUrlMatch(new DownstreamRouteHolder(templateVariables, new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022productservice/products/{productId}/variants\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).When(x =\u003E x.WhenIReplaceTheTemplateVariables()).Then(x =\u003E x.ThenTheDownstreamUrlPathIsReturned(\u0022productservice/products/1/variants\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_replace_url_two_template_variable",
        "Body": "{\r\n    var templateVariables = new List\u003CPlaceholderNameAndValue\u003E()\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022),\r\n        new PlaceholderNameAndValue(\u0022{variantId}\u0022, \u002212\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAUrlMatch(new DownstreamRouteHolder(templateVariables, new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022productservice/products/{productId}/variants/{variantId}\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).When(x =\u003E x.WhenIReplaceTheTemplateVariables()).Then(x =\u003E x.ThenTheDownstreamUrlPathIsReturned(\u0022productservice/products/1/variants/12\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_replace_url_three_template_variable",
        "Body": "{\r\n    var templateVariables = new List\u003CPlaceholderNameAndValue\u003E()\r\n    {\r\n        new PlaceholderNameAndValue(\u0022{productId}\u0022, \u00221\u0022),\r\n        new PlaceholderNameAndValue(\u0022{variantId}\u0022, \u002212\u0022),\r\n        new PlaceholderNameAndValue(\u0022{categoryId}\u0022, \u002234\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAUrlMatch(new DownstreamRouteHolder(templateVariables, new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022productservice/category/{categoryId}/products/{productId}/variants/{variantId}\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()))).When(x =\u003E x.WhenIReplaceTheTemplateVariables()).Then(x =\u003E x.ThenTheDownstreamUrlPathIsReturned(\u0022productservice/category/34/products/1/variants/12\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ErrorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_message",
        "Body": "{\r\n    var error = new CannotAddDataError(\u0022message\u0022);\r\n    var result = error.ToString();\r\n    result.ShouldBe(\u0022message\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeError",
    "Message": null,
    "Methods": [
      {
        "Name": "NoDownstreamException",
        "Body": "{\r\n    var config = new InternalConfiguration(null, null, null, null, null, null, null, null, null);\r\n    this.Given(_ =\u003E GivenAnExceptionWillNotBeThrownDownstream()).And(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenICallTheMiddleware()).Then(_ =\u003E ThenTheResponseIsOk()).And(_ =\u003E TheAspDotnetRequestIdIsSet()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DownstreamException",
        "Body": "{\r\n    var config = new InternalConfiguration(null, null, null, null, null, null, null, null, null);\r\n    this.Given(_ =\u003E GivenAnExceptionWillBeThrownDownstream()).And(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenICallTheMiddleware()).Then(_ =\u003E ThenTheResponseIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldSetRequestId",
        "Body": "{\r\n    var config = new InternalConfiguration(null, null, null, \u0022requestidkey\u0022, null, null, null, null, null);\r\n    this.Given(_ =\u003E GivenAnExceptionWillNotBeThrownDownstream()).And(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenICallTheMiddlewareWithTheRequestIdKey(\u0022requestidkey\u0022, \u00221234\u0022)).Then(_ =\u003E ThenTheResponseIsOk()).And(_ =\u003E TheRequestIdIsSet(\u0022RequestId\u0022, \u00221234\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldSetAspDotNetRequestId",
        "Body": "{\r\n    var config = new InternalConfiguration(null, null, null, null, null, null, null, null, null);\r\n    this.Given(_ =\u003E GivenAnExceptionWillNotBeThrownDownstream()).And(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenICallTheMiddlewareWithTheRequestIdKey(\u0022requestidkey\u0022, \u00221234\u0022)).Then(_ =\u003E ThenTheResponseIsOk()).And(_ =\u003E TheAspDotnetRequestIdIsSet()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_throw_exception_if_config_provider_throws",
        "Body": "{\r\n    this.Given(_ =\u003E GivenAnExceptionWillNotBeThrownDownstream()).And(_ =\u003E GivenTheConfigThrows()).When(_ =\u003E WhenICallTheMiddlewareWithTheRequestIdKey(\u0022requestidkey\u0022, \u00221234\u0022)).Then(_ =\u003E ThenAnExceptionIsThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ExceptionHandlerMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "NoDownstreamException",
        "Body": "{\r\n    var config = new InternalConfiguration(null, null, null, null, null, null, null, null, null);\r\n    this.Given(_ =\u003E GivenAnExceptionWillNotBeThrownDownstream()).And(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenICallTheMiddleware()).Then(_ =\u003E ThenTheResponseIsOk()).And(_ =\u003E TheAspDotnetRequestIdIsSet()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DownstreamException",
        "Body": "{\r\n    var config = new InternalConfiguration(null, null, null, null, null, null, null, null, null);\r\n    this.Given(_ =\u003E GivenAnExceptionWillBeThrownDownstream()).And(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenICallTheMiddleware()).Then(_ =\u003E ThenTheResponseIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldSetRequestId",
        "Body": "{\r\n    var config = new InternalConfiguration(null, null, null, \u0022requestidkey\u0022, null, null, null, null, null);\r\n    this.Given(_ =\u003E GivenAnExceptionWillNotBeThrownDownstream()).And(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenICallTheMiddlewareWithTheRequestIdKey(\u0022requestidkey\u0022, \u00221234\u0022)).Then(_ =\u003E ThenTheResponseIsOk()).And(_ =\u003E TheRequestIdIsSet(\u0022RequestId\u0022, \u00221234\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldSetAspDotNetRequestId",
        "Body": "{\r\n    var config = new InternalConfiguration(null, null, null, null, null, null, null, null, null);\r\n    this.Given(_ =\u003E GivenAnExceptionWillNotBeThrownDownstream()).And(_ =\u003E GivenTheConfigurationIs(config)).When(_ =\u003E WhenICallTheMiddlewareWithTheRequestIdKey(\u0022requestidkey\u0022, \u00221234\u0022)).Then(_ =\u003E ThenTheResponseIsOk()).And(_ =\u003E TheAspDotnetRequestIdIsSet()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_throw_exception_if_config_provider_throws",
        "Body": "{\r\n    this.Given(_ =\u003E GivenAnExceptionWillNotBeThrownDownstream()).And(_ =\u003E GivenTheConfigThrows()).When(_ =\u003E WhenICallTheMiddlewareWithTheRequestIdKey(\u0022requestidkey\u0022, \u00221234\u0022)).Then(_ =\u003E ThenAnExceptionIsThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EurekaMiddlewareConfigurationProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_build",
        "Body": "{\r\n    var configRepo = new Mock\u003CIInternalConfigurationRepository\u003E();\r\n    configRepo.Setup(x =\u003E x.Get()).Returns(new OkResponse\u003CIInternalConfiguration\u003E(new InternalConfiguration(null, null, null, null, null, null, null, null, null)));\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIInternalConfigurationRepository\u003E(configRepo.Object);\r\n    var sp = services.BuildServiceProvider();\r\n    var provider = EurekaMiddlewareConfigurationProvider.Get(new ApplicationBuilder(sp));\r\n    provider.Status.ShouldBe(TaskStatus.RanToCompletion);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_build",
        "Body": "{\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().WithType(\u0022eureka\u0022).Build();\r\n    var client = new Mock\u003CIDiscoveryClient\u003E();\r\n    var configRepo = new Mock\u003CIInternalConfigurationRepository\u003E();\r\n    configRepo.Setup(x =\u003E x.Get()).Returns(new OkResponse\u003CIInternalConfiguration\u003E(new InternalConfiguration(null, null, serviceProviderConfig, null, null, null, null, null, null)));\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIInternalConfigurationRepository\u003E(configRepo.Object);\r\n    services.AddSingleton\u003CIDiscoveryClient\u003E(client.Object);\r\n    var sp = services.BuildServiceProvider();\r\n    var provider = EurekaMiddlewareConfigurationProvider.Get(new ApplicationBuilder(sp));\r\n    provider.Status.ShouldBe(TaskStatus.RanToCompletion);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EurekaProviderFactoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_get",
        "Body": "{\r\n    var config = new ServiceProviderConfigurationBuilder().Build();\r\n    var sp = new ServiceCollection().BuildServiceProvider();\r\n    var provider = EurekaProviderFactory.Get(sp, config, null);\r\n    provider.ShouldBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get",
        "Body": "{\r\n    var config = new ServiceProviderConfigurationBuilder().WithType(\u0022eureka\u0022).Build();\r\n    var client = new Mock\u003CIDiscoveryClient\u003E();\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDiscoveryClient\u003E(client.Object);\r\n    var sp = services.BuildServiceProvider();\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022\u0022).Build();\r\n    var provider = EurekaProviderFactory.Get(sp, config, route);\r\n    provider.ShouldBeOfType\u003CEureka\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EurekaServiceDiscoveryProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_empty_services",
        "Body": "{\r\n    this.When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheCountIs(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_service_from_client",
        "Body": "{\r\n    var instances = new List\u003CIServiceInstance\u003E\r\n    {\r\n        new EurekaService(_serviceId, \u0022somehost\u0022, 801, false, new Uri(\u0022http://somehost:801\u0022), new Dictionary\u003Cstring, string\u003E())\r\n    };\r\n    this.Given(_ =\u003E GivenThe(instances)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheCountIs(1)).And(_ =\u003E ThenTheClientIsCalledCorrectly()).And(_ =\u003E ThenTheServiceIsMapped()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_services_from_client",
        "Body": "{\r\n    var instances = new List\u003CIServiceInstance\u003E\r\n    {\r\n        new EurekaService(_serviceId, \u0022somehost\u0022, 801, false, new Uri(\u0022http://somehost:801\u0022), new Dictionary\u003Cstring, string\u003E()),\r\n        new EurekaService(_serviceId, \u0022somehost\u0022, 801, false, new Uri(\u0022http://somehost:801\u0022), new Dictionary\u003Cstring, string\u003E())\r\n    };\r\n    this.Given(_ =\u003E GivenThe(instances)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheCountIs(2)).And(_ =\u003E ThenTheClientIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EurekaService",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_empty_services",
        "Body": "{\r\n    this.When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheCountIs(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_service_from_client",
        "Body": "{\r\n    var instances = new List\u003CIServiceInstance\u003E\r\n    {\r\n        new EurekaService(_serviceId, \u0022somehost\u0022, 801, false, new Uri(\u0022http://somehost:801\u0022), new Dictionary\u003Cstring, string\u003E())\r\n    };\r\n    this.Given(_ =\u003E GivenThe(instances)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheCountIs(1)).And(_ =\u003E ThenTheClientIsCalledCorrectly()).And(_ =\u003E ThenTheServiceIsMapped()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_services_from_client",
        "Body": "{\r\n    var instances = new List\u003CIServiceInstance\u003E\r\n    {\r\n        new EurekaService(_serviceId, \u0022somehost\u0022, 801, false, new Uri(\u0022http://somehost:801\u0022), new Dictionary\u003Cstring, string\u003E()),\r\n        new EurekaService(_serviceId, \u0022somehost\u0022, 801, false, new Uri(\u0022http://somehost:801\u0022), new Dictionary\u003Cstring, string\u003E())\r\n    };\r\n    this.Given(_ =\u003E GivenThe(instances)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheCountIs(2)).And(_ =\u003E ThenTheClientIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AnyError",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_headers_to_downstreamRequest",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenConfigurationHeaderExtractorProperties(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022header-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddHeadersToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheHeaderIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_existing_headers_on_request",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenConfigurationHeaderExtractorProperties(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022header-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(new List\u003CClaim\u003E { new Claim(\u0022test\u0022, \u0022data\u0022) })).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).And(x =\u003E x.GivenThatTheRequestContainsHeader(\u0022header-key\u0022, \u0022initial\u0022)).When(x =\u003E x.WhenIAddHeadersToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheHeaderIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenConfigurationHeaderExtractorProperties(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(new List\u003CClaim\u003E())).And(x =\u003E x.GivenTheClaimParserReturns(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new AnyError() }))).When(x =\u003E x.WhenIAddHeadersToTheRequest()).Then(x =\u003E x.ThenTheResultIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddHeadersToRequestClaimToThingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_headers_to_downstreamRequest",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenConfigurationHeaderExtractorProperties(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022header-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddHeadersToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheHeaderIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_existing_headers_on_request",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenConfigurationHeaderExtractorProperties(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022header-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(new List\u003CClaim\u003E { new Claim(\u0022test\u0022, \u0022data\u0022) })).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).And(x =\u003E x.GivenThatTheRequestContainsHeader(\u0022header-key\u0022, \u0022initial\u0022)).When(x =\u003E x.WhenIAddHeadersToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheHeaderIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenConfigurationHeaderExtractorProperties(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(new List\u003CClaim\u003E())).And(x =\u003E x.GivenTheClaimParserReturns(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new AnyError() }))).When(x =\u003E x.WhenIAddHeadersToTheRequest()).Then(x =\u003E x.ThenTheResultIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddHeadersToRequestPlainTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_log_error_if_cannot_find_placeholder",
        "Body": "{\r\n    _placeholders.Setup(x =\u003E x.Get(It.IsAny\u003Cstring\u003E())).Returns(new ErrorResponse\u003Cstring\u003E(new AnyError()));\r\n    this.Given(_ =\u003E GivenHttpRequestWithoutHeaders()).When(_ =\u003E WhenAddingHeader(\u0022X-Forwarded-For\u0022, \u0022{RemoteIdAddress}\u0022)).Then(_ =\u003E ThenAnErrorIsLogged(\u0022X-Forwarded-For\u0022, \u0022{RemoteIdAddress}\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_placeholder_to_downstream_request",
        "Body": "{\r\n    _placeholders.Setup(x =\u003E x.Get(It.IsAny\u003Cstring\u003E())).Returns(new OkResponse\u003Cstring\u003E(\u0022replaced\u0022));\r\n    this.Given(_ =\u003E GivenHttpRequestWithoutHeaders()).When(_ =\u003E WhenAddingHeader(\u0022X-Forwarded-For\u0022, \u0022{RemoteIdAddress}\u0022)).Then(_ =\u003E ThenTheHeaderGetsTakenOverToTheRequestHeaders(\u0022replaced\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_plain_text_header_to_downstream_request",
        "Body": "{\r\n    this.Given(_ =\u003E GivenHttpRequestWithoutHeaders()).When(_ =\u003E WhenAddingHeader(\u0022X-Custom-Header\u0022, \u0022PlainValue\u0022)).Then(_ =\u003E ThenTheHeaderGetsTakenOverToTheRequestHeaders()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_overwrite_existing_header_with_added_header",
        "Body": "{\r\n    this.Given(_ =\u003E GivenHttpRequestWithHeader(\u0022X-Custom-Header\u0022, \u0022This should get overwritten\u0022)).When(_ =\u003E WhenAddingHeader(\u0022X-Custom-Header\u0022, \u0022PlainValue\u0022)).Then(_ =\u003E ThenTheHeaderGetsTakenOverToTheRequestHeaders()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddHeadersToResponseTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_header",
        "Body": "{\r\n    var addHeaders = new List\u003CAddHeader\u003E\r\n    {\r\n        new AddHeader(\u0022Laura\u0022, \u0022Tom\u0022)\r\n    };\r\n    this.Given(_ =\u003E GivenAResponseMessage()).And(_ =\u003E GivenTheAddHeaders(addHeaders)).When(_ =\u003E WhenIAdd()).And(_ =\u003E ThenTheHeaderIsReturned(\u0022Laura\u0022, \u0022Tom\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_trace_id_placeholder",
        "Body": "{\r\n    var addHeaders = new List\u003CAddHeader\u003E\r\n    {\r\n        new AddHeader(\u0022Trace-Id\u0022, \u0022{TraceId}\u0022)\r\n    };\r\n    var traceId = \u0022123\u0022;\r\n    this.Given(_ =\u003E GivenAResponseMessage()).And(_ =\u003E GivenTheTraceIdIs(traceId)).And(_ =\u003E GivenTheAddHeaders(addHeaders)).When(_ =\u003E WhenIAdd()).Then(_ =\u003E ThenTheHeaderIsReturned(\u0022Trace-Id\u0022, traceId)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_trace_id_placeholder_and_normal",
        "Body": "{\r\n    var addHeaders = new List\u003CAddHeader\u003E\r\n    {\r\n        new AddHeader(\u0022Trace-Id\u0022, \u0022{TraceId}\u0022),\r\n        new AddHeader(\u0022Tom\u0022, \u0022Laura\u0022)\r\n    };\r\n    var traceId = \u0022123\u0022;\r\n    this.Given(_ =\u003E GivenAResponseMessage()).And(_ =\u003E GivenTheTraceIdIs(traceId)).And(_ =\u003E GivenTheAddHeaders(addHeaders)).When(_ =\u003E WhenIAdd()).Then(_ =\u003E ThenTheHeaderIsReturned(\u0022Trace-Id\u0022, traceId)).Then(_ =\u003E ThenTheHeaderIsReturned(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_do_nothing_and_log_error",
        "Body": "{\r\n    var addHeaders = new List\u003CAddHeader\u003E\r\n    {\r\n        new AddHeader(\u0022Trace-Id\u0022, \u0022{TraceId}\u0022)\r\n    };\r\n    this.Given(_ =\u003E GivenAResponseMessage()).And(_ =\u003E GivenTheTraceIdErrors()).And(_ =\u003E GivenTheAddHeaders(addHeaders)).When(_ =\u003E WhenIAdd()).Then(_ =\u003E ThenTheHeaderIsNotAdded(\u0022Trace-Id\u0022)).And(_ =\u003E ThenTheErrorIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimsToHeadersMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_add_headers_to_request_correctly",
        "Body": "{\r\n    var downstreamRoute = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithClaimsToHeaders(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022UserId\u0022, \u0022Subject\u0022, \u0022\u0022, 0) }).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E x.GivenTheAddHeadersToDownstreamRequestReturnsOk()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheAddHeadersToRequestIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpContextRequestHeaderReplacerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_replace_headers",
        "Body": "{\r\n    var context = new DefaultHttpContext();\r\n    context.Request.Headers.Add(\u0022test\u0022, \u0022test\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E();\r\n    fAndRs.Add(new HeaderFindAndReplace(\u0022test\u0022, \u0022test\u0022, \u0022chiken\u0022, 0));\r\n    this.Given(x =\u003E GivenTheFollowingHttpRequest(context)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeadersAreReplaced()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_replace_headers",
        "Body": "{\r\n    var context = new DefaultHttpContext();\r\n    context.Request.Headers.Add(\u0022test\u0022, \u0022test\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E();\r\n    this.Given(x =\u003E GivenTheFollowingHttpRequest(context)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeadersAreNotReplaced()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpHeadersTransformationMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_pre_and_post_header_transforms",
        "Body": "{\r\n    this.Given(x =\u003E GivenTheFollowingRequest()).And(x =\u003E GivenTheDownstreamRequestIs()).And(x =\u003E GivenTheRouteHasPreFindAndReplaceSetUp()).And(x =\u003E GivenTheHttpResponseMessageIs()).When(x =\u003E WhenICallTheMiddleware()).Then(x =\u003E ThenTheIHttpContextRequestHeaderReplacerIsCalledCorrectly()).Then(x =\u003E ThenAddHeadersToRequestIsCalledCorrectly()).And(x =\u003E ThenTheIHttpResponseHeaderReplacerIsCalledCorrectly()).And(x =\u003E ThenAddHeadersToResponseIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpResponseHeaderReplacerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_replace_headers",
        "Body": "{\r\n    var response = new DownstreamResponse(new StringContent(string.Empty), HttpStatusCode.Accepted, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E() { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022test\u0022, new List\u003Cstring\u003E { \u0022test\u0022 }) }, \u0022\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022test\u0022, \u0022test\u0022, \u0022chiken\u0022, 0)\r\n    };\r\n    this.Given(x =\u003E GivenTheHttpResponse(response)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeadersAreReplaced()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_replace_headers",
        "Body": "{\r\n    var response = new DownstreamResponse(new StringContent(string.Empty), HttpStatusCode.Accepted, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E() { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022test\u0022, new List\u003Cstring\u003E { \u0022test\u0022 }) }, \u0022\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E();\r\n    this.Given(x =\u003E GivenTheHttpResponse(response)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeadersAreNotReplaced()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_downstream_base_url_with_ocelot_base_url",
        "Body": "{\r\n    const string downstreamUrl = \u0022http://downstream.com/\u0022;\r\n    var request = new HttpRequestMessage(HttpMethod.Get, \u0022http://test.com\u0022)\r\n    {\r\n        RequestUri = new System.Uri(downstreamUrl)\r\n    };\r\n    var response = new DownstreamResponse(new StringContent(string.Empty), HttpStatusCode.Accepted, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E() { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022Location\u0022, new List\u003Cstring\u003E { downstreamUrl }) }, \u0022\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Location\u0022, \u0022{DownstreamBaseUrl}\u0022, \u0022http://ocelot.com/\u0022, 0)\r\n    };\r\n    this.Given(x =\u003E GivenTheHttpResponse(response)).And(x =\u003E GivenTheRequestIs(request)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeaderShouldBe(\u0022Location\u0022, \u0022http://ocelot.com/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_downstream_base_url_with_ocelot_base_url_with_port",
        "Body": "{\r\n    const string downstreamUrl = \u0022http://downstream.com/\u0022;\r\n    var request = new HttpRequestMessage(HttpMethod.Get, \u0022http://test.com\u0022)\r\n    {\r\n        RequestUri = new System.Uri(downstreamUrl)\r\n    };\r\n    var response = new DownstreamResponse(new StringContent(string.Empty), HttpStatusCode.Accepted, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E() { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022Location\u0022, new List\u003Cstring\u003E { downstreamUrl }) }, \u0022\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Location\u0022, \u0022{DownstreamBaseUrl}\u0022, \u0022http://ocelot.com:123/\u0022, 0)\r\n    };\r\n    this.Given(x =\u003E GivenTheHttpResponse(response)).And(x =\u003E GivenTheRequestIs(request)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeaderShouldBe(\u0022Location\u0022, \u0022http://ocelot.com:123/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_downstream_base_url_with_ocelot_base_url_and_path",
        "Body": "{\r\n    const string downstreamUrl = \u0022http://downstream.com/test/product\u0022;\r\n    var request = new HttpRequestMessage(HttpMethod.Get, \u0022http://test.com\u0022)\r\n    {\r\n        RequestUri = new System.Uri(downstreamUrl)\r\n    };\r\n    var response = new DownstreamResponse(new StringContent(string.Empty), HttpStatusCode.Accepted, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E() { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022Location\u0022, new List\u003Cstring\u003E { downstreamUrl }) }, \u0022\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Location\u0022, \u0022{DownstreamBaseUrl}\u0022, \u0022http://ocelot.com/\u0022, 0)\r\n    };\r\n    this.Given(x =\u003E GivenTheHttpResponse(response)).And(x =\u003E GivenTheRequestIs(request)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeaderShouldBe(\u0022Location\u0022, \u0022http://ocelot.com/test/product\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_downstream_base_url_with_ocelot_base_url_with_path_and_port",
        "Body": "{\r\n    const string downstreamUrl = \u0022http://downstream.com/test/product\u0022;\r\n    var request = new HttpRequestMessage(HttpMethod.Get, \u0022http://test.com\u0022)\r\n    {\r\n        RequestUri = new System.Uri(downstreamUrl)\r\n    };\r\n    var response = new DownstreamResponse(new StringContent(string.Empty), HttpStatusCode.Accepted, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E() { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022Location\u0022, new List\u003Cstring\u003E { downstreamUrl }) }, \u0022\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Location\u0022, \u0022{DownstreamBaseUrl}\u0022, \u0022http://ocelot.com:123/\u0022, 0)\r\n    };\r\n    this.Given(x =\u003E GivenTheHttpResponse(response)).And(x =\u003E GivenTheRequestIs(request)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeaderShouldBe(\u0022Location\u0022, \u0022http://ocelot.com:123/test/product\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_downstream_base_url_and_port_with_ocelot_base_url",
        "Body": "{\r\n    const string downstreamUrl = \u0022http://downstream.com:123/test/product\u0022;\r\n    var request = new HttpRequestMessage(HttpMethod.Get, \u0022http://test.com\u0022)\r\n    {\r\n        RequestUri = new System.Uri(downstreamUrl)\r\n    };\r\n    var response = new DownstreamResponse(new StringContent(string.Empty), HttpStatusCode.Accepted, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E() { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022Location\u0022, new List\u003Cstring\u003E { downstreamUrl }) }, \u0022\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Location\u0022, \u0022{DownstreamBaseUrl}\u0022, \u0022http://ocelot.com/\u0022, 0)\r\n    };\r\n    this.Given(x =\u003E GivenTheHttpResponse(response)).And(x =\u003E GivenTheRequestIs(request)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeaderShouldBe(\u0022Location\u0022, \u0022http://ocelot.com/test/product\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_downstream_base_url_and_port_with_ocelot_base_url_and_port",
        "Body": "{\r\n    const string downstreamUrl = \u0022http://downstream.com:123/test/product\u0022;\r\n    var request = new HttpRequestMessage(HttpMethod.Get, \u0022http://test.com\u0022)\r\n    {\r\n        RequestUri = new System.Uri(downstreamUrl)\r\n    };\r\n    var response = new DownstreamResponse(new StringContent(string.Empty), HttpStatusCode.Accepted, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E() { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022Location\u0022, new List\u003Cstring\u003E { downstreamUrl }) }, \u0022\u0022);\r\n    var fAndRs = new List\u003CHeaderFindAndReplace\u003E\r\n    {\r\n        new HeaderFindAndReplace(\u0022Location\u0022, \u0022{DownstreamBaseUrl}\u0022, \u0022http://ocelot.com:321/\u0022, 0)\r\n    };\r\n    this.Given(x =\u003E GivenTheHttpResponse(response)).And(x =\u003E GivenTheRequestIs(request)).And(x =\u003E GivenTheFollowingHeaderReplacements(fAndRs)).When(x =\u003E WhenICallTheReplacer()).Then(x =\u003E ThenTheHeaderShouldBe(\u0022Location\u0022, \u0022http://ocelot.com:321/test/product\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RemoveHeadersTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_remove_header",
        "Body": "{\r\n    var headers = new List\u003CHeader\u003E()\r\n    {\r\n        new Header(\u0022Transfer-Encoding\u0022, new List\u003Cstring\u003E { \u0022chunked\u0022 })\r\n    };\r\n    this.Given(x =\u003E x.GivenAHttpContext(headers)).When(x =\u003E x.WhenIRemoveTheHeaders()).Then(x =\u003E x.TheHeaderIsNoLongerInTheContext()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimParserTests",
    "Message": null,
    "Methods": [
      {
        "Name": "can_parse_claims_dictionary_access_string_returning_value_to_function",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimOf(new Claim(\u0022CustomerId\u0022, \u00221234\u0022))).And(x =\u003E x.GivenTheKeyIs(\u0022CustomerId\u0022)).When(x =\u003E x.WhenICallTheParser()).Then(x =\u003E x.ThenTheResultIs(new OkResponse\u003Cstring\u003E(\u00221234\u0022))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_when_cannot_find_requested_claim",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimOf(new Claim(\u0022BallsId\u0022, \u00221234\u0022))).And(x =\u003E x.GivenTheKeyIs(\u0022CustomerId\u0022)).When(x =\u003E x.WhenICallTheParser()).Then(x =\u003E x.ThenTheResultIs(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new CannotFindClaimError($\u0022Cannot find claim for key: {_key}\u0022) }))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "can_parse_claims_dictionary_access_string_using_delimiter_and_retuning_at_correct_index",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimOf(new Claim(\u0022Subject\u0022, \u0022registered|4321\u0022))).And(x =\u003E x.GivenTheDelimiterIs(\u0022|\u0022)).And(x =\u003E x.GivenTheIndexIs(1)).And(x =\u003E x.GivenTheKeyIs(\u0022Subject\u0022)).When(x =\u003E x.WhenICallTheParser()).Then(x =\u003E x.ThenTheResultIs(new OkResponse\u003Cstring\u003E(\u00224321\u0022))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_index_too_large",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimOf(new Claim(\u0022Subject\u0022, \u0022registered|4321\u0022))).And(x =\u003E x.GivenTheDelimiterIs(\u0022|\u0022)).And(x =\u003E x.GivenTheIndexIs(24)).And(x =\u003E x.GivenTheKeyIs(\u0022Subject\u0022)).When(x =\u003E x.WhenICallTheParser()).Then(x =\u003E x.ThenTheResultIs(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new CannotFindClaimError($\u0022Cannot find claim for key: {_key}, delimiter: {_delimiter}, index: {_index}\u0022) }))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_index_too_small",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimOf(new Claim(\u0022Subject\u0022, \u0022registered|4321\u0022))).And(x =\u003E x.GivenTheDelimiterIs(\u0022|\u0022)).And(x =\u003E x.GivenTheIndexIs(-1)).And(x =\u003E x.GivenTheKeyIs(\u0022Subject\u0022)).When(x =\u003E x.WhenICallTheParser()).Then(x =\u003E x.ThenTheResultIs(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new CannotFindClaimError($\u0022Cannot find claim for key: {_key}, delimiter: {_delimiter}, index: {_index}\u0022) }))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigAwarePlaceholdersTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_value_from_underlying_placeholders",
        "Body": "{\r\n    var baseUrl = \u0022http://www.bbc.co.uk\u0022;\r\n    const string key = \u0022{BaseUrl}\u0022;\r\n    _basePlaceholders.Setup(x =\u003E x.Get(key)).Returns(new OkResponse\u003Cstring\u003E(baseUrl));\r\n    var result = _placeholders.Get(key);\r\n    result.Data.ShouldBe(baseUrl);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_value_from_config_with_same_name_as_placeholder_if_underlying_placeholder_not_found",
        "Body": "{\r\n    const string expected = \u0022http://foo-bar.co.uk\u0022;\r\n    var baseUrl = \u0022http://www.bbc.co.uk\u0022;\r\n    const string key = \u0022{BaseUrl}\u0022;\r\n    _basePlaceholders.Setup(x =\u003E x.Get(key)).Returns(new ErrorResponse\u003Cstring\u003E(new FakeError()));\r\n    var result = _placeholders.Get(key);\r\n    result.Data.ShouldBe(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_underyling_when_added",
        "Body": "{\r\n    const string key = \u0022{Test}\u0022;\r\n    Func\u003CResponse\u003Cstring\u003E\u003E func = () =\u003E new OkResponse\u003Cstring\u003E(\u0022test)\u0022);\r\n    _placeholders.Add(key, func);\r\n    _basePlaceholders.Verify(p =\u003E p.Add(key, func), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_underyling_when_removed",
        "Body": "{\r\n    const string key = \u0022{Test}\u0022;\r\n    _placeholders.Remove(key);\r\n    _basePlaceholders.Verify(p =\u003E p.Remove(key), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpDataRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "get_returns_correct_key_from_http_context",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAHttpContextContaining(\u0022key\u0022, \u0022string\u0022)).When(x =\u003E x.GetIsCalledWithKey\u003Cstring\u003E(\u0022key\u0022)).Then(x =\u003E x.ThenTheResultIsAnOkResponse\u003Cstring\u003E(\u0022string\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "get_returns_error_response_if_the_key_is_not_found",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAHttpContextContaining(\u0022key\u0022, \u0022string\u0022)).When(x =\u003E x.GetIsCalledWithKey\u003Cstring\u003E(\u0022keyDoesNotExist\u0022)).Then(x =\u003E x.ThenTheResultIsAnErrorReposnse\u003Cstring\u003E(\u0022string1\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_update",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAHttpContextContaining(\u0022key\u0022, \u0022string\u0022)).And(x =\u003E x.UpdateIsCalledWith\u003Cstring\u003E(\u0022key\u0022, \u0022new string\u0022)).When(x =\u003E x.GetIsCalledWithKey\u003Cstring\u003E(\u0022key\u0022)).Then(x =\u003E x.ThenTheResultIsAnOkResponse\u003Cstring\u003E(\u0022new string\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "InMemoryBusTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_publish_with_delay",
        "Body": "{\r\n    var called = false;\r\n    _bus.Subscribe(x =\u003E\r\n    {\r\n        called = true;\r\n    });\r\n    _bus.Publish(new object (), 1);\r\n    await Task.Delay(100);\r\n    called.ShouldBeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_be_publish_yet_as_no_delay_in_caller",
        "Body": "{\r\n    var called = false;\r\n    _bus.Subscribe(x =\u003E\r\n    {\r\n        called = true;\r\n    });\r\n    _bus.Publish(new object (), 1);\r\n    called.ShouldBeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PlaceholdersTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_base_url",
        "Body": "{\r\n    var baseUrl = \u0022http://www.bbc.co.uk\u0022;\r\n    _finder.Setup(x =\u003E x.Find()).Returns(baseUrl);\r\n    var result = _placeholders.Get(\u0022{BaseUrl}\u0022);\r\n    result.Data.ShouldBe(baseUrl);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_remote_ip_address",
        "Body": "{\r\n    var httpContext = new DefaultHttpContext()\r\n    {\r\n        Connection =\r\n        {\r\n            RemoteIpAddress = IPAddress.Any\r\n        }\r\n    };\r\n    _accessor.Setup(x =\u003E x.HttpContext).Returns(httpContext);\r\n    var result = _placeholders.Get(\u0022{RemoteIpAddress}\u0022);\r\n    result.Data.ShouldBe(httpContext.Connection.RemoteIpAddress.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_key_does_not_exist",
        "Body": "{\r\n    var result = _placeholders.Get(\u0022{Test}\u0022);\r\n    result.IsError.ShouldBeTrue();\r\n    result.Errors[0].Message.ShouldBe(\u0022Unable to find placeholder called {Test}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_downstream_base_url_when_port_is_not_80_or_443",
        "Body": "{\r\n    var httpRequest = new HttpRequestMessage();\r\n    httpRequest.RequestUri = new Uri(\u0022http://www.bbc.co.uk\u0022);\r\n    var request = new DownstreamRequest(httpRequest);\r\n    var result = _placeholders.Get(\u0022{DownstreamBaseUrl}\u0022, request);\r\n    result.Data.ShouldBe(\u0022http://www.bbc.co.uk/\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_downstream_base_url_when_port_is_80_or_443",
        "Body": "{\r\n    var httpRequest = new HttpRequestMessage();\r\n    httpRequest.RequestUri = new Uri(\u0022http://www.bbc.co.uk:123\u0022);\r\n    var request = new DownstreamRequest(httpRequest);\r\n    var result = _placeholders.Get(\u0022{DownstreamBaseUrl}\u0022, request);\r\n    result.Data.ShouldBe(\u0022http://www.bbc.co.uk:123/\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_key_does_not_exist_for_http_request_message",
        "Body": "{\r\n    var request = new DownstreamRequest(new HttpRequestMessage(HttpMethod.Get, \u0022http://west.com\u0022));\r\n    var result = _placeholders.Get(\u0022{Test}\u0022, request);\r\n    result.IsError.ShouldBeTrue();\r\n    result.Errors[0].Message.ShouldBe(\u0022Unable to find placeholder called {Test}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_trace_id",
        "Body": "{\r\n    var traceId = \u0022123\u0022;\r\n    _repo.Setup(x =\u003E x.Get\u003Cstring\u003E(\u0022TraceId\u0022)).Returns(new OkResponse\u003Cstring\u003E(traceId));\r\n    var result = _placeholders.Get(\u0022{TraceId}\u0022);\r\n    result.Data.ShouldBe(traceId);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_ok_when_added",
        "Body": "{\r\n    var result = _placeholders.Add(\u0022{Test}\u0022, () =\u003E new OkResponse\u003Cstring\u003E(\u0022test\u0022));\r\n    result.IsError.ShouldBeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_ok_when_removed",
        "Body": "{\r\n    var result = _placeholders.Add(\u0022{Test}\u0022, () =\u003E new OkResponse\u003Cstring\u003E(\u0022test\u0022));\r\n    result = _placeholders.Remove(\u0022{Test}\u0022);\r\n    result.IsError.ShouldBeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_added",
        "Body": "{\r\n    var result = _placeholders.Add(\u0022{Test}\u0022, () =\u003E new OkResponse\u003Cstring\u003E(\u0022test\u0022));\r\n    result = _placeholders.Add(\u0022{Test}\u0022, () =\u003E new OkResponse\u003Cstring\u003E(\u0022test\u0022));\r\n    result.IsError.ShouldBeTrue();\r\n    result.Errors[0].Message.ShouldBe(\u0022Unable to add placeholder: {Test}, placeholder already exists\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_removed",
        "Body": "{\r\n    var result = _placeholders.Remove(\u0022{Test}\u0022);\r\n    result.IsError.ShouldBeTrue();\r\n    result.Errors[0].Message.ShouldBe(\u0022Unable to remove placeholder: {Test}, placeholder does not exists\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_upstreamHost",
        "Body": "{\r\n    var upstreamHost = \u0022UpstreamHostA\u0022;\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Request.Headers.Add(\u0022Host\u0022, upstreamHost);\r\n    _accessor.Setup(x =\u003E x.HttpContext).Returns(httpContext);\r\n    var result = _placeholders.Get(\u0022{UpstreamHost}\u0022);\r\n    result.Data.ShouldBe(upstreamHost);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_finding_upstbecause_Host_not_set",
        "Body": "{\r\n    var httpContext = new DefaultHttpContext();\r\n    _accessor.Setup(x =\u003E x.HttpContext).Returns(httpContext);\r\n    var result = _placeholders.Get(\u0022{UpstreamHost}\u0022);\r\n    result.IsError.ShouldBeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_when_finding_upstream_host_because_exception_thrown",
        "Body": "{\r\n    _accessor.Setup(x =\u003E x.HttpContext).Throws(new Exception());\r\n    var result = _placeholders.Get(\u0022{UpstreamHost}\u0022);\r\n    result.IsError.ShouldBeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScopesAuthorizerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_ok_if_no_allowed_scopes",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheFollowing(new ClaimsPrincipal())).And(_ =\u003E GivenTheFollowing(new List\u003Cstring\u003E())).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new OkResponse\u003Cbool\u003E(true))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_ok_if_null_allowed_scopes",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheFollowing(new ClaimsPrincipal())).And(_ =\u003E GivenTheFollowing((List\u003Cstring\u003E)null)).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new OkResponse\u003Cbool\u003E(true))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_claims_parser_returns_error",
        "Body": "{\r\n    var fakeError = new FakeError();\r\n    this.Given(_ =\u003E GivenTheFollowing(new ClaimsPrincipal())).And(_ =\u003E GivenTheParserReturns(new ErrorResponse\u003CList\u003Cstring\u003E\u003E(fakeError))).And(_ =\u003E GivenTheFollowing(new List\u003Cstring\u003E() { \u0022doesntmatter\u0022 })).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new ErrorResponse\u003Cbool\u003E(fakeError))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_scopes_and_return_ok_result",
        "Body": "{\r\n    var claimsPrincipal = new ClaimsPrincipal();\r\n    var allowedScopes = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022someScope\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenTheFollowing(claimsPrincipal)).And(_ =\u003E GivenTheParserReturns(new OkResponse\u003CList\u003Cstring\u003E\u003E(allowedScopes))).And(_ =\u003E GivenTheFollowing(allowedScopes)).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new OkResponse\u003Cbool\u003E(true))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_match_scopes_and_return_error_result",
        "Body": "{\r\n    var fakeError = new FakeError();\r\n    var claimsPrincipal = new ClaimsPrincipal();\r\n    var allowedScopes = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022someScope\u0022\r\n    };\r\n    var userScopes = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022anotherScope\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenTheFollowing(claimsPrincipal)).And(_ =\u003E GivenTheParserReturns(new OkResponse\u003CList\u003Cstring\u003E\u003E(userScopes))).And(_ =\u003E GivenTheFollowing(allowedScopes)).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new ErrorResponse\u003Cbool\u003E(fakeError))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeError",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_ok_if_no_allowed_scopes",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheFollowing(new ClaimsPrincipal())).And(_ =\u003E GivenTheFollowing(new List\u003Cstring\u003E())).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new OkResponse\u003Cbool\u003E(true))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_ok_if_null_allowed_scopes",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheFollowing(new ClaimsPrincipal())).And(_ =\u003E GivenTheFollowing((List\u003Cstring\u003E)null)).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new OkResponse\u003Cbool\u003E(true))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_claims_parser_returns_error",
        "Body": "{\r\n    var fakeError = new FakeError();\r\n    this.Given(_ =\u003E GivenTheFollowing(new ClaimsPrincipal())).And(_ =\u003E GivenTheParserReturns(new ErrorResponse\u003CList\u003Cstring\u003E\u003E(fakeError))).And(_ =\u003E GivenTheFollowing(new List\u003Cstring\u003E() { \u0022doesntmatter\u0022 })).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new ErrorResponse\u003Cbool\u003E(fakeError))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_scopes_and_return_ok_result",
        "Body": "{\r\n    var claimsPrincipal = new ClaimsPrincipal();\r\n    var allowedScopes = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022someScope\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenTheFollowing(claimsPrincipal)).And(_ =\u003E GivenTheParserReturns(new OkResponse\u003CList\u003Cstring\u003E\u003E(allowedScopes))).And(_ =\u003E GivenTheFollowing(allowedScopes)).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new OkResponse\u003Cbool\u003E(true))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_match_scopes_and_return_error_result",
        "Body": "{\r\n    var fakeError = new FakeError();\r\n    var claimsPrincipal = new ClaimsPrincipal();\r\n    var allowedScopes = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022someScope\u0022\r\n    };\r\n    var userScopes = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022anotherScope\u0022\r\n    };\r\n    this.Given(_ =\u003E GivenTheFollowing(claimsPrincipal)).And(_ =\u003E GivenTheParserReturns(new OkResponse\u003CList\u003Cstring\u003E\u003E(userScopes))).And(_ =\u003E GivenTheFollowing(allowedScopes)).When(_ =\u003E WhenIAuthorize()).Then(_ =\u003E ThenTheFollowingIsReturned(new ErrorResponse\u003Cbool\u003E(fakeError))).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StringExtensionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_trim_start",
        "Body": "{\r\n    var test = \u0022/string\u0022;\r\n    test = test.TrimStart(\u0022/\u0022);\r\n    test.ShouldBe(\u0022string\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_source",
        "Body": "{\r\n    var test = \u0022string\u0022;\r\n    test = test.LastCharAsForwardSlash();\r\n    test.ShouldBe(\u0022string/\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "KubeServiceDiscoveryProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_service_from_k8s",
        "Body": "{\r\n    var token = \u0022Bearer txpc696iUhbVoudg164r93CxDTrKRVWG\u0022;\r\n    var endPointEntryOne = new EndpointsV1\r\n    {\r\n        Kind = \u0022endpoint\u0022,\r\n        ApiVersion = \u00221.0\u0022,\r\n        Metadata = new ObjectMetaV1()\r\n        {\r\n            Namespace = \u0022dev\u0022,\r\n        },\r\n    };\r\n    var endpointSubsetV1 = new EndpointSubsetV1();\r\n    endpointSubsetV1.Addresses.Add(new EndpointAddressV1() { Ip = \u0022127.0.0.1\u0022, Hostname = \u0022localhost\u0022, });\r\n    endpointSubsetV1.Ports.Add(new EndpointPortV1() { Port = 80, });\r\n    endPointEntryOne.Subsets.Add(endpointSubsetV1);\r\n    this.Given(x =\u003E GivenThereIsAFakeKubeServiceDiscoveryProvider(_fakekubeServiceDiscoveryUrl, _serviceName, _namespaces)).And(x =\u003E GivenTheServicesAreRegisteredWithKube(endPointEntryOne)).When(x =\u003E WhenIGetTheServices()).Then(x =\u003E ThenTheCountIs(1)).And(_ =\u003E ThenTheTokenIs(token)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotBuilderExtensionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_set_up_kubernetes",
        "Body": "{\r\n    this.Given(x =\u003E WhenISetUpOcelotServices()).When(x =\u003E WhenISetUpKubernetes()).Then(x =\u003E ThenAnExceptionIsntThrown()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PollingKubeServiceDiscoveryProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_service_from_kube",
        "Body": "{\r\n    var service = new Service(\u0022\u0022, new ServiceHostAndPort(\u0022\u0022, 0), \u0022\u0022, \u0022\u0022, new List\u003Cstring\u003E());\r\n    this.Given(x =\u003E GivenKubeReturns(service)).When(x =\u003E WhenIGetTheServices(1)).Then(x =\u003E ThenTheCountIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CookieStickySessionsCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_instance_of_expected_load_balancer_type",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022myType\u0022, \u0022myKey\u0022, 1000)).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CCookieStickySessions\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_expected_name",
        "Body": "{\r\n    this.When(x =\u003E x.WhenIGetTheLoadBalancerTypeName()).Then(x =\u003E x.ThenTheLoadBalancerTypeIs(\u0022CookieStickySessions\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CookieStickySessionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_expire_sticky_session",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturns()).And(_ =\u003E GivenTheDownstreamRequestHasSessionId(\u0022321\u0022)).And(_ =\u003E GivenIHackAMessageInWithAPastExpiry()).And(_ =\u003E WhenILease()).When(_ =\u003E WhenTheMessagesAreProcessed()).Then(_ =\u003E ThenTheLoadBalancerIsCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_host_and_port",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturns()).When(_ =\u003E WhenILease()).Then(_ =\u003E ThenTheHostAndPortIsNotNull()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_same_host_and_port",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturnsSequence()).And(_ =\u003E GivenTheDownstreamRequestHasSessionId(\u0022321\u0022)).When(_ =\u003E WhenILeaseTwiceInARow()).Then(_ =\u003E ThenTheFirstAndSecondResponseAreTheSame()).And(_ =\u003E ThenTheStickySessionWillTimeout()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_different_host_and_port_if_load_balancer_does",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturnsSequence()).When(_ =\u003E WhenIMakeTwoRequetsWithDifferentSessionValues()).Then(_ =\u003E ThenADifferentHostAndPortIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturnsError()).When(_ =\u003E WhenILease()).Then(_ =\u003E ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_release",
        "Body": "{\r\n    _stickySessions.Release(new ServiceHostAndPort(\u0022\u0022, 0));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeCookies",
    "Message": null,
    "Methods": [
      {
        "Name": "should_expire_sticky_session",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturns()).And(_ =\u003E GivenTheDownstreamRequestHasSessionId(\u0022321\u0022)).And(_ =\u003E GivenIHackAMessageInWithAPastExpiry()).And(_ =\u003E WhenILease()).When(_ =\u003E WhenTheMessagesAreProcessed()).Then(_ =\u003E ThenTheLoadBalancerIsCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_host_and_port",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturns()).When(_ =\u003E WhenILease()).Then(_ =\u003E ThenTheHostAndPortIsNotNull()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_same_host_and_port",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturnsSequence()).And(_ =\u003E GivenTheDownstreamRequestHasSessionId(\u0022321\u0022)).When(_ =\u003E WhenILeaseTwiceInARow()).Then(_ =\u003E ThenTheFirstAndSecondResponseAreTheSame()).And(_ =\u003E ThenTheStickySessionWillTimeout()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_different_host_and_port_if_load_balancer_does",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturnsSequence()).When(_ =\u003E WhenIMakeTwoRequetsWithDifferentSessionValues()).Then(_ =\u003E ThenADifferentHostAndPortIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturnsError()).When(_ =\u003E WhenILease()).Then(_ =\u003E ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_release",
        "Body": "{\r\n    _stickySessions.Release(new ServiceHostAndPort(\u0022\u0022, 0));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeBus",
    "Message": null,
    "Methods": [
      {
        "Name": "should_expire_sticky_session",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturns()).And(_ =\u003E GivenTheDownstreamRequestHasSessionId(\u0022321\u0022)).And(_ =\u003E GivenIHackAMessageInWithAPastExpiry()).And(_ =\u003E WhenILease()).When(_ =\u003E WhenTheMessagesAreProcessed()).Then(_ =\u003E ThenTheLoadBalancerIsCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_host_and_port",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturns()).When(_ =\u003E WhenILease()).Then(_ =\u003E ThenTheHostAndPortIsNotNull()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_same_host_and_port",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturnsSequence()).And(_ =\u003E GivenTheDownstreamRequestHasSessionId(\u0022321\u0022)).When(_ =\u003E WhenILeaseTwiceInARow()).Then(_ =\u003E ThenTheFirstAndSecondResponseAreTheSame()).And(_ =\u003E ThenTheStickySessionWillTimeout()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_different_host_and_port_if_load_balancer_does",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturnsSequence()).When(_ =\u003E WhenIMakeTwoRequetsWithDifferentSessionValues()).Then(_ =\u003E ThenADifferentHostAndPortIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheLoadBalancerReturnsError()).When(_ =\u003E WhenILease()).Then(_ =\u003E ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_release",
        "Body": "{\r\n    _stickySessions.Release(new ServiceHostAndPort(\u0022\u0022, 0));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeLoadBalancer",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_expected_name",
        "Body": "{\r\n    this.When(x =\u003E x.WhenIGetTheLoadBalancerTypeName()).Then(x =\u003E x.ThenTheLoadBalancerTypeIs(\u0022FakeLoadBalancer\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_result_of_specified_creator_func",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E x.GivenTheCreatorFuncThrows()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DelegateInvokingLoadBalancerCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_expected_name",
        "Body": "{\r\n    this.When(x =\u003E x.WhenIGetTheLoadBalancerTypeName()).Then(x =\u003E x.ThenTheLoadBalancerTypeIs(\u0022FakeLoadBalancer\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_result_of_specified_creator_func",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E x.GivenTheCreatorFuncThrows()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LeastConnectionCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_instance_of_expected_load_balancer_type",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022myService\u0022).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CLeastConnection\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_expected_name",
        "Body": "{\r\n    this.When(x =\u003E x.WhenIGetTheLoadBalancerTypeName()).Then(x =\u003E x.ThenTheLoadBalancerTypeIs(\u0022LeastConnection\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LeastConnectionTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_be_able_to_lease_and_release_concurrently",
        "Body": "{\r\n    var serviceName = \u0022products\u0022;\r\n    var availableServices = new List\u003CService\u003E\r\n    {\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.2\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n    };\r\n    _services = availableServices;\r\n    _leastConnection = new LeastConnection(() =\u003E Task.FromResult(_services), serviceName);\r\n    var tasks = new Task[100];\r\n    for (var i = 0; i \u003C tasks.Length; i\u002B\u002B)\r\n    {\r\n        tasks[i] = LeaseDelayAndRelease();\r\n    }\r\n\r\n    Task.WaitAll(tasks);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_handle_service_returning_to_available",
        "Body": "{\r\n    var serviceName = \u0022products\u0022;\r\n    var availableServices = new List\u003CService\u003E\r\n    {\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.2\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n    };\r\n    _leastConnection = new LeastConnection(() =\u003E Task.FromResult(availableServices), serviceName);\r\n    var hostAndPortOne = _leastConnection.Lease(_httpContext).Result;\r\n    hostAndPortOne.Data.DownstreamHost.ShouldBe(\u0022127.0.0.1\u0022);\r\n    var hostAndPortTwo = _leastConnection.Lease(_httpContext).Result;\r\n    hostAndPortTwo.Data.DownstreamHost.ShouldBe(\u0022127.0.0.2\u0022);\r\n    _leastConnection.Release(hostAndPortOne.Data);\r\n    _leastConnection.Release(hostAndPortTwo.Data);\r\n    availableServices = new List\u003CService\u003E\r\n    {\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n    };\r\n    hostAndPortOne = _leastConnection.Lease(_httpContext).Result;\r\n    hostAndPortOne.Data.DownstreamHost.ShouldBe(\u0022127.0.0.1\u0022);\r\n    hostAndPortTwo = _leastConnection.Lease(_httpContext).Result;\r\n    hostAndPortTwo.Data.DownstreamHost.ShouldBe(\u0022127.0.0.1\u0022);\r\n    _leastConnection.Release(hostAndPortOne.Data);\r\n    _leastConnection.Release(hostAndPortTwo.Data);\r\n    availableServices = new List\u003CService\u003E\r\n    {\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.2\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n    };\r\n    hostAndPortOne = _leastConnection.Lease(_httpContext).Result;\r\n    hostAndPortOne.Data.DownstreamHost.ShouldBe(\u0022127.0.0.1\u0022);\r\n    hostAndPortTwo = _leastConnection.Lease(_httpContext).Result;\r\n    hostAndPortTwo.Data.DownstreamHost.ShouldBe(\u0022127.0.0.2\u0022);\r\n    _leastConnection.Release(hostAndPortOne.Data);\r\n    _leastConnection.Release(hostAndPortTwo.Data);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_next_url",
        "Body": "{\r\n    var serviceName = \u0022products\u0022;\r\n    var hostAndPort = new ServiceHostAndPort(\u0022localhost\u0022, 80);\r\n    var availableServices = new List\u003CService\u003E\r\n    {\r\n        new Service(serviceName, hostAndPort, string.Empty, string.Empty, new string[0])\r\n    };\r\n    this.Given(x =\u003E x.GivenAHostAndPort(hostAndPort)).And(x =\u003E x.GivenTheLoadBalancerStarts(availableServices, serviceName)).When(x =\u003E x.WhenIGetTheNextHostAndPort()).Then(x =\u003E x.ThenTheNextHostAndPortIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_serve_from_service_with_least_connections",
        "Body": "{\r\n    var serviceName = \u0022products\u0022;\r\n    var availableServices = new List\u003CService\u003E\r\n    {\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.2\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.3\u0022, 80), string.Empty, string.Empty, new string[0])\r\n    };\r\n    _services = availableServices;\r\n    _leastConnection = new LeastConnection(() =\u003E Task.FromResult(_services), serviceName);\r\n    var response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[0].HostAndPort.DownstreamHost);\r\n    response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[1].HostAndPort.DownstreamHost);\r\n    response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[2].HostAndPort.DownstreamHost);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_build_connections_per_service",
        "Body": "{\r\n    var serviceName = \u0022products\u0022;\r\n    var availableServices = new List\u003CService\u003E\r\n    {\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.2\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n    };\r\n    _services = availableServices;\r\n    _leastConnection = new LeastConnection(() =\u003E Task.FromResult(_services), serviceName);\r\n    var response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[0].HostAndPort.DownstreamHost);\r\n    response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[1].HostAndPort.DownstreamHost);\r\n    response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[0].HostAndPort.DownstreamHost);\r\n    response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[1].HostAndPort.DownstreamHost);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_release_connection",
        "Body": "{\r\n    var serviceName = \u0022products\u0022;\r\n    var availableServices = new List\u003CService\u003E\r\n    {\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n        new Service(serviceName, new ServiceHostAndPort(\u0022127.0.0.2\u0022, 80), string.Empty, string.Empty, new string[0]),\r\n    };\r\n    _services = availableServices;\r\n    _leastConnection = new LeastConnection(() =\u003E Task.FromResult(_services), serviceName);\r\n    var response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[0].HostAndPort.DownstreamHost);\r\n    response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[1].HostAndPort.DownstreamHost);\r\n    response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[0].HostAndPort.DownstreamHost);\r\n    response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[1].HostAndPort.DownstreamHost);\r\n    //release this so 2 should have 1 connection and we should get 2 back as our next host and port\r\n    _leastConnection.Release(availableServices[1].HostAndPort);\r\n    response = _leastConnection.Lease(_httpContext).Result;\r\n    response.Data.DownstreamHost.ShouldBe(availableServices[1].HostAndPort.DownstreamHost);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_services_are_null",
        "Body": "{\r\n    var serviceName = \u0022products\u0022;\r\n    var hostAndPort = new ServiceHostAndPort(\u0022localhost\u0022, 80);\r\n    this.Given(x =\u003E x.GivenAHostAndPort(hostAndPort)).And(x =\u003E x.GivenTheLoadBalancerStarts(null, serviceName)).When(x =\u003E x.WhenIGetTheNextHostAndPort()).Then(x =\u003E x.ThenServiceAreNullErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_services_are_empty",
        "Body": "{\r\n    var serviceName = \u0022products\u0022;\r\n    var hostAndPort = new ServiceHostAndPort(\u0022localhost\u0022, 80);\r\n    this.Given(x =\u003E x.GivenAHostAndPort(hostAndPort)).And(x =\u003E x.GivenTheLoadBalancerStarts(new List\u003CService\u003E(), serviceName)).When(x =\u003E x.WhenIGetTheNextHostAndPort()).Then(x =\u003E x.ThenServiceAreEmptyErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeLoadBalancerCreator",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_load_balancer_by_default",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeNoLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_matching_load_balancer",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerTwo\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeLoadBalancerTwo\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_cannot_find_load_balancer_creator",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022DoesntExistLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheErrorMessageIsCorrect()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_creator_errors",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022BrokenLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_service_provider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheServiceProviderIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_when_call_to_service_provider_fails",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryFails()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "BrokenLoadBalancerCreator",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_load_balancer_by_default",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeNoLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_matching_load_balancer",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerTwo\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeLoadBalancerTwo\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_cannot_find_load_balancer_creator",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022DoesntExistLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheErrorMessageIsCorrect()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_creator_errors",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022BrokenLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_service_provider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheServiceProviderIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_when_call_to_service_provider_fails",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryFails()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeLoadBalancerOne",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_load_balancer_by_default",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeNoLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_matching_load_balancer",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerTwo\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeLoadBalancerTwo\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_cannot_find_load_balancer_creator",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022DoesntExistLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheErrorMessageIsCorrect()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_creator_errors",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022BrokenLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_service_provider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheServiceProviderIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_when_call_to_service_provider_fails",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryFails()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeLoadBalancerTwo",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_load_balancer_by_default",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeNoLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_matching_load_balancer",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerTwo\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeLoadBalancerTwo\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_cannot_find_load_balancer_creator",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022DoesntExistLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheErrorMessageIsCorrect()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_creator_errors",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022BrokenLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_service_provider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheServiceProviderIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_when_call_to_service_provider_fails",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryFails()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeNoLoadBalancer",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_load_balancer_by_default",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeNoLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_matching_load_balancer",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerTwo\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeLoadBalancerTwo\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_cannot_find_load_balancer_creator",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022DoesntExistLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheErrorMessageIsCorrect()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_creator_errors",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022BrokenLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_service_provider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheServiceProviderIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_when_call_to_service_provider_fails",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryFails()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "BrokenLoadBalancer",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_load_balancer_by_default",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeNoLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_matching_load_balancer",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerTwo\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeLoadBalancerTwo\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_cannot_find_load_balancer_creator",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022DoesntExistLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheErrorMessageIsCorrect()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_creator_errors",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022BrokenLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_service_provider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheServiceProviderIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_when_call_to_service_provider_fails",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryFails()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoadBalancerFactoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_load_balancer_by_default",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeNoLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_matching_load_balancer",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerTwo\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CFakeLoadBalancerTwo\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_cannot_find_load_balancer_creator",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022DoesntExistLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).And(x =\u003E x.ThenTheErrorMessageIsCorrect()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_if_creator_errors",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022BrokenLoadBalancer\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_service_provider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryReturns()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheServiceProviderIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_response_when_call_to_service_provider_fails",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancerOne\u0022, \u0022\u0022, 0)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).And(x =\u003E GivenAServiceProviderConfig(new ServiceProviderConfigurationBuilder().Build())).And(x =\u003E x.GivenTheServiceProviderFactoryFails()).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenAnErrorResponseIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeLoadBalancer",
    "Message": null,
    "Methods": [
      {
        "Name": "should_store_load_balancer_on_first_request",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).Then(x =\u003E x.ThenItIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_store_load_balancer_on_second_request",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenItIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_store_load_balancers_by_key",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    var routeTwo = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeRoundRobinLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022testtwo\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).And(x =\u003E x.GivenThereIsALoadBalancer(routeTwo, new FakeRoundRobinLoadBalancer())).When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CFakeLoadBalancer\u003E()).When(x =\u003E x.WhenWeGetTheLoadBalancer(routeTwo)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CFakeRoundRobinLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_exception",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_new_load_balancer_if_route_load_balancer_has_changed",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    var routeTwo = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022LeastConnection\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CFakeLoadBalancer\u003E()).When(x =\u003E x.WhenIGetTheRouteWithTheSameKeyButDifferentLoadBalancer(routeTwo)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CLeastConnection\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeRoundRobinLoadBalancer",
    "Message": null,
    "Methods": [
      {
        "Name": "should_store_load_balancer_on_first_request",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).Then(x =\u003E x.ThenItIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_store_load_balancer_on_second_request",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenItIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_store_load_balancers_by_key",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    var routeTwo = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeRoundRobinLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022testtwo\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).And(x =\u003E x.GivenThereIsALoadBalancer(routeTwo, new FakeRoundRobinLoadBalancer())).When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CFakeLoadBalancer\u003E()).When(x =\u003E x.WhenWeGetTheLoadBalancer(routeTwo)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CFakeRoundRobinLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_exception",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_new_load_balancer_if_route_load_balancer_has_changed",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    var routeTwo = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022LeastConnection\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CFakeLoadBalancer\u003E()).When(x =\u003E x.WhenIGetTheRouteWithTheSameKeyButDifferentLoadBalancer(routeTwo)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CLeastConnection\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoadBalancerHouseTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_store_load_balancer_on_first_request",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).Then(x =\u003E x.ThenItIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_store_load_balancer_on_second_request",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenItIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_store_load_balancers_by_key",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    var routeTwo = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeRoundRobinLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022testtwo\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).And(x =\u003E x.GivenThereIsALoadBalancer(routeTwo, new FakeRoundRobinLoadBalancer())).When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CFakeLoadBalancer\u003E()).When(x =\u003E x.WhenWeGetTheLoadBalancer(routeTwo)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CFakeRoundRobinLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_exception",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_new_load_balancer_if_route_load_balancer_has_changed",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022FakeLoadBalancer\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    var routeTwo = new DownstreamRouteBuilder().WithLoadBalancerOptions(new LoadBalancerOptions(\u0022LeastConnection\u0022, \u0022\u0022, 0)).WithLoadBalancerKey(\u0022test\u0022).Build();\r\n    this.Given(x =\u003E x.GivenThereIsALoadBalancer(route, new FakeLoadBalancer())).When(x =\u003E x.WhenWeGetTheLoadBalancer(route)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CFakeLoadBalancer\u003E()).When(x =\u003E x.WhenIGetTheRouteWithTheSameKeyButDifferentLoadBalancer(routeTwo)).Then(x =\u003E x.ThenTheLoadBalancerIs\u003CLeastConnection\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoadBalancerMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_scoped_data_repository_correctly",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamUrlIs(\u0022http://my.url/abc?q=123\u0022)).And(x =\u003E GivenTheConfigurationIs(serviceProviderConfig)).And(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute, new List\u003COcelot.DownstreamRouteFinder.UrlMatcher.PlaceholderNameAndValue\u003E())).And(x =\u003E x.GivenTheLoadBalancerHouseReturns()).And(x =\u003E x.GivenTheLoadBalancerReturns()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamUrlIsReplacedWith(\u0022http://127.0.0.1:80/abc?q=123\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_pipeline_error_if_cannot_get_load_balancer",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamUrlIs(\u0022http://my.url/abc?q=123\u0022)).And(x =\u003E GivenTheConfigurationIs(serviceProviderConfig)).And(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute, new List\u003COcelot.DownstreamRouteFinder.UrlMatcher.PlaceholderNameAndValue\u003E())).And(x =\u003E x.GivenTheLoadBalancerHouseReturnsAnError()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenAnErrorStatingLoadBalancerCouldNotBeFoundIsSetOnPipeline()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_pipeline_error_if_cannot_get_least",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamUrlIs(\u0022http://my.url/abc?q=123\u0022)).And(x =\u003E GivenTheConfigurationIs(serviceProviderConfig)).And(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute, new List\u003COcelot.DownstreamRouteFinder.UrlMatcher.PlaceholderNameAndValue\u003E())).And(x =\u003E x.GivenTheLoadBalancerHouseReturns()).And(x =\u003E x.GivenTheLoadBalancerReturnsAnError()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenAnErrorStatingHostAndPortCouldNotBeFoundIsSetOnPipeline()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_scheme",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    var serviceProviderConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheDownStreamUrlIs(\u0022http://my.url/abc?q=123\u0022)).And(x =\u003E GivenTheConfigurationIs(serviceProviderConfig)).And(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute, new List\u003COcelot.DownstreamRouteFinder.UrlMatcher.PlaceholderNameAndValue\u003E())).And(x =\u003E x.GivenTheLoadBalancerHouseReturns()).And(x =\u003E x.GivenTheLoadBalancerReturnsOk()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenAnHostAndPortIsSetOnPipeline()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoadBalancerOptionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_default_to_no_load_balancer",
        "Body": "{\r\n    var options = new LoadBalancerOptionsBuilder().Build();\r\n    options.Type.ShouldBe(nameof(NoLoadBalancer));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "NoLoadBalancerCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_instance_of_expected_load_balancer_type",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CNoLoadBalancer\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_expected_name",
        "Body": "{\r\n    this.When(x =\u003E x.WhenIGetTheLoadBalancerTypeName()).Then(x =\u003E x.ThenTheLoadBalancerTypeIs(\u0022NoLoadBalancer\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "NoLoadBalancerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_host_and_port",
        "Body": "{\r\n    var hostAndPort = new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80);\r\n    var services = new List\u003CService\u003E\r\n    {\r\n        new Service(\u0022product\u0022, hostAndPort, string.Empty, string.Empty, new string[0])\r\n    };\r\n    this.Given(x =\u003E x.GivenServices(services)).When(x =\u003E x.WhenIGetTheNextHostAndPort()).Then(x =\u003E x.ThenTheHostAndPortIs(hostAndPort)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_no_services",
        "Body": "{\r\n    this.When(x =\u003E x.WhenIGetTheNextHostAndPort()).Then(x =\u003E x.ThenThereIsAnError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_no_services_then_when_services_available_return_host_and_port",
        "Body": "{\r\n    var hostAndPort = new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80);\r\n    var services = new List\u003CService\u003E\r\n    {\r\n        new Service(\u0022product\u0022, hostAndPort, string.Empty, string.Empty, new string[0])\r\n    };\r\n    this.Given(_ =\u003E WhenIGetTheNextHostAndPort()).And(_ =\u003E ThenThereIsAnError()).And(_ =\u003E GivenServices(services)).When(_ =\u003E WhenIGetTheNextHostAndPort()).Then(_ =\u003E ThenTheHostAndPortIs(hostAndPort)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_null_services",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenServicesAreNull()).When(x =\u003E x.WhenIGetTheNextHostAndPort()).Then(x =\u003E x.ThenThereIsAnError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RoundRobinCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_instance_of_expected_load_balancer_type",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.Given(x =\u003E x.GivenARoute(route)).When(x =\u003E x.WhenIGetTheLoadBalancer()).Then(x =\u003E x.ThenTheLoadBalancerIsReturned\u003CRoundRobin\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_expected_name",
        "Body": "{\r\n    this.When(x =\u003E x.WhenIGetTheLoadBalancerTypeName()).Then(x =\u003E x.ThenTheLoadBalancerTypeIs(\u0022RoundRobin\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RoundRobinTests",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "Methods": [
      {
        "Name": "should_get_next_address",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIGetTheNextAddress()).Then(x =\u003E x.ThenTheNextAddressIndexIs(0)).Given(x =\u003E x.GivenIGetTheNextAddress()).Then(x =\u003E x.ThenTheNextAddressIndexIs(1)).Given(x =\u003E x.GivenIGetTheNextAddress()).Then(x =\u003E x.ThenTheNextAddressIndexIs(2)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_go_back_to_first_address_after_finished_last",
        "Body": "{\r\n    var stopWatch = Stopwatch.StartNew();\r\n    while (stopWatch.ElapsedMilliseconds \u003C 1000)\r\n    {\r\n        var address = _roundRobin.Lease(_httpContext).Result;\r\n        address.Data.ShouldBe(_services[0].HostAndPort);\r\n        address = _roundRobin.Lease(_httpContext).Result;\r\n        address.Data.ShouldBe(_services[1].HostAndPort);\r\n        address = _roundRobin.Lease(_httpContext).Result;\r\n        address.Data.ShouldBe(_services[2].HostAndPort);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AspDotNetLoggerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_log_trace",
        "Body": "{\r\n    _logger.LogTrace($\u0022a message from {_a} to {_b}\u0022);\r\n    ThenLevelIsLogged(\u0022requestId: no request id, previousRequestId: no previous request id, message: a message from tom to laura\u0022, LogLevel.Trace);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_info",
        "Body": "{\r\n    _logger.LogInformation($\u0022a message from {_a} to {_b}\u0022);\r\n    ThenLevelIsLogged(\u0022requestId: no request id, previousRequestId: no previous request id, message: a message from tom to laura\u0022, LogLevel.Information);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_warning",
        "Body": "{\r\n    _logger.LogWarning($\u0022a message from {_a} to {_b}\u0022);\r\n    ThenLevelIsLogged(\u0022requestId: no request id, previousRequestId: no previous request id, message: a message from tom to laura\u0022, LogLevel.Warning);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_error",
        "Body": "{\r\n    _logger.LogError($\u0022a message from {_a} to {_b}\u0022, _ex);\r\n    ThenLevelIsLogged(\u0022requestId: no request id, previousRequestId: no previous request id, message: a message from tom to laura\u0022, LogLevel.Error, _ex);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_critical",
        "Body": "{\r\n    _logger.LogCritical($\u0022a message from {_a} to {_b}\u0022, _ex);\r\n    ThenLevelIsLogged(\u0022requestId: no request id, previousRequestId: no previous request id, message: a message from tom to laura\u0022, LogLevel.Critical, _ex);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotDiagnosticListenerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_trace_middleware_started",
        "Body": "{\r\n    this.Given(_ =\u003E GivenAMiddlewareName()).When(_ =\u003E WhenMiddlewareStartedCalled()).Then(_ =\u003E ThenTheLogIs($\u0022MiddlewareStarting: {_name}; {_httpContext.Request.Path}\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_trace_middleware_finished",
        "Body": "{\r\n    this.Given(_ =\u003E GivenAMiddlewareName()).When(_ =\u003E WhenMiddlewareFinishedCalled()).Then(_ =\u003E ThenTheLogIs($\u0022MiddlewareFinished: {_name}; {_httpContext.Response.StatusCode}\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_trace_middleware_exception",
        "Body": "{\r\n    this.Given(_ =\u003E GivenAMiddlewareName()).And(_ =\u003E GivenAException(new Exception(\u0022oh no\u0022))).When(_ =\u003E WhenMiddlewareExceptionCalled()).Then(_ =\u003E ThenTheLogIs($\u0022MiddlewareException: {_name}; {_exception.Message};\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "BaseUrlFinderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_use_default_base_url",
        "Body": "{\r\n    this.When(x =\u003E WhenIFindTheUrl()).Then(x =\u003E ThenTheUrlIs(\u0022http://localhost:5000\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_memory_config_base_url",
        "Body": "{\r\n    this.Given(x =\u003E GivenTheMemoryBaseUrlIs(\u0022http://baseurlfromconfig.com:5181\u0022)).When(x =\u003E WhenIFindTheUrl()).Then(x =\u003E ThenTheUrlIs(\u0022http://baseurlfromconfig.com:5181\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_file_config_base_url",
        "Body": "{\r\n    this.Given(x =\u003E GivenTheMemoryBaseUrlIs(\u0022http://localhost:7000\u0022)).And(x =\u003E GivenTheFileBaseUrlIs(\u0022http://baseurlfromconfig.com:5181\u0022)).When(x =\u003E WhenIFindTheUrl()).Then(x =\u003E ThenTheUrlIs(\u0022http://baseurlfromconfig.com:5181\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotPipelineExtensionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_set_up_pipeline",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheDepedenciesAreSetUp()).When(_ =\u003E WhenIBuild()).Then(_ =\u003E ThenThePipelineIsBuilt()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_expand_pipeline",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheDepedenciesAreSetUp()).When(_ =\u003E WhenIExpandBuild()).Then(_ =\u003E ThenThePipelineIsBuilt()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MultiParametersInvokeMiddleware",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "Methods": [
      {
        "Name": "should_build_generic",
        "Body": "{\r\n    this.When(x =\u003E WhenIUseAGeneric()).Then(x =\u003E ThenTheGenericIsInThePipeline()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_build_func",
        "Body": "{\r\n    this.When(x =\u003E WhenIUseAFunc()).Then(x =\u003E ThenTheFuncIsInThePipeline()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Middleware_Multi_Parameters_Invoke",
        "Body": "{\r\n    var provider = _services.BuildServiceProvider();\r\n    IApplicationBuilder builder = new ApplicationBuilder(provider);\r\n    builder = builder.UseMiddleware\u003CMultiParametersInvokeMiddleware\u003E();\r\n    var del = builder.Build();\r\n    del.Invoke(_httpContext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotPiplineBuilderTests",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "Methods": [
      {
        "Name": "should_build_generic",
        "Body": "{\r\n    this.When(x =\u003E WhenIUseAGeneric()).Then(x =\u003E ThenTheGenericIsInThePipeline()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_build_func",
        "Body": "{\r\n    this.When(x =\u003E WhenIUseAFunc()).Then(x =\u003E ThenTheFuncIsInThePipeline()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Middleware_Multi_Parameters_Invoke",
        "Body": "{\r\n    var provider = _services.BuildServiceProvider();\r\n    IApplicationBuilder builder = new ApplicationBuilder(provider);\r\n    builder = builder.UseMiddleware\u003CMultiParametersInvokeMiddleware\u003E();\r\n    var del = builder.Build();\r\n    del.Invoke(_httpContext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeLogger",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "Methods": [
      {
        "Name": "should_build_generic",
        "Body": "{\r\n    this.When(x =\u003E WhenIUseAGeneric()).Then(x =\u003E ThenTheGenericIsInThePipeline()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_build_func",
        "Body": "{\r\n    this.When(x =\u003E WhenIUseAFunc()).Then(x =\u003E ThenTheFuncIsInThePipeline()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Middleware_Multi_Parameters_Invoke",
        "Body": "{\r\n    var provider = _services.BuildServiceProvider();\r\n    IApplicationBuilder builder = new ApplicationBuilder(provider);\r\n    builder = builder.UseMiddleware\u003CMultiParametersInvokeMiddleware\u003E();\r\n    var del = builder.Build();\r\n    del.Invoke(_httpContext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DefinedAggregatorProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_find_aggregator",
        "Body": "{\r\n    var route = new RouteBuilder().WithAggregator(\u0022TestDefinedAggregator\u0022).Build();\r\n    this.Given(_ =\u003E GivenDefinedAggregator()).And(_ =\u003E GivenRoute(route)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheAggregatorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_find_aggregator",
        "Body": "{\r\n    var route = new RouteBuilder().WithAggregator(\u0022TestDefinedAggregator\u0022).Build();\r\n    this.Given(_ =\u003E GivenNoDefinedAggregator()).And(_ =\u003E GivenRoute(route)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenAnErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MultiplexingMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_multiplex",
        "Body": "{\r\n    var route = new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().Build()).WithDownstreamRoute(new DownstreamRouteBuilder().Build()).Build();\r\n    this.Given(x =\u003E GivenTheFollowing(route)).When(x =\u003E WhenIMultiplex()).Then(x =\u003E ThePipelineIsCalled(2)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_multiplex",
        "Body": "{\r\n    var route = new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().Build()).Build();\r\n    this.Given(x =\u003E GivenTheFollowing(route)).When(x =\u003E WhenIMultiplex()).Then(x =\u003E ThePipelineIsCalled(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ResponseAggregatorFactoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_simple_json_aggregator",
        "Body": "{\r\n    var route = new RouteBuilder().Build();\r\n    this.Given(_ =\u003E GivenRoute(route)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheAggregatorIs\u003CSimpleJsonResponseAggregator\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_user_defined_aggregator",
        "Body": "{\r\n    var route = new RouteBuilder().WithAggregator(\u0022doesntmatter\u0022).Build();\r\n    this.Given(_ =\u003E GivenRoute(route)).When(_ =\u003E WhenIGet()).Then(_ =\u003E ThenTheAggregatorIs\u003CUserDefinedResponseAggregator\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SimpleJsonResponseAggregatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_aggregate_n_responses_and_set_response_content_on_upstream_context_withConfig",
        "Body": "{\r\n    var commentsDownstreamRoute = new DownstreamRouteBuilder().WithKey(\u0022Comments\u0022).Build();\r\n    var userDetailsDownstreamRoute = new DownstreamRouteBuilder().WithKey(\u0022UserDetails\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplate(\u0022\u0022, 0, false, \u0022/v1/users/{userId}\u0022)).Build();\r\n    var downstreamRoutes = new List\u003CDownstreamRoute\u003E\r\n    {\r\n        commentsDownstreamRoute,\r\n        userDetailsDownstreamRoute\r\n    };\r\n    var route = new RouteBuilder().WithDownstreamRoutes(downstreamRoutes).WithAggregateRouteConfig(new List\u003CAggregateRouteConfig\u003E() { new AggregateRouteConfig() { RouteKey = \u0022UserDetails\u0022, JsonPath = \u0022$[*].writerId\u0022, Parameter = \u0022userId\u0022 } }).Build();\r\n    var commentsResponseContent = @\u0022[{\u0022\u0022id\u0022\u0022:1,\u0022\u0022writerId\u0022\u0022:1,\u0022\u0022postId\u0022\u0022:1,\u0022\u0022text\u0022\u0022:\u0022\u0022text1\u0022\u0022},{\u0022\u0022id\u0022\u0022:2,\u0022\u0022writerId\u0022\u0022:2,\u0022\u0022postId\u0022\u0022:2,\u0022\u0022text\u0022\u0022:\u0022\u0022text2\u0022\u0022},{\u0022\u0022id\u0022\u0022:3,\u0022\u0022writerId\u0022\u0022:2,\u0022\u0022postId\u0022\u0022:1,\u0022\u0022text\u0022\u0022:\u0022\u0022text21\u0022\u0022}]\u0022;\r\n    var commentsDownstreamContext = new DefaultHttpContext();\r\n    commentsDownstreamContext.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(commentsResponseContent, Encoding.UTF8, \u0022application/json\u0022), HttpStatusCode.OK, new EditableList\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    commentsDownstreamContext.Items.UpsertDownstreamRoute(commentsDownstreamRoute);\r\n    var userDetailsResponseContent = @\u0022[{\u0022\u0022id\u0022\u0022:1,\u0022\u0022firstName\u0022\u0022:\u0022\u0022abolfazl\u0022\u0022,\u0022\u0022lastName\u0022\u0022:\u0022\u0022rajabpour\u0022\u0022},{\u0022\u0022id\u0022\u0022:2,\u0022\u0022firstName\u0022\u0022:\u0022\u0022reza\u0022\u0022,\u0022\u0022lastName\u0022\u0022:\u0022\u0022rezaei\u0022\u0022}]\u0022;\r\n    var userDetailsDownstreamContext = new DefaultHttpContext();\r\n    userDetailsDownstreamContext.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(userDetailsResponseContent, Encoding.UTF8, \u0022application/json\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    userDetailsDownstreamContext.Items.UpsertDownstreamRoute(userDetailsDownstreamRoute);\r\n    var downstreamContexts = new List\u003CHttpContext\u003E\r\n    {\r\n        commentsDownstreamContext,\r\n        userDetailsDownstreamContext\r\n    };\r\n    var expected = \u0022{\\\u0022Comments\\\u0022:\u0022 \u002B commentsResponseContent \u002B \u0022,\\\u0022UserDetails\\\u0022:\u0022 \u002B userDetailsResponseContent \u002B \u0022}\u0022;\r\n    this.Given(x =\u003E GivenTheUpstreamContext(new DefaultHttpContext())).And(x =\u003E GivenTheRoute(route)).And(x =\u003E GivenTheDownstreamContext(downstreamContexts)).When(x =\u003E WhenIAggregate()).Then(x =\u003E ThenTheContentIs(expected)).And(x =\u003E ThenTheContentTypeIs(\u0022application/json\u0022)).And(x =\u003E ThenTheReasonPhraseIs(\u0022cannot return from aggregate..which reason phrase would you use?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_aggregate_n_responses_and_set_response_content_on_upstream_context",
        "Body": "{\r\n    var billDownstreamRoute = new DownstreamRouteBuilder().WithKey(\u0022Bill\u0022).Build();\r\n    var georgeDownstreamRoute = new DownstreamRouteBuilder().WithKey(\u0022George\u0022).Build();\r\n    var downstreamRoutes = new List\u003CDownstreamRoute\u003E\r\n    {\r\n        billDownstreamRoute,\r\n        georgeDownstreamRoute\r\n    };\r\n    var route = new RouteBuilder().WithDownstreamRoutes(downstreamRoutes).Build();\r\n    var billDownstreamContext = new DefaultHttpContext();\r\n    billDownstreamContext.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Bill says hi\u0022), HttpStatusCode.OK, new EditableList\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    billDownstreamContext.Items.UpsertDownstreamRoute(billDownstreamRoute);\r\n    var georgeDownstreamContext = new DefaultHttpContext();\r\n    georgeDownstreamContext.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022George says hi\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    georgeDownstreamContext.Items.UpsertDownstreamRoute(georgeDownstreamRoute);\r\n    var downstreamContexts = new List\u003CHttpContext\u003E\r\n    {\r\n        billDownstreamContext,\r\n        georgeDownstreamContext\r\n    };\r\n    var expected = \u0022{\\\u0022Bill\\\u0022:Bill says hi,\\\u0022George\\\u0022:George says hi}\u0022;\r\n    this.Given(x =\u003E GivenTheUpstreamContext(new DefaultHttpContext())).And(x =\u003E GivenTheRoute(route)).And(x =\u003E GivenTheDownstreamContext(downstreamContexts)).When(x =\u003E WhenIAggregate()).Then(x =\u003E ThenTheContentIs(expected)).And(x =\u003E ThenTheContentTypeIs(\u0022application/json\u0022)).And(x =\u003E ThenTheReasonPhraseIs(\u0022cannot return from aggregate..which reason phrase would you use?\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_if_any_downstreams_have_errored",
        "Body": "{\r\n    var billDownstreamRoute = new DownstreamRouteBuilder().WithKey(\u0022Bill\u0022).Build();\r\n    var georgeDownstreamRoute = new DownstreamRouteBuilder().WithKey(\u0022George\u0022).Build();\r\n    var downstreamRoutes = new List\u003CDownstreamRoute\u003E\r\n    {\r\n        billDownstreamRoute,\r\n        georgeDownstreamRoute\r\n    };\r\n    var route = new RouteBuilder().WithDownstreamRoutes(downstreamRoutes).Build();\r\n    var billDownstreamContext = new DefaultHttpContext();\r\n    billDownstreamContext.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Bill says hi\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    billDownstreamContext.Items.UpsertDownstreamRoute(billDownstreamRoute);\r\n    var georgeDownstreamContext = new DefaultHttpContext();\r\n    georgeDownstreamContext.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Error\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    georgeDownstreamContext.Items.UpsertDownstreamRoute(georgeDownstreamRoute);\r\n    georgeDownstreamContext.Items.SetError(new AnyError());\r\n    var downstreamContexts = new List\u003CHttpContext\u003E\r\n    {\r\n        billDownstreamContext,\r\n        georgeDownstreamContext\r\n    };\r\n    var expected = \u0022Error\u0022;\r\n    this.Given(x =\u003E GivenTheUpstreamContext(new DefaultHttpContext())).And(x =\u003E GivenTheRoute(route)).And(x =\u003E GivenTheDownstreamContext(downstreamContexts)).When(x =\u003E WhenIAggregate()).Then(x =\u003E ThenTheContentIs(expected)).And(x =\u003E ThenTheErrorIsMapped()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestDefinedAggregator",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_aggregator",
        "Body": "{\r\n    var route = new RouteBuilder().Build();\r\n    var context = new DefaultHttpContext();\r\n    var contextA = new DefaultHttpContext();\r\n    contextA.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Tom\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    var contextB = new DefaultHttpContext();\r\n    contextB.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Laura\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    var contexts = new List\u003CHttpContext\u003E()\r\n    {\r\n        contextA,\r\n        contextB,\r\n    };\r\n    this.Given(_ =\u003E GivenTheProviderReturnsAggregator()).And(_ =\u003E GivenRoute(route)).And(_ =\u003E GivenContexts(contexts)).And(_ =\u003E GivenContext(context)).When(_ =\u003E WhenIAggregate()).Then(_ =\u003E ThenTheProviderIsCalled()).And(_ =\u003E ThenTheContentIsCorrect()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_find_aggregator",
        "Body": "{\r\n    var route = new RouteBuilder().Build();\r\n    var context = new DefaultHttpContext();\r\n    var contextA = new DefaultHttpContext();\r\n    contextA.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Tom\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    var contextB = new DefaultHttpContext();\r\n    contextB.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Laura\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    var contexts = new List\u003CHttpContext\u003E()\r\n    {\r\n        contextA,\r\n        contextB,\r\n    };\r\n    this.Given(_ =\u003E GivenTheProviderReturnsError()).And(_ =\u003E GivenRoute(route)).And(_ =\u003E GivenContexts(contexts)).And(_ =\u003E GivenContext(context)).When(_ =\u003E WhenIAggregate()).Then(_ =\u003E ThenTheProviderIsCalled()).And(_ =\u003E ThenTheErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UserDefinedResponseAggregatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_aggregator",
        "Body": "{\r\n    var route = new RouteBuilder().Build();\r\n    var context = new DefaultHttpContext();\r\n    var contextA = new DefaultHttpContext();\r\n    contextA.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Tom\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    var contextB = new DefaultHttpContext();\r\n    contextB.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Laura\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    var contexts = new List\u003CHttpContext\u003E()\r\n    {\r\n        contextA,\r\n        contextB,\r\n    };\r\n    this.Given(_ =\u003E GivenTheProviderReturnsAggregator()).And(_ =\u003E GivenRoute(route)).And(_ =\u003E GivenContexts(contexts)).And(_ =\u003E GivenContext(context)).When(_ =\u003E WhenIAggregate()).Then(_ =\u003E ThenTheProviderIsCalled()).And(_ =\u003E ThenTheContentIsCorrect()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_find_aggregator",
        "Body": "{\r\n    var route = new RouteBuilder().Build();\r\n    var context = new DefaultHttpContext();\r\n    var contextA = new DefaultHttpContext();\r\n    contextA.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Tom\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    var contextB = new DefaultHttpContext();\r\n    contextB.Items.UpsertDownstreamResponse(new DownstreamResponse(new StringContent(\u0022Laura\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022));\r\n    var contexts = new List\u003CHttpContext\u003E()\r\n    {\r\n        contextA,\r\n        contextB,\r\n    };\r\n    this.Given(_ =\u003E GivenTheProviderReturnsError()).And(_ =\u003E GivenRoute(route)).And(_ =\u003E GivenContexts(contexts)).And(_ =\u003E GivenContext(context)).When(_ =\u003E WhenIAggregate()).Then(_ =\u003E ThenTheProviderIsCalled()).And(_ =\u003E ThenTheErrorIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OcelotBuilderExtensionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_build",
        "Body": "{\r\n    var loggerFactory = new Mock\u003CIOcelotLoggerFactory\u003E();\r\n    var services = new ServiceCollection();\r\n    var options = new QoSOptionsBuilder().WithTimeoutValue(100).WithExceptionsAllowedBeforeBreaking(1).WithDurationOfBreak(200).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(options).Build();\r\n    var configuration = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).Build();\r\n    services.AddOcelot(configuration).AddPolly();\r\n    var provider = services.BuildServiceProvider();\r\n    var handler = provider.GetService\u003CQosDelegatingHandlerDelegate\u003E();\r\n    handler.ShouldNotBeNull();\r\n    var delgatingHandler = handler(route, loggerFactory.Object);\r\n    delgatingHandler.ShouldNotBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PollyQoSProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_build",
        "Body": "{\r\n    var options = new QoSOptionsBuilder().WithTimeoutValue(100).WithExceptionsAllowedBeforeBreaking(1).WithDurationOfBreak(200).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(options).Build();\r\n    var factory = new Mock\u003CIOcelotLoggerFactory\u003E();\r\n    var pollyQoSProvider = new PollyQoSProvider(route, factory.Object);\r\n    pollyQoSProvider.CircuitBreaker.ShouldNotBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AnyError",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_new_queries_to_downstream_request",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022query-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddQueriesToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheQueryIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_new_queries_to_downstream_request_and_preserve_other_queries",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022query-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(claims)).And(x =\u003E GivenTheDownstreamRequestHasQueryString(\u0022?test=1\u0026test=2\u0022)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddQueriesToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheQueryIsAdded()).And(x =\u003E TheTheQueryStringIs(\u0022?test=1\u0026test=2\u0026query-key=value\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_existing_queries_on_downstream_request",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022query-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).And(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenTheDownstreamRequestHasQueryString(\u0022query-key\u0022, \u0022initial\u0022)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddQueriesToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheQueryIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(new List\u003CClaim\u003E())).And(x =\u003E x.GivenTheClaimParserReturns(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new AnyError() }))).When(x =\u003E x.WhenIAddQueriesToTheRequest()).Then(x =\u003E x.ThenTheResultIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddQueriesToRequestTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_new_queries_to_downstream_request",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022query-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddQueriesToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheQueryIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_new_queries_to_downstream_request_and_preserve_other_queries",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022query-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(claims)).And(x =\u003E GivenTheDownstreamRequestHasQueryString(\u0022?test=1\u0026test=2\u0022)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddQueriesToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheQueryIsAdded()).And(x =\u003E TheTheQueryStringIs(\u0022?test=1\u0026test=2\u0026query-key=value\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_replace_existing_queries_on_downstream_request",
        "Body": "{\r\n    var claims = new List\u003CClaim\u003E\r\n    {\r\n        new Claim(\u0022test\u0022, \u0022data\u0022)\r\n    };\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022query-key\u0022, \u0022\u0022, \u0022\u0022, 0) })).And(x =\u003E x.GivenClaims(claims)).And(x =\u003E x.GivenTheDownstreamRequestHasQueryString(\u0022query-key\u0022, \u0022initial\u0022)).And(x =\u003E x.GivenTheClaimParserReturns(new OkResponse\u003Cstring\u003E(\u0022value\u0022))).When(x =\u003E x.WhenIAddQueriesToTheRequest()).Then(x =\u003E x.ThenTheResultIsSuccess()).And(x =\u003E x.ThenTheQueryIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAClaimToThing(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022\u0022, \u0022\u0022, \u0022\u0022, 0) })).Given(x =\u003E x.GivenClaims(new List\u003CClaim\u003E())).And(x =\u003E x.GivenTheClaimParserReturns(new ErrorResponse\u003Cstring\u003E(new List\u003CError\u003E { new AnyError() }))).When(x =\u003E x.WhenIAddQueriesToTheRequest()).Then(x =\u003E x.ThenTheResultIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimsToQueryStringMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_add_queries_correctly",
        "Body": "{\r\n    var downstreamRoute = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithClaimsToQueries(new List\u003CClaimToThing\u003E { new ClaimToThing(\u0022UserId\u0022, \u0022Subject\u0022, \u0022\u0022, 0) }).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E x.GivenTheAddHeadersToRequestReturnsOk()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheAddQueriesToRequestIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClientRateLimitMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_middleware_and_ratelimiting",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().Build();\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithEnableRateLimiting(true).WithRateLimitOptions(new RateLimitOptions(true, \u0022ClientId\u0022, () =\u003E new List\u003Cstring\u003E(), false, \u0022\u0022, \u0022\u0022, new RateLimitRule(\u00221s\u0022, 100, 3), 429)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(upstreamTemplate).Build();\r\n    var route = new RouteBuilder().WithDownstreamRoute(downstreamRoute).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    var downstreamRouteHolder = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003COcelot.DownstreamRouteFinder.UrlMatcher.PlaceholderNameAndValue\u003E(), route);\r\n    this.Given(x =\u003E x.WhenICallTheMiddlewareMultipleTimes(2, downstreamRouteHolder)).Then(x =\u003E x.ThenThereIsNoDownstreamResponse()).When(x =\u003E x.WhenICallTheMiddlewareMultipleTimes(3, downstreamRouteHolder)).Then(x =\u003E x.ThenTheResponseIs429()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_middleware_withWhitelistClient",
        "Body": "{\r\n    var downstreamRoute = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003COcelot.DownstreamRouteFinder.UrlMatcher.PlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithEnableRateLimiting(true).WithRateLimitOptions(new Ocelot.Configuration.RateLimitOptions(true, \u0022ClientId\u0022, () =\u003E new List\u003Cstring\u003E() { \u0022ocelotclient2\u0022 }, false, \u0022\u0022, \u0022\u0022, new RateLimitRule(\u00221s\u0022, 100, 3), 429)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    this.Given(x =\u003E x.WhenICallTheMiddlewareWithWhiteClient(downstreamRoute)).Then(x =\u003E x.ThenThereIsNoDownstreamResponse()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeStream",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_middleware_and_ratelimiting",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().Build();\r\n    var downstreamRoute = new DownstreamRouteBuilder().WithEnableRateLimiting(true).WithRateLimitOptions(new RateLimitOptions(true, \u0022ClientId\u0022, () =\u003E new List\u003Cstring\u003E(), false, \u0022\u0022, \u0022\u0022, new RateLimitRule(\u00221s\u0022, 100, 3), 429)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).WithUpstreamPathTemplate(upstreamTemplate).Build();\r\n    var route = new RouteBuilder().WithDownstreamRoute(downstreamRoute).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build();\r\n    var downstreamRouteHolder = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003COcelot.DownstreamRouteFinder.UrlMatcher.PlaceholderNameAndValue\u003E(), route);\r\n    this.Given(x =\u003E x.WhenICallTheMiddlewareMultipleTimes(2, downstreamRouteHolder)).Then(x =\u003E x.ThenThereIsNoDownstreamResponse()).When(x =\u003E x.WhenICallTheMiddlewareMultipleTimes(3, downstreamRouteHolder)).Then(x =\u003E x.ThenTheResponseIs429()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_middleware_withWhitelistClient",
        "Body": "{\r\n    var downstreamRoute = new Ocelot.DownstreamRouteFinder.DownstreamRouteHolder(new List\u003COcelot.DownstreamRouteFinder.UrlMatcher.PlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithEnableRateLimiting(true).WithRateLimitOptions(new Ocelot.Configuration.RateLimitOptions(true, \u0022ClientId\u0022, () =\u003E new List\u003Cstring\u003E() { \u0022ocelotclient2\u0022 }, false, \u0022\u0022, \u0022\u0022, new RateLimitRule(\u00221s\u0022, 100, 3), 429)).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    this.Given(x =\u003E x.WhenICallTheMiddlewareWithWhiteClient(downstreamRoute)).Then(x =\u003E x.ThenThereIsNoDownstreamResponse()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScopedRequestDataRepositoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_add_item",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenIHaveAnItemToAdd(\u0022blahh\u0022, new[] { 1, 2, 3, 4 })).When(x =\u003E x.WhenIAddTheItem()).Then(x =\u003E x.ThenTheItemIsAdded()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_item",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenThereIsAnItemInTheContext(\u0022chest\u0022)).When(x =\u003E x.WhenIGetTheItem()).Then(x =\u003E x.ThenTheItemIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DownstreamRequestCreatorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_create_downstream_request",
        "Body": "{\r\n    var request = new HttpRequestMessage(HttpMethod.Get, \u0022http://www.test.com\u0022);\r\n    var content = new StringContent(\u0022test\u0022);\r\n    request.Content = content;\r\n    this.Given(_ =\u003E GivenTheFrameworkIs(\u0022\u0022)).And(_ =\u003E GivenTheRequestIs(request)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDownstreamRequestHasABody()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_remove_body_for_http_methods",
        "Body": "{\r\n    var methods = new List\u003CHttpMethod\u003E\r\n    {\r\n        HttpMethod.Get,\r\n        HttpMethod.Head,\r\n        HttpMethod.Delete,\r\n        HttpMethod.Trace\r\n    };\r\n    var request = new HttpRequestMessage(HttpMethod.Get, \u0022http://www.test.com\u0022);\r\n    var content = new StringContent(\u0022test\u0022);\r\n    request.Content = content;\r\n    methods.ForEach(m =\u003E\r\n    {\r\n        this.Given(_ =\u003E GivenTheFrameworkIs(\u0022.NET Framework\u0022)).And(_ =\u003E GivenTheRequestIs(request)).When(_ =\u003E WhenICreate()).Then(_ =\u003E ThenTheDownstreamRequestDoesNotHaveABody()).BDDfy();\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DownstreamRequestInitialiserMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "Should_handle_valid_httpRequest",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheHttpContextContainsARequest()).And(_ =\u003E GivenTheMapperWillReturnAMappedRequest()).When(_ =\u003E WhenTheMiddlewareIsInvoked()).Then(_ =\u003E ThenTheContexRequestIsMappedToADownstreamRequest()).And(_ =\u003E ThenTheDownstreamRequestIsStored()).And(_ =\u003E ThenTheNextMiddlewareIsInvoked()).And(_ =\u003E ThenTheDownstreamRequestMethodIs(\u0022GET\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_map_downstream_route_method_to_downstream_request",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheHttpContextContainsARequest()).And(_ =\u003E GivenTheMapperWillReturnAMappedRequest()).When(_ =\u003E WhenTheMiddlewareIsInvoked()).Then(_ =\u003E ThenTheContexRequestIsMappedToADownstreamRequest()).And(_ =\u003E ThenTheDownstreamRequestIsStored()).And(_ =\u003E ThenTheNextMiddlewareIsInvoked()).And(_ =\u003E ThenTheDownstreamRequestMethodIs(\u0022GET\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_handle_mapping_failure",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheHttpContextContainsARequest()).And(_ =\u003E GivenTheMapperWillReturnAnError()).When(_ =\u003E WhenTheMiddlewareIsInvoked()).And(_ =\u003E ThenTheDownstreamRequestIsNotStored()).And(_ =\u003E ThenAPipelineErrorIsStored()).And(_ =\u003E ThenTheNextMiddlewareIsNotInvoked()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DownstreamRequestTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_have_question_mark_with_question_mark_prefixed",
        "Body": "{\r\n    var httpRequestMessage = new HttpRequestMessage();\r\n    httpRequestMessage.RequestUri = new Uri(\u0022https://example.com/a?b=c\u0022);\r\n    var downstreamRequest = new DownstreamRequest(httpRequestMessage);\r\n    var result = downstreamRequest.ToHttpRequestMessage();\r\n    result.RequestUri.Query.ShouldBe(\u0022?b=c\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RequestMapperTests",
    "Message": null,
    "Methods": [
      {
        "Name": "Should_map_all_headers",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheInputRequestHasHeaders()).And(_ =\u003E GivenTheInputRequestHasMethod(\u0022GET\u0022)).And(_ =\u003E GivenTheInputRequestHasAValidUri()).And(_ =\u003E GivenTheDownstreamRoute()).When(_ =\u003E WhenMapped()).Then(_ =\u003E ThenNoErrorIsReturned()).And(_ =\u003E ThenTheMappedRequestHasEachHeader()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_handle_no_headers",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheInputRequestHasNoHeaders()).And(_ =\u003E GivenTheInputRequestHasMethod(\u0022GET\u0022)).And(_ =\u003E GivenTheInputRequestHasAValidUri()).And(_ =\u003E GivenTheDownstreamRoute()).When(_ =\u003E WhenMapped()).Then(_ =\u003E ThenNoErrorIsReturned()).And(_ =\u003E ThenTheMappedRequestHasNoHeaders()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_map_content",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheInputRequestHasContent(\u0022This is my content\u0022)).And(_ =\u003E GivenTheInputRequestHasMethod(\u0022GET\u0022)).And(_ =\u003E GivenTheInputRequestHasAValidUri()).And(_ =\u003E GivenTheDownstreamRoute()).When(_ =\u003E WhenMapped()).Then(_ =\u003E ThenNoErrorIsReturned()).And(_ =\u003E ThenTheMappedRequestHasContent(\u0022This is my content\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_handle_no_content",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheInputRequestHasNullContent()).And(_ =\u003E GivenTheInputRequestHasMethod(\u0022GET\u0022)).And(_ =\u003E GivenTheInputRequestHasAValidUri()).And(_ =\u003E GivenTheDownstreamRoute()).When(_ =\u003E WhenMapped()).Then(_ =\u003E ThenNoErrorIsReturned()).And(_ =\u003E ThenTheMappedRequestHasNoContent()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_handle_no_content_type",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheInputRequestHasNoContentType()).And(_ =\u003E GivenTheInputRequestHasMethod(\u0022GET\u0022)).And(_ =\u003E GivenTheInputRequestHasAValidUri()).And(_ =\u003E GivenTheDownstreamRoute()).When(_ =\u003E WhenMapped()).Then(_ =\u003E ThenNoErrorIsReturned()).And(_ =\u003E ThenTheMappedRequestHasNoContent()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_handle_no_content_length",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheInputRequestHasNoContentLength()).And(_ =\u003E GivenTheInputRequestHasMethod(\u0022GET\u0022)).And(_ =\u003E GivenTheInputRequestHasAValidUri()).And(_ =\u003E GivenTheDownstreamRoute()).When(_ =\u003E WhenMapped()).Then(_ =\u003E ThenNoErrorIsReturned()).And(_ =\u003E ThenTheMappedRequestHasNoContent()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_map_content_headers",
        "Body": "{\r\n    byte[] md5bytes = new byte[0];\r\n    using (var md5 = MD5.Create())\r\n    {\r\n        md5bytes = md5.ComputeHash(Encoding.UTF8.GetBytes(\u0022some md5\u0022));\r\n    }\r\n\r\n    this.Given(_ =\u003E GivenTheInputRequestHasContent(\u0022This is my content\u0022)).And(_ =\u003E GivenTheContentTypeIs(\u0022application/json\u0022)).And(_ =\u003E GivenTheContentEncodingIs(\u0022gzip, compress\u0022)).And(_ =\u003E GivenTheContentLanguageIs(\u0022english\u0022)).And(_ =\u003E GivenTheContentLocationIs(\u0022/my-receipts/38\u0022)).And(_ =\u003E GivenTheContentRangeIs(\u0022bytes 1-2/*\u0022)).And(_ =\u003E GivenTheContentDispositionIs(\u0022inline\u0022)).And(_ =\u003E GivenTheContentMD5Is(md5bytes)).And(_ =\u003E GivenTheInputRequestHasMethod(\u0022GET\u0022)).And(_ =\u003E GivenTheInputRequestHasAValidUri()).And(_ =\u003E GivenTheDownstreamRoute()).When(_ =\u003E WhenMapped()).Then(_ =\u003E ThenNoErrorIsReturned()).And(_ =\u003E ThenTheMappedRequestHasContentTypeHeader(\u0022application/json\u0022)).And(_ =\u003E ThenTheMappedRequestHasContentEncodingHeader(\u0022gzip\u0022, \u0022compress\u0022)).And(_ =\u003E ThenTheMappedRequestHasContentLanguageHeader(\u0022english\u0022)).And(_ =\u003E ThenTheMappedRequestHasContentLocationHeader(\u0022/my-receipts/38\u0022)).And(_ =\u003E ThenTheMappedRequestHasContentMD5Header(md5bytes)).And(_ =\u003E ThenTheMappedRequestHasContentRangeHeader()).And(_ =\u003E ThenTheMappedRequestHasContentDispositionHeader(\u0022inline\u0022)).And(_ =\u003E ThenTheMappedRequestHasContentSize(\u0022This is my content\u0022.Length)).And(_ =\u003E ThenTheContentHeadersAreNotAddedToNonContentHeaders()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_add_content_headers",
        "Body": "{\r\n    this.Given(_ =\u003E GivenTheInputRequestHasContent(\u0022This is my content\u0022)).And(_ =\u003E GivenTheContentTypeIs(\u0022application/json\u0022)).And(_ =\u003E GivenTheInputRequestHasMethod(\u0022POST\u0022)).And(_ =\u003E GivenTheInputRequestHasAValidUri()).And(_ =\u003E GivenTheDownstreamRoute()).When(_ =\u003E WhenMapped()).Then(_ =\u003E ThenNoErrorIsReturned()).And(_ =\u003E ThenTheMappedRequestHasContentTypeHeader(\u0022application/json\u0022)).And(_ =\u003E ThenTheMappedRequestHasContentSize(\u0022This is my content\u0022.Length)).And(_ =\u003E ThenTheOtherContentTypeHeadersAreNotMapped()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DelegatingHandlerHandlerProviderFactoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_follow_ordering_add_specifics",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandler\u0022, \u0022FakeDelegatingHandlerTwo\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerThree, FakeDelegatingHandlerFour\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(6)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(3)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(5)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_order_specifics_and_globals",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandlerTwo\u0022, \u0022FakeDelegatingHandler\u0022, \u0022FakeDelegatingHandlerFour\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerFour, FakeDelegatingHandlerThree\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(6)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)) //first because global not in config\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)) //first from config\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(2)) //second from config\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(3)) //third from config (global)\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(5)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_order_specifics",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandlerTwo\u0022, \u0022FakeDelegatingHandler\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerThree, FakeDelegatingHandlerFour\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(6)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(3)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(5)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_order_and_only_add_specifics_in_config",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandler\u0022, }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerThree, FakeDelegatingHandlerFour\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(5)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(3)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(4)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_dont_add_specifics",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(3)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_apply_re_route_specific",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandler\u0022, \u0022FakeDelegatingHandlerTwo\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(2)).And(x =\u003E ThenTheDelegatesAreAddedCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_all_from_all_routes_provider_and_qos",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(3)).And(x =\u003E ThenTheDelegatesAreAddedCorrectly()).And(x =\u003E ThenItIsQosHandler(2)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_with_no_delegates",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheServiceProviderReturnsNothing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenNoDelegatesAreInTheProvider()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_with_qos_delegate",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheServiceProviderReturnsNothing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(1)).And(x =\u003E ThenItIsQosHandler(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_with_qos_delegate_when_timeout_value_set",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheServiceProviderReturnsNothing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(1)).And(x =\u003E ThenItIsQosHandler(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_error_and_return_no_qos_provider_delegate_when_qos_factory_returns_error",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturnsError()).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CNoQosDelegatingHandler\u003E(3)).And(_ =\u003E ThenTheWarningIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_error_and_return_no_qos_provider_delegate_when_qos_factory_returns_null",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturnsNull()).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CNoQosDelegatingHandler\u003E(3)).And(_ =\u003E ThenTheWarningIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeTracingHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "should_follow_ordering_add_specifics",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandler\u0022, \u0022FakeDelegatingHandlerTwo\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerThree, FakeDelegatingHandlerFour\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(6)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(3)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(5)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_order_specifics_and_globals",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandlerTwo\u0022, \u0022FakeDelegatingHandler\u0022, \u0022FakeDelegatingHandlerFour\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerFour, FakeDelegatingHandlerThree\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(6)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)) //first because global not in config\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)) //first from config\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(2)) //second from config\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(3)) //third from config (global)\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(5)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_order_specifics",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandlerTwo\u0022, \u0022FakeDelegatingHandler\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerThree, FakeDelegatingHandlerFour\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(6)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(3)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(5)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_order_and_only_add_specifics_in_config",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandler\u0022, }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerThree, FakeDelegatingHandlerFour\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(5)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(3)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(4)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_dont_add_specifics",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(3)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_apply_re_route_specific",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandler\u0022, \u0022FakeDelegatingHandlerTwo\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(2)).And(x =\u003E ThenTheDelegatesAreAddedCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_all_from_all_routes_provider_and_qos",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(3)).And(x =\u003E ThenTheDelegatesAreAddedCorrectly()).And(x =\u003E ThenItIsQosHandler(2)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_with_no_delegates",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheServiceProviderReturnsNothing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenNoDelegatesAreInTheProvider()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_with_qos_delegate",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheServiceProviderReturnsNothing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(1)).And(x =\u003E ThenItIsQosHandler(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_with_qos_delegate_when_timeout_value_set",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheServiceProviderReturnsNothing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(1)).And(x =\u003E ThenItIsQosHandler(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_error_and_return_no_qos_provider_delegate_when_qos_factory_returns_error",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturnsError()).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CNoQosDelegatingHandler\u003E(3)).And(_ =\u003E ThenTheWarningIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_error_and_return_no_qos_provider_delegate_when_qos_factory_returns_null",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturnsNull()).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CNoQosDelegatingHandler\u003E(3)).And(_ =\u003E ThenTheWarningIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeQoSHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "should_follow_ordering_add_specifics",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandler\u0022, \u0022FakeDelegatingHandlerTwo\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerThree, FakeDelegatingHandlerFour\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(6)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(3)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(5)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_order_specifics_and_globals",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandlerTwo\u0022, \u0022FakeDelegatingHandler\u0022, \u0022FakeDelegatingHandlerFour\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerFour, FakeDelegatingHandlerThree\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(6)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)) //first because global not in config\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)) //first from config\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(2)) //second from config\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(3)) //third from config (global)\r\n    .And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(5)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_order_specifics",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandlerTwo\u0022, \u0022FakeDelegatingHandler\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerThree, FakeDelegatingHandlerFour\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(6)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(3)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(5)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_order_and_only_add_specifics_in_config",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandler\u0022, }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandlerThree, FakeDelegatingHandlerFour\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(5)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerThree\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerFour\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(3)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(4)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_follow_ordering_dont_add_specifics",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeQoSHandler\u003E(3)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_apply_re_route_specific",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithDelegatingHandlers(new List\u003Cstring\u003E { \u0022FakeDelegatingHandler\u0022, \u0022FakeDelegatingHandlerTwo\u0022 }).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(2)).And(x =\u003E ThenTheDelegatesAreAddedCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_all_from_all_routes_provider_and_qos",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(3)).And(x =\u003E ThenTheDelegatesAreAddedCorrectly()).And(x =\u003E ThenItIsQosHandler(2)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_with_no_delegates",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheServiceProviderReturnsNothing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenNoDelegatesAreInTheProvider()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_with_qos_delegate",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheServiceProviderReturnsNothing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(1)).And(x =\u003E ThenItIsQosHandler(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_with_qos_delegate_when_timeout_value_set",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturns(new FakeQoSHandler())).And(x =\u003E GivenTheServiceProviderReturnsNothing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(1)).And(x =\u003E ThenItIsQosHandler(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_error_and_return_no_qos_provider_delegate_when_qos_factory_returns_error",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturnsError()).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CNoQosDelegatingHandler\u003E(3)).And(_ =\u003E ThenTheWarningIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_error_and_return_no_qos_provider_delegate_when_qos_factory_returns_null",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().WithTimeoutValue(1).WithDurationOfBreak(1).WithExceptionsAllowedBeforeBreaking(1).Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(true, true, true, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).Build();\r\n    this.Given(x =\u003E GivenTheFollowingRequest(route)).And(x =\u003E GivenTheQosFactoryReturnsNull()).And(x =\u003E GivenTheTracingFactoryReturns()).And(x =\u003E GivenTheServiceProviderReturnsGlobalDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).And(x =\u003E GivenTheServiceProviderReturnsSpecificDelegatingHandlers\u003CFakeDelegatingHandler, FakeDelegatingHandlerTwo\u003E()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenThereIsDelegatesInProvider(4)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandler\u003E(0)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeDelegatingHandlerTwo\u003E(1)).And(x =\u003E ThenHandlerAtPositionIs\u003CFakeTracingHandler\u003E(2)).And(x =\u003E ThenHandlerAtPositionIs\u003CNoQosDelegatingHandler\u003E(3)).And(_ =\u003E ThenTheWarningIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpClientBuilderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_build_http_client",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build()).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    this.Given(x =\u003E GivenTheFactoryReturns()).And(x =\u003E GivenARequest(route)).When(x =\u003E WhenIBuild()).Then(x =\u003E ThenTheHttpClientShouldNotBeNull()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_from_cache",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build()).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    this.Given(x =\u003E GivenARealCache()).And(x =\u003E GivenTheFactoryReturns()).And(x =\u003E GivenARequest(route)).And(x =\u003E WhenIBuildTheFirstTime()).And(x =\u003E WhenISave()).And(x =\u003E WhenIBuildAgain()).And(x =\u003E WhenISave()).When(x =\u003E WhenIBuildAgain()).Then(x =\u003E ThenTheHttpClientIsFromTheCache()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_from_cache_with_different_query_string",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build()).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    this.Given(x =\u003E GivenARealCache()).And(x =\u003E GivenTheFactoryReturns()).And(x =\u003E GivenARequest(route, \u0022http://wwww.someawesomewebsite.com/woot?badman=1\u0022)).And(x =\u003E WhenIBuildTheFirstTime()).And(x =\u003E WhenISave()).And(x =\u003E WhenIBuildAgain()).And(x =\u003E GivenARequest(route, \u0022http://wwww.someawesomewebsite.com/woot?badman=2\u0022)).And(x =\u003E WhenISave()).When(x =\u003E WhenIBuildAgain()).Then(x =\u003E ThenTheHttpClientIsFromTheCache()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_get_from_cache_with_different_query_string",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var routeA = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithContainsQueryString(true).WithOriginalValue(\u0022\u0022).Build()).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    var routeB = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithContainsQueryString(true).WithOriginalValue(\u0022\u0022).Build()).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    this.Given(x =\u003E GivenARealCache()).And(x =\u003E GivenTheFactoryReturns()).And(x =\u003E GivenARequest(routeA, \u0022http://wwww.someawesomewebsite.com/woot?badman=1\u0022)).And(x =\u003E WhenIBuildTheFirstTime()).And(x =\u003E WhenISave()).And(x =\u003E WhenIBuildAgain()).And(x =\u003E GivenARequest(routeB, \u0022http://wwww.someawesomewebsite.com/woot?badman=2\u0022)).And(x =\u003E WhenISave()).When(x =\u003E WhenIBuildAgain()).Then(x =\u003E ThenTheHttpClientIsNotFromTheCache()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_if_ignoring_ssl_errors",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build()).WithQosOptions(new QoSOptionsBuilder().Build()).WithDangerousAcceptAnyServerCertificateValidator(true).Build();\r\n    this.Given(x =\u003E GivenTheFactoryReturns()).And(x =\u003E GivenARequest(route)).When(x =\u003E WhenIBuild()).Then(x =\u003E ThenTheHttpClientShouldNotBeNull()).Then(x =\u003E ThenTheDangerousAcceptAnyServerCertificateValidatorWarningIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_delegating_handlers_in_order",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build()).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    var fakeOne = new FakeDelegatingHandler();\r\n    var fakeTwo = new FakeDelegatingHandler();\r\n    var handlers = new List\u003CFunc\u003CDelegatingHandler\u003E\u003E()\r\n    {\r\n        () =\u003E fakeOne,\r\n        () =\u003E fakeTwo\r\n    };\r\n    this.Given(x =\u003E GivenTheFactoryReturns(handlers)).And(x =\u003E GivenARequest(route)).And(x =\u003E WhenIBuild()).When(x =\u003E WhenICallTheClient()).Then(x =\u003E ThenTheFakeAreHandledInOrder(fakeOne, fakeTwo)).And(x =\u003E ThenSomethingIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_re_use_cookies_from_container",
        "Body": "{\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, true, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build()).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    this.Given(_ =\u003E GivenADownstreamService()).And(_ =\u003E GivenARequest(route)).And(_ =\u003E GivenTheFactoryReturnsNothing()).And(_ =\u003E WhenIBuild()).And(_ =\u003E WhenICallTheClient(\u0022http://localhost:5003\u0022)).And(_ =\u003E ThenTheCookieIsSet()).And(_ =\u003E GivenTheClientIsCached()).And(_ =\u003E WhenIBuild()).When(_ =\u003E WhenICallTheClient(\u0022http://localhost:5003\u0022)).Then(_ =\u003E ThenTheResponseIsOk()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OkDelegatingHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_request_correctly",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build();\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(upstreamTemplate).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Items.UpsertDownstreamRoute(route);\r\n    httpContext.Items.UpsertDownstreamRequest(new DownstreamRequest(new HttpRequestMessage() { RequestUri = new Uri(\u0022http://www.bbc.co.uk\u0022) }));\r\n    this.Given(x =\u003E x.GivenTheRequestIs(httpContext)).And(x =\u003E GivenTheHouseReturnsOkHandler()).When(x =\u003E x.WhenIGetResponse()).Then(x =\u003E x.ThenTheResponseIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_request_unable_to_complete_request",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build();\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(upstreamTemplate).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Items.UpsertDownstreamRoute(route);\r\n    httpContext.Items.UpsertDownstreamRequest(new DownstreamRequest(new HttpRequestMessage() { RequestUri = new Uri(\u0022http://localhost:60080\u0022) }));\r\n    this.Given(x =\u003E x.GivenTheRequestIs(httpContext)).When(x =\u003E x.WhenIGetResponse()).Then(x =\u003E x.ThenTheResponseIsCalledError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "http_client_request_times_out",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build();\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(upstreamTemplate).WithQosOptions(new QoSOptionsBuilder().WithTimeoutValue(1).Build()).Build();\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Items.UpsertDownstreamRoute(route);\r\n    httpContext.Items.UpsertDownstreamRequest(new DownstreamRequest(new HttpRequestMessage() { RequestUri = new Uri(\u0022http://localhost:60080\u0022) }));\r\n    this.Given(_ =\u003E GivenTheRequestIs(httpContext)).And(_ =\u003E GivenTheHouseReturnsTimeoutHandler()).When(_ =\u003E WhenIGetResponse()).Then(_ =\u003E ThenTheResponseIsCalledError()).And(_ =\u003E ThenTheErrorIsTimeout()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TimeoutDelegatingHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_request_correctly",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build();\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(upstreamTemplate).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Items.UpsertDownstreamRoute(route);\r\n    httpContext.Items.UpsertDownstreamRequest(new DownstreamRequest(new HttpRequestMessage() { RequestUri = new Uri(\u0022http://www.bbc.co.uk\u0022) }));\r\n    this.Given(x =\u003E x.GivenTheRequestIs(httpContext)).And(x =\u003E GivenTheHouseReturnsOkHandler()).When(x =\u003E x.WhenIGetResponse()).Then(x =\u003E x.ThenTheResponseIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_request_unable_to_complete_request",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build();\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(upstreamTemplate).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Items.UpsertDownstreamRoute(route);\r\n    httpContext.Items.UpsertDownstreamRequest(new DownstreamRequest(new HttpRequestMessage() { RequestUri = new Uri(\u0022http://localhost:60080\u0022) }));\r\n    this.Given(x =\u003E x.GivenTheRequestIs(httpContext)).When(x =\u003E x.WhenIGetResponse()).Then(x =\u003E x.ThenTheResponseIsCalledError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "http_client_request_times_out",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build();\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(upstreamTemplate).WithQosOptions(new QoSOptionsBuilder().WithTimeoutValue(1).Build()).Build();\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Items.UpsertDownstreamRoute(route);\r\n    httpContext.Items.UpsertDownstreamRequest(new DownstreamRequest(new HttpRequestMessage() { RequestUri = new Uri(\u0022http://localhost:60080\u0022) }));\r\n    this.Given(_ =\u003E GivenTheRequestIs(httpContext)).And(_ =\u003E GivenTheHouseReturnsTimeoutHandler()).When(_ =\u003E WhenIGetResponse()).Then(_ =\u003E ThenTheResponseIsCalledError()).And(_ =\u003E ThenTheErrorIsTimeout()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpClientHttpRequesterTest",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_request_correctly",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build();\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(upstreamTemplate).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Items.UpsertDownstreamRoute(route);\r\n    httpContext.Items.UpsertDownstreamRequest(new DownstreamRequest(new HttpRequestMessage() { RequestUri = new Uri(\u0022http://www.bbc.co.uk\u0022) }));\r\n    this.Given(x =\u003E x.GivenTheRequestIs(httpContext)).And(x =\u003E GivenTheHouseReturnsOkHandler()).When(x =\u003E x.WhenIGetResponse()).Then(x =\u003E x.ThenTheResponseIsCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_request_unable_to_complete_request",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build();\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(upstreamTemplate).WithQosOptions(new QoSOptionsBuilder().Build()).Build();\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Items.UpsertDownstreamRoute(route);\r\n    httpContext.Items.UpsertDownstreamRequest(new DownstreamRequest(new HttpRequestMessage() { RequestUri = new Uri(\u0022http://localhost:60080\u0022) }));\r\n    this.Given(x =\u003E x.GivenTheRequestIs(httpContext)).When(x =\u003E x.WhenIGetResponse()).Then(x =\u003E x.ThenTheResponseIsCalledError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "http_client_request_times_out",
        "Body": "{\r\n    var upstreamTemplate = new UpstreamPathTemplateBuilder().WithOriginalValue(\u0022\u0022).Build();\r\n    var qosOptions = new QoSOptionsBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().WithQosOptions(qosOptions).WithHttpHandlerOptions(new HttpHandlerOptions(false, false, false, true, int.MaxValue)).WithLoadBalancerKey(\u0022\u0022).WithUpstreamPathTemplate(upstreamTemplate).WithQosOptions(new QoSOptionsBuilder().WithTimeoutValue(1).Build()).Build();\r\n    var httpContext = new DefaultHttpContext();\r\n    httpContext.Items.UpsertDownstreamRoute(route);\r\n    httpContext.Items.UpsertDownstreamRequest(new DownstreamRequest(new HttpRequestMessage() { RequestUri = new Uri(\u0022http://localhost:60080\u0022) }));\r\n    this.Given(_ =\u003E GivenTheRequestIs(httpContext)).And(_ =\u003E GivenTheHouseReturnsTimeoutHandler()).When(_ =\u003E WhenIGetResponse()).Then(_ =\u003E ThenTheResponseIsCalledError()).And(_ =\u003E ThenTheErrorIsTimeout()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SomeException",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_default_error_because_mappers_are_null",
        "Body": "{\r\n    var error = _mapper.Map(new Exception());\r\n    error.ShouldBeOfType\u003CUnableToCompleteRequestError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_request_canceled",
        "Body": "{\r\n    var error = _mapper.Map(new OperationCanceledException());\r\n    error.ShouldBeOfType\u003CRequestCanceledError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_ConnectionToDownstreamServiceError",
        "Body": "{\r\n    var error = _mapper.Map(new HttpRequestException());\r\n    error.ShouldBeOfType\u003CConnectionToDownstreamServiceError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_request_canceled_for_subtype",
        "Body": "{\r\n    var error = _mapper.Map(new SomeException());\r\n    error.ShouldBeOfType\u003CRequestCanceledError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_from_mapper",
        "Body": "{\r\n    var errorMapping = new Dictionary\u003CType, Func\u003CException, Error\u003E\u003E\r\n    {\r\n        {\r\n            typeof(TaskCanceledException),\r\n            e =\u003E new AnyError()\r\n        },\r\n    };\r\n    _services.AddSingleton(errorMapping);\r\n    var provider = _services.BuildServiceProvider();\r\n    _mapper = new HttpExeptionToErrorMapper(provider);\r\n    var error = _mapper.Map(new TaskCanceledException());\r\n    error.ShouldBeOfType\u003CAnyError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpExeptionToErrorMapperTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_default_error_because_mappers_are_null",
        "Body": "{\r\n    var error = _mapper.Map(new Exception());\r\n    error.ShouldBeOfType\u003CUnableToCompleteRequestError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_request_canceled",
        "Body": "{\r\n    var error = _mapper.Map(new OperationCanceledException());\r\n    error.ShouldBeOfType\u003CRequestCanceledError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_ConnectionToDownstreamServiceError",
        "Body": "{\r\n    var error = _mapper.Map(new HttpRequestException());\r\n    error.ShouldBeOfType\u003CConnectionToDownstreamServiceError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_request_canceled_for_subtype",
        "Body": "{\r\n    var error = _mapper.Map(new SomeException());\r\n    error.ShouldBeOfType\u003CRequestCanceledError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_error_from_mapper",
        "Body": "{\r\n    var errorMapping = new Dictionary\u003CType, Func\u003CException, Error\u003E\u003E\r\n    {\r\n        {\r\n            typeof(TaskCanceledException),\r\n            e =\u003E new AnyError()\r\n        },\r\n    };\r\n    _services.AddSingleton(errorMapping);\r\n    var provider = _services.BuildServiceProvider();\r\n    _mapper = new HttpExeptionToErrorMapper(provider);\r\n    var error = _mapper.Map(new TaskCanceledException());\r\n    error.ShouldBeOfType\u003CAnyError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpRequesterMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_services_correctly",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheRequestIs()).And(x =\u003E x.GivenTheRequesterReturns(new OkResponse\u003CHttpResponseMessage\u003E(new HttpResponseMessage(System.Net.HttpStatusCode.OK)))).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheDownstreamResponseIsSet()).Then(x =\u003E InformationIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_set_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheRequestIs()).And(x =\u003E x.GivenTheRequesterReturns(new ErrorResponse\u003CHttpResponseMessage\u003E(new AnyError()))).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheErrorIsSet()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_downstream_internal_server_error",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheRequestIs()).And(x =\u003E x.GivenTheRequesterReturns(new OkResponse\u003CHttpResponseMessage\u003E(new HttpResponseMessage(System.Net.HttpStatusCode.InternalServerError)))).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.WarningIsLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeDelegatingHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_error",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().Build();\r\n    var handler = _factory.Get(downstreamRoute);\r\n    handler.IsError.ShouldBeTrue();\r\n    handler.Errors[0].ShouldBeOfType\u003CUnableToFindQoSProviderError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_handler",
        "Body": "{\r\n    _services = new ServiceCollection();\r\n    DelegatingHandler QosDelegatingHandlerDelegate(DownstreamRoute a, IOcelotLoggerFactory b) =\u003E new FakeDelegatingHandler();\r\n    _services.AddSingleton\u003CQosDelegatingHandlerDelegate\u003E(QosDelegatingHandlerDelegate);\r\n    var provider = _services.BuildServiceProvider();\r\n    _factory = new QoSFactory(provider, _loggerFactory.Object);\r\n    var downstreamRoute = new DownstreamRouteBuilder().Build();\r\n    var handler = _factory.Get(downstreamRoute);\r\n    handler.IsError.ShouldBeFalse();\r\n    handler.Data.ShouldBeOfType\u003CFakeDelegatingHandler\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "QoSFactoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_error",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteBuilder().Build();\r\n    var handler = _factory.Get(downstreamRoute);\r\n    handler.IsError.ShouldBeTrue();\r\n    handler.Errors[0].ShouldBeOfType\u003CUnableToFindQoSProviderError\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_handler",
        "Body": "{\r\n    _services = new ServiceCollection();\r\n    DelegatingHandler QosDelegatingHandlerDelegate(DownstreamRoute a, IOcelotLoggerFactory b) =\u003E new FakeDelegatingHandler();\r\n    _services.AddSingleton\u003CQosDelegatingHandlerDelegate\u003E(QosDelegatingHandlerDelegate);\r\n    var provider = _services.BuildServiceProvider();\r\n    _factory = new QoSFactory(provider, _loggerFactory.Object);\r\n    var downstreamRoute = new DownstreamRouteBuilder().Build();\r\n    var handler = _factory.Get(downstreamRoute);\r\n    handler.IsError.ShouldBeFalse();\r\n    handler.Data.ShouldBeOfType\u003CFakeDelegatingHandler\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TracingHandlerFactoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return",
        "Body": "{\r\n    var handler = _factory.Get();\r\n    handler.ShouldBeOfType\u003COcelotHttpTracingHandler\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RequestIdMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_pass_down_request_id_from_upstream_request",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithRequestIdKey(\u0022LSRequestId\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    var requestId = Guid.NewGuid().ToString();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E GivenThereIsNoGlobalRequestId()).And(x =\u003E x.GivenTheRequestIdIsAddedToTheRequest(\u0022LSRequestId\u0022, requestId)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheTraceIdIs(requestId)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_request_id_when_not_on_upstream_request",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithRequestIdKey(\u0022LSRequestId\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E GivenThereIsNoGlobalRequestId()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheTraceIdIsAnything()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_request_id_scoped_repo_for_logging_later",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithRequestIdKey(\u0022LSRequestId\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    var requestId = Guid.NewGuid().ToString();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E GivenThereIsNoGlobalRequestId()).And(x =\u003E x.GivenTheRequestIdIsAddedToTheRequest(\u0022LSRequestId\u0022, requestId)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheTraceIdIs(requestId)).And(x =\u003E ThenTheRequestIdIsSaved()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_update_request_id_scoped_repo_for_logging_later",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithRequestIdKey(\u0022LSRequestId\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    var requestId = Guid.NewGuid().ToString();\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E GivenTheRequestIdWasSetGlobally()).And(x =\u003E x.GivenTheRequestIdIsAddedToTheRequest(\u0022LSRequestId\u0022, requestId)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheTraceIdIs(requestId)).And(x =\u003E ThenTheRequestIdIsUpdated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_update_if_global_request_id_is_same_as_re_route_request_id",
        "Body": "{\r\n    var downstreamRoute = new DownstreamRouteHolder(new List\u003CPlaceholderNameAndValue\u003E(), new RouteBuilder().WithDownstreamRoute(new DownstreamRouteBuilder().WithDownstreamPathTemplate(\u0022any old string\u0022).WithRequestIdKey(\u0022LSRequestId\u0022).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build()).WithUpstreamHttpMethod(new List\u003Cstring\u003E { \u0022Get\u0022 }).Build());\r\n    var requestId = \u0022alreadyset\u0022;\r\n    this.Given(x =\u003E x.GivenTheDownStreamRouteIs(downstreamRoute)).And(x =\u003E GivenTheRequestIdWasSetGlobally()).And(x =\u003E x.GivenTheRequestIdIsAddedToTheRequest(\u0022LSRequestId\u0022, requestId)).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheTraceIdIs(requestId)).And(x =\u003E ThenTheRequestIdIsNotUpdated()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ErrorsToHttpStatusCodeMapperTests",
    "Message": null,
    "Methods": [
      {
        "Name": "AuthenticationErrorsHaveHighestPriority",
        "Body": "{\r\n    var errors = new List\u003COcelotErrorCode\u003E\r\n    {\r\n        OcelotErrorCode.CannotAddDataError,\r\n        OcelotErrorCode.CannotFindClaimError,\r\n        OcelotErrorCode.UnauthenticatedError,\r\n        OcelotErrorCode.RequestTimedOutError,\r\n    };\r\n    ShouldMapErrorsToStatusCode(errors, HttpStatusCode.Unauthorized);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AuthorizationErrorsHaveSecondHighestPriority",
        "Body": "{\r\n    var errors = new List\u003COcelotErrorCode\u003E\r\n    {\r\n        OcelotErrorCode.CannotAddDataError,\r\n        OcelotErrorCode.CannotFindClaimError,\r\n        OcelotErrorCode.RequestTimedOutError\r\n    };\r\n    ShouldMapErrorsToStatusCode(errors, HttpStatusCode.Forbidden);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServiceUnavailableErrorsHaveThirdHighestPriority",
        "Body": "{\r\n    var errors = new List\u003COcelotErrorCode\u003E\r\n    {\r\n        OcelotErrorCode.CannotAddDataError,\r\n        OcelotErrorCode.RequestTimedOutError,\r\n    };\r\n    ShouldMapErrorsToStatusCode(errors, HttpStatusCode.ServiceUnavailable);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "check_we_have_considered_all_errors_in_these_tests",
        "Body": "{\r\n    // If this test fails then it\u0027s because the number of error codes has changed.\r\n    // You should make the appropriate changes to the test cases here to ensure\r\n    // they cover all the error codes, and then modify this assertion.\r\n    Enum.GetNames(typeof(OcelotErrorCode)).Length.ShouldBe(41, \u0022Looks like the number of error codes has changed. Do you need to modify ErrorsToHttpStatusCodeMapper?\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpContextResponderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_remove_transfer_encoding_header",
        "Body": "{\r\n    var httpContext = new DefaultHttpContext();\r\n    var response = new DownstreamResponse(new StringContent(\u0022\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022Transfer-Encoding\u0022, new List\u003Cstring\u003E { \u0022woop\u0022 }) }, \u0022some reason\u0022);\r\n    _responder.SetResponseOnHttpContext(httpContext, response).GetAwaiter().GetResult();\r\n    var header = httpContext.Response.Headers[\u0022Transfer-Encoding\u0022];\r\n    header.ShouldBeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_ignore_content_if_null",
        "Body": "{\r\n    var httpContext = new DefaultHttpContext();\r\n    var response = new DownstreamResponse(null, HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022);\r\n    Should.NotThrow(() =\u003E\r\n    {\r\n        _responder.SetResponseOnHttpContext(httpContext, response).GetAwaiter().GetResult();\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_have_content_length",
        "Body": "{\r\n    var httpContext = new DefaultHttpContext();\r\n    var response = new DownstreamResponse(new StringContent(\u0022test\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E(), \u0022some reason\u0022);\r\n    _responder.SetResponseOnHttpContext(httpContext, response).GetAwaiter().GetResult();\r\n    var header = httpContext.Response.Headers[\u0022Content-Length\u0022];\r\n    header.First().ShouldBe(\u00224\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_header",
        "Body": "{\r\n    var httpContext = new DefaultHttpContext();\r\n    var response = new DownstreamResponse(new StringContent(\u0022\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022test\u0022, new List\u003Cstring\u003E { \u0022test\u0022 }) }, \u0022some reason\u0022);\r\n    _responder.SetResponseOnHttpContext(httpContext, response).GetAwaiter().GetResult();\r\n    var header = httpContext.Response.Headers[\u0022test\u0022];\r\n    header.First().ShouldBe(\u0022test\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_reason_phrase",
        "Body": "{\r\n    var httpContext = new DefaultHttpContext();\r\n    var response = new DownstreamResponse(new StringContent(\u0022\u0022), HttpStatusCode.OK, new List\u003CKeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E\u003E { new KeyValuePair\u003Cstring, IEnumerable\u003Cstring\u003E\u003E(\u0022test\u0022, new List\u003Cstring\u003E { \u0022test\u0022 }) }, \u0022some reason\u0022);\r\n    _responder.SetResponseOnHttpContext(httpContext, response).GetAwaiter().GetResult();\r\n    httpContext.Response.HttpContext.Features.Get\u003CIHttpResponseFeature\u003E().ReasonPhrase.ShouldBe(response.ReasonPhrase);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_without_exception",
        "Body": "{\r\n    var httpContext = new DefaultHttpContext();\r\n    _responder.SetErrorResponseOnContext(httpContext, 500);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ResponderMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_return_any_errors",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheHttpResponseMessageIs(new DownstreamResponse(new HttpResponseMessage()))).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenThereAreNoErrors()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_any_errors",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenTheHttpResponseMessageIs(new DownstreamResponse(new HttpResponseMessage()))).And(x =\u003E x.GivenThereArePipelineErrors(new UnableToFindDownstreamRouteError(\u0022/path\u0022, \u0022GET\u0022))).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenThereAreNoErrors()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IPSecurityPolicyTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_No_blocked_Ip_and_allowed_Ip",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenSetDownstreamRoute()).When(x =\u003E x.WhenTheSecurityPolicy()).Then(x =\u003E x.ThenSecurityPassing()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_blockedIp_clientIp_block",
        "Body": "{\r\n    _httpContext.Connection.RemoteIpAddress = Dns.GetHostAddresses(\u0022192.168.1.1\u0022)[0];\r\n    this.Given(x =\u003E x.GivenSetBlockedIP()).Given(x =\u003E x.GivenSetDownstreamRoute()).When(x =\u003E x.WhenTheSecurityPolicy()).Then(x =\u003E x.ThenNotSecurityPassing()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_blockedIp_clientIp_Not_block",
        "Body": "{\r\n    _httpContext.Connection.RemoteIpAddress = Dns.GetHostAddresses(\u0022192.168.1.2\u0022)[0];\r\n    this.Given(x =\u003E x.GivenSetBlockedIP()).Given(x =\u003E x.GivenSetDownstreamRoute()).When(x =\u003E x.WhenTheSecurityPolicy()).Then(x =\u003E x.ThenSecurityPassing()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_allowedIp_clientIp_block",
        "Body": "{\r\n    _httpContext.Connection.RemoteIpAddress = Dns.GetHostAddresses(\u0022192.168.1.1\u0022)[0];\r\n    this.Given(x =\u003E x.GivenSetAllowedIP()).Given(x =\u003E x.GivenSetDownstreamRoute()).When(x =\u003E x.WhenTheSecurityPolicy()).Then(x =\u003E x.ThenSecurityPassing()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_allowedIp_clientIp_Not_block",
        "Body": "{\r\n    _httpContext.Connection.RemoteIpAddress = Dns.GetHostAddresses(\u0022192.168.1.2\u0022)[0];\r\n    this.Given(x =\u003E x.GivenSetAllowedIP()).Given(x =\u003E x.GivenSetDownstreamRoute()).When(x =\u003E x.WhenTheSecurityPolicy()).Then(x =\u003E x.ThenNotSecurityPassing()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SecurityMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_legal_request",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenPassingSecurityVerification()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheRequestIsPassingSecurity()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_verification_failed_request",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenNotPassingSecurityVerification()).When(x =\u003E x.WhenICallTheMiddleware()).Then(x =\u003E x.ThenTheRequestIsNotPassingSecurity()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigurationServiceProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_services",
        "Body": "{\r\n    var hostAndPort = new ServiceHostAndPort(\u0022127.0.0.1\u0022, 80);\r\n    var services = new List\u003CService\u003E\r\n    {\r\n        new Service(\u0022product\u0022, hostAndPort, string.Empty, string.Empty, new string[0])\r\n    };\r\n    this.Given(x =\u003E x.GivenServices(services)).When(x =\u003E x.WhenIGetTheService()).Then(x =\u003E x.ThenTheFollowingIsReturned(services)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Fake",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_service_provider",
        "Body": "{\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheServiceProviderIs\u003CConfigurationServiceProvider\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_list_of_configuration_services",
        "Body": "{\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    var downstreamAddresses = new List\u003CDownstreamHostAndPort\u003E()\r\n    {\r\n        new DownstreamHostAndPort(\u0022asdf.com\u0022, 80),\r\n        new DownstreamHostAndPort(\u0022abc.com\u0022, 80)\r\n    };\r\n    var route = new DownstreamRouteBuilder().WithDownstreamAddresses(downstreamAddresses).Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheServiceProviderIs\u003CConfigurationServiceProvider\u003E()).Then(x =\u003E ThenTheFollowingServicesAreReturned(downstreamAddresses)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_because_type_matches_reflected_type_from_delegate",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022product\u0022).WithUseServiceDiscovery(true).Build();\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().WithType(nameof(Fake)).Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).And(x =\u003E GivenAFakeDelegate()).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheDelegateIsCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_provider_because_type_doesnt_match_reflected_type_from_delegate",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022product\u0022).WithUseServiceDiscovery(true).Build();\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().WithType(\u0022Wookie\u0022).Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).And(x =\u003E GivenAFakeDelegate()).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheResultIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_service_fabric_provider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022product\u0022).WithUseServiceDiscovery(true).Build();\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().WithType(\u0022ServiceFabric\u0022).Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheServiceProviderIs\u003CServiceFabricServiceDiscoveryProvider\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ServiceDiscoveryProviderFactoryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_no_service_provider",
        "Body": "{\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    var route = new DownstreamRouteBuilder().Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheServiceProviderIs\u003CConfigurationServiceProvider\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_list_of_configuration_services",
        "Body": "{\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().Build();\r\n    var downstreamAddresses = new List\u003CDownstreamHostAndPort\u003E()\r\n    {\r\n        new DownstreamHostAndPort(\u0022asdf.com\u0022, 80),\r\n        new DownstreamHostAndPort(\u0022abc.com\u0022, 80)\r\n    };\r\n    var route = new DownstreamRouteBuilder().WithDownstreamAddresses(downstreamAddresses).Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheServiceProviderIs\u003CConfigurationServiceProvider\u003E()).Then(x =\u003E ThenTheFollowingServicesAreReturned(downstreamAddresses)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_provider_because_type_matches_reflected_type_from_delegate",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022product\u0022).WithUseServiceDiscovery(true).Build();\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().WithType(nameof(Fake)).Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).And(x =\u003E GivenAFakeDelegate()).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheDelegateIsCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_provider_because_type_doesnt_match_reflected_type_from_delegate",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022product\u0022).WithUseServiceDiscovery(true).Build();\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().WithType(\u0022Wookie\u0022).Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).And(x =\u003E GivenAFakeDelegate()).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheResultIsError()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_service_fabric_provider",
        "Body": "{\r\n    var route = new DownstreamRouteBuilder().WithServiceName(\u0022product\u0022).WithUseServiceDiscovery(true).Build();\r\n    var serviceConfig = new ServiceProviderConfigurationBuilder().WithType(\u0022ServiceFabric\u0022).Build();\r\n    this.Given(x =\u003E x.GivenTheRoute(serviceConfig, route)).When(x =\u003E x.WhenIGetTheServiceProvider()).Then(x =\u003E x.ThenTheServiceProviderIs\u003CServiceFabricServiceDiscoveryProvider\u003E()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ServiceFabricServiceDiscoveryProviderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_service_fabric_naming_service",
        "Body": "{\r\n    this.Given(x =\u003E GivenTheFollowing()).When(x =\u003E WhenIGet()).Then(x =\u003E ThenTheServiceFabricNamingServiceIsRetured()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ServiceRegistryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_register_service",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAServiceToRegister(\u0022product\u0022, \u0022localhost:5000\u0022, 80)).When(x =\u003E x.WhenIRegisterTheService()).Then(x =\u003E x.ThenTheServiceIsRegistered()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_lookup_service",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAServiceIsRegistered(\u0022product\u0022, \u0022localhost:600\u0022, 80)).When(x =\u003E x.WhenILookupTheService(\u0022product\u0022)).Then(x =\u003E x.ThenTheServiceDetailsAreReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ServiceRegistry",
    "Message": null,
    "Methods": [
      {
        "Name": "should_register_service",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAServiceToRegister(\u0022product\u0022, \u0022localhost:5000\u0022, 80)).When(x =\u003E x.WhenIRegisterTheService()).Then(x =\u003E x.ThenTheServiceIsRegistered()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_lookup_service",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAServiceIsRegistered(\u0022product\u0022, \u0022localhost:600\u0022, 80)).When(x =\u003E x.WhenILookupTheService(\u0022product\u0022)).Then(x =\u003E x.ThenTheServiceDetailsAreReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ServiceRepository",
    "Message": null,
    "Methods": [
      {
        "Name": "should_register_service",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAServiceToRegister(\u0022product\u0022, \u0022localhost:5000\u0022, 80)).When(x =\u003E x.WhenIRegisterTheService()).Then(x =\u003E x.ThenTheServiceIsRegistered()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_lookup_service",
        "Body": "{\r\n    this.Given(x =\u003E x.GivenAServiceIsRegistered(\u0022product\u0022, \u0022localhost:600\u0022, 80)).When(x =\u003E x.WhenILookupTheService(\u0022product\u0022)).Then(x =\u003E x.ThenTheServiceDetailsAreReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AggregateTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_fix_issue_597",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key1data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key1\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key2data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key2\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key3data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key3\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key4data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key4\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022key1\u0022,\r\n                    \u0022key2\u0022,\r\n                    \u0022key3\u0022,\r\n                    \u0022key4\u0022,\r\n                },\r\n                UpstreamPathTemplate = \u0022/EmpDetail/IN/{userid}\u0022,\r\n            },\r\n            new FileAggregateRoute\r\n            {\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022key1\u0022,\r\n                    \u0022key2\u0022,\r\n                },\r\n                UpstreamPathTemplate = \u0022/EmpDetail/US/{userid}\u0022,\r\n            },\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            RequestIdKey = \u0022CorrelationID\u0022,\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022key1\\\u0022:some_data,\\\u0022key2\\\u0022:some_data}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceIsRunning($\u0022http://localhost:{port}\u0022, 200, \u0022some_data\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/EmpDetail/US/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_advanced_aggregate_configs",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var port3 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/Comments\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Comments\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/users/{userId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/UserDetails\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022UserDetails\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/posts/{postId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port3,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/PostDetails\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022PostDetails\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Comments\u0022,\r\n                    \u0022UserDetails\u0022,\r\n                    \u0022PostDetails\u0022,\r\n                },\r\n                RouteKeysConfig = new List\u003CAggregateRouteConfig\u003E()\r\n                {\r\n                    new AggregateRouteConfig()\r\n                    {\r\n                        RouteKey = \u0022UserDetails\u0022,\r\n                        JsonPath = \u0022$[*].writerId\u0022,\r\n                        Parameter = \u0022userId\u0022\r\n                    },\r\n                    new AggregateRouteConfig()\r\n                    {\r\n                        RouteKey = \u0022PostDetails\u0022,\r\n                        JsonPath = \u0022$[*].postId\u0022,\r\n                        Parameter = \u0022postId\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var userDetailsResponseContent = @\u0022{\u0022\u0022id\u0022\u0022:1,\u0022\u0022firstName\u0022\u0022:\u0022\u0022abolfazl\u0022\u0022,\u0022\u0022lastName\u0022\u0022:\u0022\u0022rajabpour\u0022\u0022}\u0022;\r\n    var postDetailsResponseContent = @\u0022{\u0022\u0022id\u0022\u0022:1,\u0022\u0022title\u0022\u0022:\u0022\u0022post1\u0022\u0022}\u0022;\r\n    var commentsResponseContent = @\u0022[{\u0022\u0022id\u0022\u0022:1,\u0022\u0022writerId\u0022\u0022:1,\u0022\u0022postId\u0022\u0022:2,\u0022\u0022text\u0022\u0022:\u0022\u0022text1\u0022\u0022},{\u0022\u0022id\u0022\u0022:2,\u0022\u0022writerId\u0022\u0022:1,\u0022\u0022postId\u0022\u0022:2,\u0022\u0022text\u0022\u0022:\u0022\u0022text2\u0022\u0022}]\u0022;\r\n    var expected = \u0022{\\\u0022Comments\\\u0022:\u0022 \u002B commentsResponseContent \u002B \u0022,\\\u0022UserDetails\\\u0022:\u0022 \u002B userDetailsResponseContent \u002B \u0022,\\\u0022PostDetails\\\u0022:\u0022 \u002B postDetailsResponseContent \u002B \u0022}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, commentsResponseContent)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/users/1\u0022, 200, userDetailsResponseContent)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port3}\u0022, \u0022/posts/2\u0022, 200, postDetailsResponseContent)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_user_defined_aggregate",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n                Aggregator = \u0022FakeDefinedAggregator\u0022,\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022Bye from Laura, Bye from Tom\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, \u0022{Hello from Laura}\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithSpecficAggregatorsRegisteredInDi\u003CFakeDefinedAggregator, FakeDepdendency\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022Laura\\\u0022:{Hello from Laura},\\\u0022Tom\\\u0022:{Hello from Tom}}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, \u0022{Hello from Laura}\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_one_service_404",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022Laura\\\u0022:,\\\u0022Tom\\\u0022:{Hello from Tom}}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 404, \u0022\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_both_service_404",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022Laura\\\u0022:,\\\u0022Tom\\\u0022:}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 404, \u0022\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 404, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_thread_safe",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, \u0022{Hello from Laura}\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIMakeLotsOfDifferentRequestsToTheApiGateway()).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeDepdendency",
    "Message": null,
    "Methods": [
      {
        "Name": "should_fix_issue_597",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key1data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key1\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key2data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key2\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key3data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key3\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key4data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key4\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022key1\u0022,\r\n                    \u0022key2\u0022,\r\n                    \u0022key3\u0022,\r\n                    \u0022key4\u0022,\r\n                },\r\n                UpstreamPathTemplate = \u0022/EmpDetail/IN/{userid}\u0022,\r\n            },\r\n            new FileAggregateRoute\r\n            {\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022key1\u0022,\r\n                    \u0022key2\u0022,\r\n                },\r\n                UpstreamPathTemplate = \u0022/EmpDetail/US/{userid}\u0022,\r\n            },\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            RequestIdKey = \u0022CorrelationID\u0022,\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022key1\\\u0022:some_data,\\\u0022key2\\\u0022:some_data}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceIsRunning($\u0022http://localhost:{port}\u0022, 200, \u0022some_data\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/EmpDetail/US/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_advanced_aggregate_configs",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var port3 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/Comments\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Comments\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/users/{userId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/UserDetails\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022UserDetails\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/posts/{postId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port3,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/PostDetails\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022PostDetails\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Comments\u0022,\r\n                    \u0022UserDetails\u0022,\r\n                    \u0022PostDetails\u0022,\r\n                },\r\n                RouteKeysConfig = new List\u003CAggregateRouteConfig\u003E()\r\n                {\r\n                    new AggregateRouteConfig()\r\n                    {\r\n                        RouteKey = \u0022UserDetails\u0022,\r\n                        JsonPath = \u0022$[*].writerId\u0022,\r\n                        Parameter = \u0022userId\u0022\r\n                    },\r\n                    new AggregateRouteConfig()\r\n                    {\r\n                        RouteKey = \u0022PostDetails\u0022,\r\n                        JsonPath = \u0022$[*].postId\u0022,\r\n                        Parameter = \u0022postId\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var userDetailsResponseContent = @\u0022{\u0022\u0022id\u0022\u0022:1,\u0022\u0022firstName\u0022\u0022:\u0022\u0022abolfazl\u0022\u0022,\u0022\u0022lastName\u0022\u0022:\u0022\u0022rajabpour\u0022\u0022}\u0022;\r\n    var postDetailsResponseContent = @\u0022{\u0022\u0022id\u0022\u0022:1,\u0022\u0022title\u0022\u0022:\u0022\u0022post1\u0022\u0022}\u0022;\r\n    var commentsResponseContent = @\u0022[{\u0022\u0022id\u0022\u0022:1,\u0022\u0022writerId\u0022\u0022:1,\u0022\u0022postId\u0022\u0022:2,\u0022\u0022text\u0022\u0022:\u0022\u0022text1\u0022\u0022},{\u0022\u0022id\u0022\u0022:2,\u0022\u0022writerId\u0022\u0022:1,\u0022\u0022postId\u0022\u0022:2,\u0022\u0022text\u0022\u0022:\u0022\u0022text2\u0022\u0022}]\u0022;\r\n    var expected = \u0022{\\\u0022Comments\\\u0022:\u0022 \u002B commentsResponseContent \u002B \u0022,\\\u0022UserDetails\\\u0022:\u0022 \u002B userDetailsResponseContent \u002B \u0022,\\\u0022PostDetails\\\u0022:\u0022 \u002B postDetailsResponseContent \u002B \u0022}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, commentsResponseContent)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/users/1\u0022, 200, userDetailsResponseContent)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port3}\u0022, \u0022/posts/2\u0022, 200, postDetailsResponseContent)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_user_defined_aggregate",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n                Aggregator = \u0022FakeDefinedAggregator\u0022,\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022Bye from Laura, Bye from Tom\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, \u0022{Hello from Laura}\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithSpecficAggregatorsRegisteredInDi\u003CFakeDefinedAggregator, FakeDepdendency\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022Laura\\\u0022:{Hello from Laura},\\\u0022Tom\\\u0022:{Hello from Tom}}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, \u0022{Hello from Laura}\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_one_service_404",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022Laura\\\u0022:,\\\u0022Tom\\\u0022:{Hello from Tom}}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 404, \u0022\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_both_service_404",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022Laura\\\u0022:,\\\u0022Tom\\\u0022:}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 404, \u0022\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 404, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_thread_safe",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, \u0022{Hello from Laura}\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIMakeLotsOfDifferentRequestsToTheApiGateway()).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeDefinedAggregator",
    "Message": null,
    "Methods": [
      {
        "Name": "should_fix_issue_597",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key1data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key1\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key2data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key2\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key3data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key3\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values?MailId={userid}\u0022,\r\n                UpstreamPathTemplate = \u0022/key4data/{userid}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                Key = \u0022key4\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022key1\u0022,\r\n                    \u0022key2\u0022,\r\n                    \u0022key3\u0022,\r\n                    \u0022key4\u0022,\r\n                },\r\n                UpstreamPathTemplate = \u0022/EmpDetail/IN/{userid}\u0022,\r\n            },\r\n            new FileAggregateRoute\r\n            {\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022key1\u0022,\r\n                    \u0022key2\u0022,\r\n                },\r\n                UpstreamPathTemplate = \u0022/EmpDetail/US/{userid}\u0022,\r\n            },\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            RequestIdKey = \u0022CorrelationID\u0022,\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022key1\\\u0022:some_data,\\\u0022key2\\\u0022:some_data}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceIsRunning($\u0022http://localhost:{port}\u0022, 200, \u0022some_data\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/EmpDetail/US/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_advanced_aggregate_configs",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var port3 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/Comments\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Comments\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/users/{userId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/UserDetails\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022UserDetails\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/posts/{postId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port3,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/PostDetails\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022PostDetails\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Comments\u0022,\r\n                    \u0022UserDetails\u0022,\r\n                    \u0022PostDetails\u0022,\r\n                },\r\n                RouteKeysConfig = new List\u003CAggregateRouteConfig\u003E()\r\n                {\r\n                    new AggregateRouteConfig()\r\n                    {\r\n                        RouteKey = \u0022UserDetails\u0022,\r\n                        JsonPath = \u0022$[*].writerId\u0022,\r\n                        Parameter = \u0022userId\u0022\r\n                    },\r\n                    new AggregateRouteConfig()\r\n                    {\r\n                        RouteKey = \u0022PostDetails\u0022,\r\n                        JsonPath = \u0022$[*].postId\u0022,\r\n                        Parameter = \u0022postId\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var userDetailsResponseContent = @\u0022{\u0022\u0022id\u0022\u0022:1,\u0022\u0022firstName\u0022\u0022:\u0022\u0022abolfazl\u0022\u0022,\u0022\u0022lastName\u0022\u0022:\u0022\u0022rajabpour\u0022\u0022}\u0022;\r\n    var postDetailsResponseContent = @\u0022{\u0022\u0022id\u0022\u0022:1,\u0022\u0022title\u0022\u0022:\u0022\u0022post1\u0022\u0022}\u0022;\r\n    var commentsResponseContent = @\u0022[{\u0022\u0022id\u0022\u0022:1,\u0022\u0022writerId\u0022\u0022:1,\u0022\u0022postId\u0022\u0022:2,\u0022\u0022text\u0022\u0022:\u0022\u0022text1\u0022\u0022},{\u0022\u0022id\u0022\u0022:2,\u0022\u0022writerId\u0022\u0022:1,\u0022\u0022postId\u0022\u0022:2,\u0022\u0022text\u0022\u0022:\u0022\u0022text2\u0022\u0022}]\u0022;\r\n    var expected = \u0022{\\\u0022Comments\\\u0022:\u0022 \u002B commentsResponseContent \u002B \u0022,\\\u0022UserDetails\\\u0022:\u0022 \u002B userDetailsResponseContent \u002B \u0022,\\\u0022PostDetails\\\u0022:\u0022 \u002B postDetailsResponseContent \u002B \u0022}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, commentsResponseContent)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/users/1\u0022, 200, userDetailsResponseContent)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port3}\u0022, \u0022/posts/2\u0022, 200, postDetailsResponseContent)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_user_defined_aggregate",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n                Aggregator = \u0022FakeDefinedAggregator\u0022,\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022Bye from Laura, Bye from Tom\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, \u0022{Hello from Laura}\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithSpecficAggregatorsRegisteredInDi\u003CFakeDefinedAggregator, FakeDepdendency\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022Laura\\\u0022:{Hello from Laura},\\\u0022Tom\\\u0022:{Hello from Tom}}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, \u0022{Hello from Laura}\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_one_service_404",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022Laura\\\u0022:,\\\u0022Tom\\\u0022:{Hello from Tom}}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 404, \u0022\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_both_service_404",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var expected = \u0022{\\\u0022Laura\\\u0022:,\\\u0022Tom\\\u0022:}\u0022;\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 404, \u0022\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 404, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_thread_safe",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/tom\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Tom\u0022,\r\n            },\r\n        },\r\n        Aggregates = new List\u003CFileAggregateRoute\u003E\r\n        {\r\n            new FileAggregateRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHost = \u0022localhost\u0022,\r\n                RouteKeys = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Laura\u0022,\r\n                    \u0022Tom\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/\u0022, 200, \u0022{Hello from Laura}\u0022)).Given(x =\u003E x.GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/\u0022, 200, \u0022{Hello from Tom}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIMakeLotsOfDifferentRequestsToTheApiGateway()).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/\u0022, \u0022/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AuthenticationTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_401_using_identity_server_access_token",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = _downstreamServicePath,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = _downstreamServiceHost,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = _downstreamServiceScheme,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, \u0022api2\u0022, AccessTokenType.Jwt)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022{_downstreamServiceUrl}{port}\u0022, 201, string.Empty)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenThePostHasContent(\u0022postContent\u0022)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Unauthorized)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_using_identity_server",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = _downstreamServicePath,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = _downstreamServiceHost,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = _downstreamServiceScheme,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, \u0022api2\u0022, AccessTokenType.Jwt)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022{_downstreamServiceUrl}{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_401_using_identity_server_with_token_requested_for_other_api",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = _downstreamServicePath,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = _downstreamServiceHost,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = _downstreamServiceScheme,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, \u0022api2\u0022, AccessTokenType.Jwt)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022{_downstreamServiceUrl}{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenIHaveATokenForApi2(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Unauthorized)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_201_using_identity_server_access_token",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = _downstreamServicePath,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = _downstreamServiceHost,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = _downstreamServiceScheme,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, \u0022api2\u0022, AccessTokenType.Jwt)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022{_downstreamServiceUrl}{port}\u0022, 201, string.Empty)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).And(x =\u003E _steps.GivenThePostHasContent(\u0022postContent\u0022)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_201_using_identity_server_reference_token",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = _downstreamServicePath,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = _downstreamServiceHost,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = _downstreamServiceScheme,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, \u0022api2\u0022, AccessTokenType.Reference)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022{_downstreamServiceUrl}{port}\u0022, 201, string.Empty)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).And(x =\u003E _steps.GivenThePostHasContent(\u0022postContent\u0022)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AuthorizationTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_authorizing_route",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                },\r\n                AddHeadersToRequest =\r\n                {\r\n                    {\r\n                        \u0022CustomerId\u0022,\r\n                        \u0022Claims[CustomerId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022LocationId\u0022,\r\n                        \u0022Claims[LocationId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserType\u0022,\r\n                        \u0022Claims[sub] \u003E value[0] \u003E |\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserId\u0022,\r\n                        \u0022Claims[sub] \u003E value[1] \u003E |\u0022\r\n                    },\r\n                },\r\n                AddClaimsToRequest =\r\n                {\r\n                    {\r\n                        \u0022CustomerId\u0022,\r\n                        \u0022Claims[CustomerId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserType\u0022,\r\n                        \u0022Claims[sub] \u003E value[0] \u003E |\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserId\u0022,\r\n                        \u0022Claims[sub] \u003E value[1] \u003E |\u0022\r\n                    },\r\n                },\r\n                RouteClaimsRequirement =\r\n                {\r\n                    {\r\n                        \u0022UserType\u0022,\r\n                        \u0022registered\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, AccessTokenType.Jwt)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_403_authorizing_route",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                },\r\n                AddHeadersToRequest =\r\n                {\r\n                    {\r\n                        \u0022CustomerId\u0022,\r\n                        \u0022Claims[CustomerId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022LocationId\u0022,\r\n                        \u0022Claims[LocationId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserType\u0022,\r\n                        \u0022Claims[sub] \u003E value[0] \u003E |\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserId\u0022,\r\n                        \u0022Claims[sub] \u003E value[1] \u003E |\u0022\r\n                    },\r\n                },\r\n                AddClaimsToRequest =\r\n                {\r\n                    {\r\n                        \u0022CustomerId\u0022,\r\n                        \u0022Claims[CustomerId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserId\u0022,\r\n                        \u0022Claims[sub] \u003E value[1] \u003E |\u0022\r\n                    },\r\n                },\r\n                RouteClaimsRequirement =\r\n                {\r\n                    {\r\n                        \u0022UserType\u0022,\r\n                        \u0022registered\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, AccessTokenType.Jwt)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Forbidden)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_using_identity_server_with_allowed_scope",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                    AllowedScopes = new List\u003Cstring\u003E\r\n                    {\r\n                        \u0022api\u0022,\r\n                        \u0022api.readOnly\u0022,\r\n                        \u0022openid\u0022,\r\n                        \u0022offline_access\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, AccessTokenType.Jwt)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenIHaveATokenForApiReadOnlyScope(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_403_using_identity_server_with_scope_not_allowed",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                    AllowedScopes = new List\u003Cstring\u003E\r\n                    {\r\n                        \u0022api\u0022,\r\n                        \u0022openid\u0022,\r\n                        \u0022offline_access\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, AccessTokenType.Jwt)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenIHaveATokenForApiReadOnlyScope(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Forbidden)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_fix_issue_240",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                },\r\n                RouteClaimsRequirement =\r\n                {\r\n                    {\r\n                        \u0022Role\u0022,\r\n                        \u0022User\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var users = new List\u003CTestUser\u003E\r\n    {\r\n        new TestUser\r\n        {\r\n            Username = \u0022test\u0022,\r\n            Password = \u0022test\u0022,\r\n            SubjectId = \u0022registered|1231231\u0022,\r\n            Claims = new List\u003CClaim\u003E\r\n            {\r\n                new Claim(\u0022Role\u0022, \u0022AdminUser\u0022),\r\n                new Claim(\u0022Role\u0022, \u0022User\u0022),\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, AccessTokenType.Jwt, users)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ButterflyTracingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_forward_tracing_information_from_ocelot_and_downstream_services",
        "Body": "{\r\n    int port1 = RandomPortFinder.GetRandomPort();\r\n    int port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api002/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    this.Given(x =\u003E GivenFakeButterfly(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Tom\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingButterfly(butterflyUrl)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api002/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).BDDfy();\r\n    var commandOnAllStateMachines = Wait.WaitFor(10000).Until(() =\u003E _butterflyCalled \u003E= 4);\r\n    _output.WriteLine($\u0022_butterflyCalled is {_butterflyCalled}\u0022);\r\n    commandOnAllStateMachines.ShouldBeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_tracing_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E()\r\n                {\r\n                    {\r\n                        \u0022Trace-Id\u0022,\r\n                        \u0022{TraceId}\u0022\r\n                    },\r\n                    {\r\n                        \u0022Tom\u0022,\r\n                        \u0022Laura\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    this.Given(x =\u003E GivenFakeButterfly(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingButterfly(butterflyUrl)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheTraceHeaderIsSet(\u0022Trace-Id\u0022)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CachingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_cached_response",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 100\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022, null, null)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).Given(x =\u003E x.GivenTheServiceNowReturns($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Tom\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheContentLengthIs(16)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_cached_response_with_expires_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 100\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022, \u0022Expires\u0022, \u0022-1\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).Given(x =\u003E x.GivenTheServiceNowReturns($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Tom\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheContentLengthIs(16)).And(x =\u003E _steps.ThenTheResponseBodyHeaderIs(\u0022Expires\u0022, \u0022-1\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_cached_response_when_using_jsonserialized_cache",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 100\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022, null, null)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingJsonSerializedCache()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).Given(x =\u003E x.GivenTheServiceNowReturns($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Tom\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_return_cached_response_as_ttl_expires",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022, null, null)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).Given(x =\u003E x.GivenTheServiceNowReturns($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Tom\u0022)).And(x =\u003E x.GivenTheCacheExpires()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CannotStartOcelotTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_throw_exception_if_cannot_start_because_service_discovery_provider_specified_in_config_but_no_service_discovery_provider_registered_with_dynamic_re_routes",
        "Body": "{\r\n    var invalidConfig = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022consul\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    Exception exception = null;\r\n    _steps.GivenThereIsAConfiguration(invalidConfig);\r\n    try\r\n    {\r\n        _steps.GivenOcelotIsRunning();\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        exception = ex;\r\n    }\r\n\r\n    exception.ShouldNotBeNull();\r\n    exception.Message.ShouldBe(\u0022One or more errors occurred. (Unable to start Ocelot, errors are: Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?)\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_throw_exception_if_cannot_start_because_service_discovery_provider_specified_in_config_but_no_service_discovery_provider_registered",
        "Body": "{\r\n    var invalidConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022test\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Type = \u0022consul\u0022,\r\n                Port = 8500\r\n            }\r\n        }\r\n    };\r\n    Exception exception = null;\r\n    _steps.GivenThereIsAConfiguration(invalidConfig);\r\n    try\r\n    {\r\n        _steps.GivenOcelotIsRunning();\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        exception = ex;\r\n    }\r\n\r\n    exception.ShouldNotBeNull();\r\n    exception.Message.ShouldBe(\u0022One or more errors occurred. (Unable to start Ocelot, errors are: Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?,Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?)\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_throw_exception_if_cannot_start_because_no_qos_delegate_registered_globally",
        "Body": "{\r\n    var invalidConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            QoSOptions = new FileQoSOptions\r\n            {\r\n                TimeoutValue = 1,\r\n                ExceptionsAllowedBeforeBreaking = 1\r\n            }\r\n        }\r\n    };\r\n    Exception exception = null;\r\n    _steps.GivenThereIsAConfiguration(invalidConfig);\r\n    try\r\n    {\r\n        _steps.GivenOcelotIsRunning();\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        exception = ex;\r\n    }\r\n\r\n    exception.ShouldNotBeNull();\r\n    exception.Message.ShouldBe(\u0022One or more errors occurred. (Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?)\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_throw_exception_if_cannot_start_because_no_qos_delegate_registered_for_re_route",
        "Body": "{\r\n    var invalidConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51878,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/laura\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                Key = \u0022Laura\u0022,\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1,\r\n                    ExceptionsAllowedBeforeBreaking = 1\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Exception exception = null;\r\n    _steps.GivenThereIsAConfiguration(invalidConfig);\r\n    try\r\n    {\r\n        _steps.GivenOcelotIsRunning();\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        exception = ex;\r\n    }\r\n\r\n    exception.ShouldNotBeNull();\r\n    exception.Message.ShouldBe(\u0022One or more errors occurred. (Unable to start Ocelot, errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?)\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_throw_exception_if_cannot_start",
        "Body": "{\r\n    var invalidConfig = new FileConfiguration()\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022api\u0022,\r\n                DownstreamPathTemplate = \u0022test\u0022\r\n            }\r\n        }\r\n    };\r\n    Exception exception = null;\r\n    _steps.GivenThereIsAConfiguration(invalidConfig);\r\n    try\r\n    {\r\n        _steps.GivenOcelotIsRunning();\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        exception = ex;\r\n    }\r\n\r\n    exception.ShouldNotBeNull();\r\n    exception.Message.ShouldBe(\u0022One or more errors occurred. (Unable to start Ocelot, errors are: Downstream Path Template test doesnt start with forward slash,Upstream Path Template api doesnt start with forward slash,When not using service discovery DownstreamHostAndPorts must be set and not empty or Ocelot cannot find your service!)\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CaseSensitiveRoutingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_when_global_ignore_case_sensitivity_set",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products/{productId}\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/products/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/PRODUCTS/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_route_ignore_case_sensitivity_set",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products/{productId}\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/products/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RouteIsCaseSensitive = false,\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/PRODUCTS/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_404_when_route_respect_case_sensitivity_set",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products/{productId}\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/products/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RouteIsCaseSensitive = true,\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/PRODUCTS/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_route_respect_case_sensitivity_set",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products/{productId}\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/PRODUCTS/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RouteIsCaseSensitive = true,\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/PRODUCTS/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_404_when_global_respect_case_sensitivity_set",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products/{productId}\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/products/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RouteIsCaseSensitive = true,\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/PRODUCTS/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_global_respect_case_sensitivity_set",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products/{productId}\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/PRODUCTS/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RouteIsCaseSensitive = true,\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/PRODUCTS/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimsToDownstreamPathTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_200_and_change_downstream_path",
        "Body": "{\r\n    var user = new TestUser()\r\n    {\r\n        Username = \u0022test\u0022,\r\n        Password = \u0022test\u0022,\r\n        SubjectId = \u0022registered|1231231\u0022,\r\n    };\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/users/{userId}\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/users\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                    AllowedScopes = new List\u003Cstring\u003E\r\n                    {\r\n                        \u0022openid\u0022,\r\n                        \u0022offline_access\u0022,\r\n                        \u0022api\u0022,\r\n                    },\r\n                },\r\n                ChangeDownstreamPathTemplate =\r\n                {\r\n                    {\r\n                        \u0022userId\u0022,\r\n                        \u0022Claims[sub] \u003E value[1] \u003E |\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, AccessTokenType.Jwt, user)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/users\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022UserId: 1231231\u0022)).And(x =\u003E ThenTheDownstreamPathIs(\u0022/users/1231231\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimsToHeadersForwardingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_and_foward_claim_as_header",
        "Body": "{\r\n    var user = new TestUser()\r\n    {\r\n        Username = \u0022test\u0022,\r\n        Password = \u0022test\u0022,\r\n        SubjectId = \u0022registered|1231231\u0022,\r\n        Claims = new List\u003CClaim\u003E\r\n        {\r\n            new Claim(\u0022CustomerId\u0022, \u0022123\u0022),\r\n            new Claim(\u0022LocationId\u0022, \u00221\u0022),\r\n        },\r\n    };\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                    AllowedScopes = new List\u003Cstring\u003E\r\n                    {\r\n                        \u0022openid\u0022,\r\n                        \u0022offline_access\u0022,\r\n                        \u0022api\u0022,\r\n                    },\r\n                },\r\n                AddHeadersToRequest =\r\n                {\r\n                    {\r\n                        \u0022CustomerId\u0022,\r\n                        \u0022Claims[CustomerId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022LocationId\u0022,\r\n                        \u0022Claims[LocationId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserType\u0022,\r\n                        \u0022Claims[sub] \u003E value[0] \u003E |\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserId\u0022,\r\n                        \u0022Claims[sub] \u003E value[1] \u003E |\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, AccessTokenType.Jwt, user)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022CustomerId: 123 LocationId: 1 UserType: registered UserId: 1231231\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClaimsToQueryStringForwardingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_and_foward_claim_as_query_string",
        "Body": "{\r\n    var user = new TestUser()\r\n    {\r\n        Username = \u0022test\u0022,\r\n        Password = \u0022test\u0022,\r\n        SubjectId = \u0022registered|1231231\u0022,\r\n        Claims = new List\u003CClaim\u003E\r\n        {\r\n            new Claim(\u0022CustomerId\u0022, \u0022123\u0022),\r\n            new Claim(\u0022LocationId\u0022, \u00221\u0022),\r\n        },\r\n    };\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                    AllowedScopes = new List\u003Cstring\u003E\r\n                    {\r\n                        \u0022openid\u0022,\r\n                        \u0022offline_access\u0022,\r\n                        \u0022api\u0022,\r\n                    },\r\n                },\r\n                AddQueriesToRequest =\r\n                {\r\n                    {\r\n                        \u0022CustomerId\u0022,\r\n                        \u0022Claims[CustomerId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022LocationId\u0022,\r\n                        \u0022Claims[LocationId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserType\u0022,\r\n                        \u0022Claims[sub] \u003E value[0] \u003E |\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserId\u0022,\r\n                        \u0022Claims[sub] \u003E value[1] \u003E |\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, AccessTokenType.Jwt, user)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022CustomerId: 123 LocationId: 1 UserType: registered UserId: 1231231\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_and_foward_claim_as_query_string_and_preserve_original_string",
        "Body": "{\r\n    var user = new TestUser()\r\n    {\r\n        Username = \u0022test\u0022,\r\n        Password = \u0022test\u0022,\r\n        SubjectId = \u0022registered|1231231\u0022,\r\n        Claims = new List\u003CClaim\u003E\r\n        {\r\n            new Claim(\u0022CustomerId\u0022, \u0022123\u0022),\r\n            new Claim(\u0022LocationId\u0022, \u00221\u0022),\r\n        },\r\n    };\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                AuthenticationOptions = new FileAuthenticationOptions\r\n                {\r\n                    AuthenticationProviderKey = \u0022Test\u0022,\r\n                    AllowedScopes = new List\u003Cstring\u003E\r\n                    {\r\n                        \u0022openid\u0022,\r\n                        \u0022offline_access\u0022,\r\n                        \u0022api\u0022,\r\n                    },\r\n                },\r\n                AddQueriesToRequest =\r\n                {\r\n                    {\r\n                        \u0022CustomerId\u0022,\r\n                        \u0022Claims[CustomerId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022LocationId\u0022,\r\n                        \u0022Claims[LocationId] \u003E value\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserType\u0022,\r\n                        \u0022Claims[sub] \u003E value[0] \u003E |\u0022\r\n                    },\r\n                    {\r\n                        \u0022UserId\u0022,\r\n                        \u0022Claims[sub] \u003E value[1] \u003E |\u0022\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl, \u0022api\u0022, AccessTokenType.Jwt, user)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200)).And(x =\u003E _steps.GivenIHaveAToken(_identityServerRootUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning(_options, \u0022Test\u0022)).And(x =\u003E _steps.GivenIHaveAddedATokenToMyRequest()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/?test=1\u0026test=2\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022CustomerId: 123 LocationId: 1 UserType: registered UserId: 1231231\u0022)).And(_ =\u003E ThenTheQueryStringIs(\u0022?test=1\u0026test=2\u0026CustomerId=123\u0026LocationId=1\u0026UserId=1231231\u0026UserType=registered\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClientRateLimitTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_withratelimiting",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/ClientRateLimit\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/api/ClientRateLimit\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RequestIdKey = _steps.RequestIdKey,\r\n                RateLimitOptions = new FileRateLimitRule()\r\n                {\r\n                    EnableRateLimiting = true,\r\n                    ClientWhitelist = new List\u003Cstring\u003E(),\r\n                    Limit = 3,\r\n                    Period = \u00221s\u0022,\r\n                    PeriodTimespan = 1000\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            RateLimitOptions = new FileRateLimitOptions()\r\n            {\r\n                ClientIdHeader = \u0022ClientId\u0022,\r\n                DisableRateLimitHeaders = false,\r\n                QuotaExceededMessage = \u0022\u0022,\r\n                RateLimitCounterPrefix = \u0022\u0022,\r\n                HttpStatusCode = 428\r\n            },\r\n            RequestIdKey = \u0022oceclientrequest\u0022\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/ClientRateLimit\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/api/ClientRateLimit\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/api/ClientRateLimit\u0022, 2)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/api/ClientRateLimit\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(428)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_wait_for_period_timespan_to_elapse_before_making_next_request",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/ClientRateLimit\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/api/ClientRateLimit\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RequestIdKey = _steps.RequestIdKey,\r\n                RateLimitOptions = new FileRateLimitRule()\r\n                {\r\n                    EnableRateLimiting = true,\r\n                    ClientWhitelist = new List\u003Cstring\u003E(),\r\n                    Limit = 3,\r\n                    Period = \u00221s\u0022,\r\n                    PeriodTimespan = 2\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            RateLimitOptions = new FileRateLimitOptions()\r\n            {\r\n                ClientIdHeader = \u0022ClientId\u0022,\r\n                DisableRateLimitHeaders = false,\r\n                QuotaExceededMessage = \u0022\u0022,\r\n                RateLimitCounterPrefix = \u0022\u0022,\r\n                HttpStatusCode = 428\r\n            },\r\n            RequestIdKey = \u0022oceclientrequest\u0022\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/ClientRateLimit\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/api/ClientRateLimit\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/api/ClientRateLimit\u0022, 2)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/api/ClientRateLimit\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(428)).And(x =\u003E _steps.GivenIWait(1000)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/api/ClientRateLimit\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(428)).And(x =\u003E _steps.GivenIWait(1000)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/api/ClientRateLimit\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_middleware_withWhitelistClient",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/ClientRateLimit\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/api/ClientRateLimit\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RequestIdKey = _steps.RequestIdKey,\r\n                RateLimitOptions = new FileRateLimitRule()\r\n                {\r\n                    EnableRateLimiting = true,\r\n                    ClientWhitelist = new List\u003Cstring\u003E()\r\n                    {\r\n                        \u0022ocelotclient1\u0022\r\n                    },\r\n                    Limit = 3,\r\n                    Period = \u00221s\u0022,\r\n                    PeriodTimespan = 100\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            RateLimitOptions = new FileRateLimitOptions()\r\n            {\r\n                ClientIdHeader = \u0022ClientId\u0022,\r\n                DisableRateLimitHeaders = false,\r\n                QuotaExceededMessage = \u0022\u0022,\r\n                RateLimitCounterPrefix = \u0022\u0022\r\n            },\r\n            RequestIdKey = \u0022oceclientrequest\u0022\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/ClientRateLimit\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/api/ClientRateLimit\u0022, 4)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeConsulGetResponse",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_with_simple_url_when_using_jsonserialized_cache",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    this.Given(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfigAndJsonSerializedCache()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigurationInConsulTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_with_simple_url_when_using_jsonserialized_cache",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    this.Given(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfigAndJsonSerializedCache()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigurationReloadTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_reload_config_on_change",
        "Body": "{\r\n    this.Given(x =\u003E _steps.GivenThereIsAConfiguration(_initialConfig)).And(x =\u003E _steps.GivenOcelotIsRunningReloadingConfig(true)).And(x =\u003E _steps.GivenThereIsAConfiguration(_anotherConfig)).And(x =\u003E _steps.GivenIWait(5000)).And(x =\u003E _steps.ThenConfigShouldBe(_anotherConfig)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_reload_config_on_change",
        "Body": "{\r\n    this.Given(x =\u003E _steps.GivenThereIsAConfiguration(_initialConfig)).And(x =\u003E _steps.GivenOcelotIsRunningReloadingConfig(false)).And(x =\u003E _steps.GivenThereIsAConfiguration(_anotherConfig)).And(x =\u003E _steps.GivenIWait(MillisecondsToWaitForChangeToken)).And(x =\u003E _steps.ThenConfigShouldBe(_initialConfig)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_trigger_change_token_on_change",
        "Body": "{\r\n    this.Given(x =\u003E _steps.GivenThereIsAConfiguration(_initialConfig)).And(x =\u003E _steps.GivenOcelotIsRunningReloadingConfig(true)).And(x =\u003E _steps.GivenIHaveAChangeToken()).And(x =\u003E _steps.GivenThereIsAConfiguration(_anotherConfig)).And(x =\u003E _steps.GivenIWait(MillisecondsToWaitForChangeToken)).Then(x =\u003E _steps.TheChangeTokenShouldBeActive(true)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_trigger_change_token_with_no_change",
        "Body": "{\r\n    this.Given(x =\u003E _steps.GivenThereIsAConfiguration(_initialConfig)).And(x =\u003E _steps.GivenOcelotIsRunningReloadingConfig(false)).And(x =\u003E _steps.GivenIHaveAChangeToken()).And(x =\u003E _steps.GivenIWait(MillisecondsToWaitForChangeToken)) // Wait for prior activation to expire.\r\n    .And(x =\u003E _steps.GivenThereIsAConfiguration(_anotherConfig)).And(x =\u003E _steps.GivenIWait(MillisecondsToWaitForChangeToken)).Then(x =\u003E _steps.TheChangeTokenShouldBeActive(false)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeConsulGetResponse",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_with_simple_url",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    this.Given(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_configuration_out_of_consul",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var consulConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/status\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/cs/status\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenTheConsulConfigurationIs(consulConfig)).And(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022/status\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/cs/status\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_configuration_out_of_consul_if_it_is_changed",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var consulConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/status\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/cs/status\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var secondConsulConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/status\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/cs/status/awesome\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenTheConsulConfigurationIs(consulConfig)).And(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022/status\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/cs/status\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(x =\u003E GivenTheConsulConfigurationIs(secondConsulConfig)).Then(x =\u003E ThenTheConfigIsUpdatedInOcelot()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    const string serviceName = \u0022web\u0022;\r\n    int downstreamServicePort = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamServicePort}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = downstreamServicePort,\r\n            ID = \u0022web_90_0_2_224_8080\u0022,\r\n            Tags = new[]\r\n            {\r\n                \u0022version-v1\u0022\r\n            }\r\n        },\r\n    };\r\n    var consulConfig = new FileConfiguration\r\n    {\r\n        DynamicRoutes = new List\u003CFileDynamicRoute\u003E\r\n        {\r\n            new FileDynamicRoute\r\n            {\r\n                ServiceName = serviceName,\r\n                RateLimitRule = new FileRateLimitRule()\r\n                {\r\n                    EnableRateLimiting = true,\r\n                    ClientWhitelist = new List\u003Cstring\u003E(),\r\n                    Limit = 3,\r\n                    Period = \u00221s\u0022,\r\n                    PeriodTimespan = 1000\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            },\r\n            RateLimitOptions = new FileRateLimitOptions()\r\n            {\r\n                ClientIdHeader = \u0022ClientId\u0022,\r\n                DisableRateLimitHeaders = false,\r\n                QuotaExceededMessage = \u0022\u0022,\r\n                RateLimitCounterPrefix = \u0022\u0022,\r\n                HttpStatusCode = 428\r\n            },\r\n            DownstreamScheme = \u0022http\u0022,\r\n        }\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl, \u0022/something\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E GivenTheConsulConfigurationIs(consulConfig)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(x =\u003E x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/web/something\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/web/something\u0022, 2)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/web/something\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(428)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeCache",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_with_simple_url",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    this.Given(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_configuration_out_of_consul",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var consulConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/status\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/cs/status\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenTheConsulConfigurationIs(consulConfig)).And(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022/status\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/cs/status\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_configuration_out_of_consul_if_it_is_changed",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var consulConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/status\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/cs/status\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var secondConsulConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/status\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/cs/status/awesome\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenTheConsulConfigurationIs(consulConfig)).And(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022/status\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/cs/status\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(x =\u003E GivenTheConsulConfigurationIs(secondConsulConfig)).Then(x =\u003E ThenTheConfigIsUpdatedInOcelot()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    const string serviceName = \u0022web\u0022;\r\n    int downstreamServicePort = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamServicePort}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = downstreamServicePort,\r\n            ID = \u0022web_90_0_2_224_8080\u0022,\r\n            Tags = new[]\r\n            {\r\n                \u0022version-v1\u0022\r\n            }\r\n        },\r\n    };\r\n    var consulConfig = new FileConfiguration\r\n    {\r\n        DynamicRoutes = new List\u003CFileDynamicRoute\u003E\r\n        {\r\n            new FileDynamicRoute\r\n            {\r\n                ServiceName = serviceName,\r\n                RateLimitRule = new FileRateLimitRule()\r\n                {\r\n                    EnableRateLimiting = true,\r\n                    ClientWhitelist = new List\u003Cstring\u003E(),\r\n                    Limit = 3,\r\n                    Period = \u00221s\u0022,\r\n                    PeriodTimespan = 1000\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            },\r\n            RateLimitOptions = new FileRateLimitOptions()\r\n            {\r\n                ClientIdHeader = \u0022ClientId\u0022,\r\n                DisableRateLimitHeaders = false,\r\n                QuotaExceededMessage = \u0022\u0022,\r\n                RateLimitCounterPrefix = \u0022\u0022,\r\n                HttpStatusCode = 428\r\n            },\r\n            DownstreamScheme = \u0022http\u0022,\r\n        }\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl, \u0022/something\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E GivenTheConsulConfigurationIs(consulConfig)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(x =\u003E x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/web/something\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/web/something\u0022, 2)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/web/something\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(428)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConsulConfigurationInConsulTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_with_simple_url",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    this.Given(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_configuration_out_of_consul",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var consulConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/status\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/cs/status\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenTheConsulConfigurationIs(consulConfig)).And(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022/status\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/cs/status\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_configuration_out_of_consul_if_it_is_changed",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var consulConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/status\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/cs/status\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    var secondConsulConfig = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/status\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/cs/status/awesome\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenTheConsulConfigurationIs(consulConfig)).And(x =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, \u0022\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{servicePort}\u0022, \u0022/status\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/cs/status\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(x =\u003E GivenTheConsulConfigurationIs(secondConsulConfig)).Then(x =\u003E ThenTheConfigIsUpdatedInOcelot()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    const string serviceName = \u0022web\u0022;\r\n    int downstreamServicePort = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamServicePort}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = downstreamServicePort,\r\n            ID = \u0022web_90_0_2_224_8080\u0022,\r\n            Tags = new[]\r\n            {\r\n                \u0022version-v1\u0022\r\n            }\r\n        },\r\n    };\r\n    var consulConfig = new FileConfiguration\r\n    {\r\n        DynamicRoutes = new List\u003CFileDynamicRoute\u003E\r\n        {\r\n            new FileDynamicRoute\r\n            {\r\n                ServiceName = serviceName,\r\n                RateLimitRule = new FileRateLimitRule()\r\n                {\r\n                    EnableRateLimiting = true,\r\n                    ClientWhitelist = new List\u003Cstring\u003E(),\r\n                    Limit = 3,\r\n                    Period = \u00221s\u0022,\r\n                    PeriodTimespan = 1000\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            },\r\n            RateLimitOptions = new FileRateLimitOptions()\r\n            {\r\n                ClientIdHeader = \u0022ClientId\u0022,\r\n                DisableRateLimitHeaders = false,\r\n                QuotaExceededMessage = \u0022\u0022,\r\n                RateLimitCounterPrefix = \u0022\u0022,\r\n                HttpStatusCode = 428\r\n            },\r\n            DownstreamScheme = \u0022http\u0022,\r\n        }\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl, \u0022/something\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E GivenTheConsulConfigurationIs(consulConfig)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(x =\u003E x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingConsulToStoreConfig()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/web/something\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/web/something\u0022, 2)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(200)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit(\u0022/web/something\u0022, 1)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(428)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConsulWebSocketTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_proxy_websocket_input_to_downstream_service_and_use_service_discovery_and_load_balancer",
        "Body": "{\r\n    var downstreamPort = RandomPortFinder.GetRandomPort();\r\n    var downstreamHost = \u0022localhost\u0022;\r\n    var secondDownstreamPort = RandomPortFinder.GetRandomPort();\r\n    var secondDownstreamHost = \u0022localhost\u0022;\r\n    var serviceName = \u0022websockets\u0022;\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = downstreamHost,\r\n            Port = downstreamPort,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var serviceEntryTwo = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = secondDownstreamHost,\r\n            Port = secondDownstreamPort,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var config = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamPathTemplate = \u0022/ws\u0022,\r\n                DownstreamScheme = \u0022ws\u0022,\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022RoundRobin\u0022\r\n                },\r\n                ServiceName = serviceName,\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort,\r\n                Type = \u0022consul\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E _steps.GivenThereIsAConfiguration(config)).And(_ =\u003E _steps.StartFakeOcelotWithWebSocketsWithConsul()).And(_ =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(_ =\u003E GivenTheServicesAreRegisteredWithConsul(serviceEntryOne, serviceEntryTwo)).And(_ =\u003E StartFakeDownstreamService($\u0022http://{downstreamHost}:{downstreamPort}\u0022, \u0022/ws\u0022)).And(_ =\u003E StartSecondFakeDownstreamService($\u0022http://{secondDownstreamHost}:{secondDownstreamPort}\u0022, \u0022/ws\u0022)).When(_ =\u003E WhenIStartTheClients()).Then(_ =\u003E ThenBothDownstreamServicesAreCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ContentTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_add_content_type_or_content_length_headers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheContentTypeShouldBeEmpty()).And(x =\u003E ThenTheContentLengthShouldBeZero()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_content_type_and_content_length_headers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var contentType = \u0022application/json\u0022;\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 201, string.Empty)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.GivenThePostHasContent(\u0022postContent\u0022)).And(x =\u003E _steps.GivenThePostHasContentType(contentType)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created)).And(x =\u003E ThenTheContentLengthIs(11)).And(x =\u003E ThenTheContentTypeIsIs(contentType)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_add_default_content_type_header",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 201, string.Empty)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.GivenThePostHasContent(\u0022postContent\u0022)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created)).And(x =\u003E ThenTheContentLengthIs(11)).And(x =\u003E ThenTheContentTypeIsIs(\u0022text/plain; charset=utf-8\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeMiddleware",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_pre_query_string_builder_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        AuthorizationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_authorization_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        AuthorizationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_authentication_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        AuthenticationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/41879/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_pre_error_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        PreErrorResponderMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_pre_authorization_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        PreAuthorizationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_pre_http_authentication_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        PreAuthenticationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_fix_issue_237",
        "Body": "{\r\n    Func\u003Cobject, Task\u003E callback = state =\u003E\r\n    {\r\n        var httpContext = (HttpContext)state;\r\n        if (httpContext.Response.StatusCode \u003E 400)\r\n        {\r\n            Debug.WriteLine(\u0022COUNT CALLED\u0022);\r\n            Console.WriteLine(\u0022COUNT CALLED\u0022);\r\n        }\r\n\r\n        return Task.CompletedTask;\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/west\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022/test\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunningWithMiddleareBeforePipeline\u003CFakeMiddleware\u003E(callback)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CustomMiddlewareTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_pre_query_string_builder_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        AuthorizationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_authorization_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        AuthorizationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_authentication_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        AuthenticationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/41879/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_pre_error_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        PreErrorResponderMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_pre_authorization_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        PreAuthorizationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_pre_http_authentication_middleware",
        "Body": "{\r\n    var configuration = new OcelotPipelineConfiguration\r\n    {\r\n        PreAuthenticationMiddleware = async (ctx, next) =\u003E\r\n        {\r\n            _counter\u002B\u002B;\r\n            await next.Invoke();\r\n        }\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunning(configuration)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E x.ThenTheCounterIs(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_fix_issue_237",
        "Body": "{\r\n    Func\u003Cobject, Task\u003E callback = state =\u003E\r\n    {\r\n        var httpContext = (HttpContext)state;\r\n        if (httpContext.Response.StatusCode \u003E 400)\r\n        {\r\n            Debug.WriteLine(\u0022COUNT CALLED\u0022);\r\n            Console.WriteLine(\u0022COUNT CALLED\u0022);\r\n        }\r\n\r\n        return Task.CompletedTask;\r\n    };\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var fileConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/west\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022/test\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(fileConfiguration, _configurationPath)).And(x =\u003E _steps.GivenOcelotIsRunningWithMiddleareBeforePipeline\u003CFakeMiddleware\u003E(callback)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GzipTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_with_simple_url",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var input = \u0022people\u0022;\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022, \u0022\\\u0022people\\\u0022\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.GivenThePostHasGzipContent(input)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HeaderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_transform_upstream_header",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                UpstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022Laz\u0022,\r\n                        \u0022D, GP\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Laz\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.GivenIAddAHeader(\u0022Laz\u0022, \u0022D\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022GP\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_transform_downstream_header",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022Location\u0022,\r\n                        \u0022http://www.bbc.co.uk/, http://ocelot.com/\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Location\u0022, \u0022http://www.bbc.co.uk/\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Location\u0022, \u0022http://ocelot.com/\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_fix_issue_190",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022Location\u0022,\r\n                        $\u0022http://localhost:{port}, {{BaseUrl}}\u0022}\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    AllowAutoRedirect = false\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 302, \u0022Location\u0022, $\u0022http://localhost:{port}/pay/Receive\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Redirect)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Location\u0022, \u0022http://localhost:5000/pay/Receive\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_fix_issue_205",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022Location\u0022,\r\n                        \u0022{DownstreamBaseUrl}, {BaseUrl}\u0022\r\n                    }\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    AllowAutoRedirect = false\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 302, \u0022Location\u0022, $\u0022http://localhost:{port}/pay/Receive\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Redirect)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Location\u0022, \u0022http://localhost:5000/pay/Receive\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_fix_issue_417",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022Location\u0022,\r\n                        \u0022{DownstreamBaseUrl}, {BaseUrl}\u0022\r\n                    }\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    AllowAutoRedirect = false\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            BaseUrl = \u0022http://anotherapp.azurewebsites.net\u0022\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 302, \u0022Location\u0022, $\u0022http://localhost:{port}/pay/Receive\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Redirect)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Location\u0022, \u0022http://anotherapp.azurewebsites.net/pay/Receive\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "request_should_reuse_cookies_with_cookie_container",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/sso/{everything}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/sso/{everything}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022,\r\n                    \u0022Post\u0022,\r\n                    \u0022Options\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseCookieContainer = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/sso/test\u0022, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/sso/test\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Set-Cookie\u0022, \u0022test=0; path=/\u0022)).And(x =\u003E _steps.GivenIAddCookieToMyRequest(\u0022test=1; path=/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/sso/test\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "request_should_have_own_cookies_no_cookie_container",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/sso/{everything}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/sso/{everything}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022,\r\n                    \u0022Post\u0022,\r\n                    \u0022Options\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseCookieContainer = false\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/sso/test\u0022, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/sso/test\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Set-Cookie\u0022, \u0022test=0; path=/\u0022)).And(x =\u003E _steps.GivenIAddCookieToMyRequest(\u0022test=1; path=/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/sso/test\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "issue_474_should_not_put_spaces_in_header",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Accept\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.GivenIAddAHeader(\u0022Accept\u0022, \u0022text/html,application/xhtml\u002Bxml,application/xml;\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022text/html,application/xhtml\u002Bxml,application/xml;\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "issue_474_should_put_spaces_in_header",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Accept\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.GivenIAddAHeader(\u0022Accept\u0022, \u0022text/html\u0022)).And(x =\u003E _steps.GivenIAddAHeader(\u0022Accept\u0022, \u0022application/xhtml\u002Bxml\u0022)).And(x =\u003E _steps.GivenIAddAHeader(\u0022Accept\u0022, \u0022application/xml\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022text/html, application/xhtml\u002Bxml, application/xml\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeHttpClientCache",
    "Message": null,
    "Methods": [
      {
        "Name": "should_cache_one_http_client_same_re_route",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var cache = new FakeHttpClientCache();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithFakeHttpClientCache(cache)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheCountShouldBe(cache, 1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_cache_two_http_client_different_re_route",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/two\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/two\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var cache = new FakeHttpClientCache();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithFakeHttpClientCache(cache)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/two\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/two\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/two\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheCountShouldBe(cache, 2)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpClientCachingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_cache_one_http_client_same_re_route",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var cache = new FakeHttpClientCache();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithFakeHttpClientCache(cache)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheCountShouldBe(cache, 1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_cache_two_http_client_different_re_route",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/two\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/two\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var cache = new FakeHttpClientCache();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithFakeHttpClientCache(cache)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/two\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/two\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/two\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheCountShouldBe(cache, 2)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeDependency",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_re_route_ordered_specific_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DelegatingHandlers = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022FakeHandlerTwo\u0022,\r\n                    \u0022FakeHandler\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithSpecficHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheOrderedHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_multiple_times",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlerRegisteredInDi\u003CFakeHandlerAgain\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_with_dependency",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var dependency = new FakeDependency();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandlerWithDependency\u003E(dependency)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheDependencyIsCalled(dependency)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeHandlerWithDependency",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_re_route_ordered_specific_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DelegatingHandlers = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022FakeHandlerTwo\u0022,\r\n                    \u0022FakeHandler\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithSpecficHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheOrderedHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_multiple_times",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlerRegisteredInDi\u003CFakeHandlerAgain\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_with_dependency",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var dependency = new FakeDependency();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandlerWithDependency\u003E(dependency)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheDependencyIsCalled(dependency)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_re_route_ordered_specific_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DelegatingHandlers = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022FakeHandlerTwo\u0022,\r\n                    \u0022FakeHandler\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithSpecficHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheOrderedHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_multiple_times",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlerRegisteredInDi\u003CFakeHandlerAgain\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_with_dependency",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var dependency = new FakeDependency();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandlerWithDependency\u003E(dependency)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheDependencyIsCalled(dependency)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeHandlerTwo",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_re_route_ordered_specific_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DelegatingHandlers = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022FakeHandlerTwo\u0022,\r\n                    \u0022FakeHandler\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithSpecficHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheOrderedHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_multiple_times",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlerRegisteredInDi\u003CFakeHandlerAgain\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_with_dependency",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var dependency = new FakeDependency();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandlerWithDependency\u003E(dependency)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheDependencyIsCalled(dependency)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeHandlerAgain",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_re_route_ordered_specific_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DelegatingHandlers = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022FakeHandlerTwo\u0022,\r\n                    \u0022FakeHandler\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithSpecficHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheOrderedHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_multiple_times",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlerRegisteredInDi\u003CFakeHandlerAgain\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_with_dependency",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var dependency = new FakeDependency();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandlerWithDependency\u003E(dependency)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheDependencyIsCalled(dependency)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpDelegatingHandlersTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_call_re_route_ordered_specific_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DelegatingHandlers = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022FakeHandlerTwo\u0022,\r\n                    \u0022FakeHandler\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithSpecficHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheOrderedHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandler, FakeHandlerTwo\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheHandlersAreCalledCorrectly()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_multiple_times",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlerRegisteredInDi\u003CFakeHandlerAgain\u003E()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_call_global_di_handlers_with_dependency",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var dependency = new FakeDependency();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi\u003CFakeHandlerWithDependency\u003E(dependency)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheDependencyIsCalled(dependency)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_when_using_http_one",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022https\u0022,\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamHttpMethod = \u0022POST\u0022,\r\n                DownstreamHttpVersion = \u00221.0\u0022,\r\n                DangerousAcceptAnyServerCertificateValidator = true\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, port, HttpProtocols.Http1)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_using_http_one_point_one",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022https\u0022,\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamHttpMethod = \u0022POST\u0022,\r\n                DownstreamHttpVersion = \u00221.1\u0022,\r\n                DangerousAcceptAnyServerCertificateValidator = true\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, port, HttpProtocols.Http1)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_using_http_two_point_zero",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022https\u0022,\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamHttpMethod = \u0022POST\u0022,\r\n                DownstreamHttpVersion = \u00222.0\u0022,\r\n                DangerousAcceptAnyServerCertificateValidator = true\r\n            },\r\n        },\r\n    };\r\n    const string expected = \u0022here is some content\u0022;\r\n    var httpContent = new StringContent(expected);\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, port, HttpProtocols.Http2)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022, httpContent)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_502_when_using_http_one_to_talk_to_server_running_http_two",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022https\u0022,\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamHttpMethod = \u0022POST\u0022,\r\n                DownstreamHttpVersion = \u00221.1\u0022,\r\n                DangerousAcceptAnyServerCertificateValidator = true\r\n            },\r\n        },\r\n    };\r\n    const string expected = \u0022here is some content\u0022;\r\n    var httpContent = new StringContent(expected);\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, port, HttpProtocols.Http2)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022, httpContent)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.BadGateway)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_using_http_two_to_talk_to_server_running_http_one_point_one",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022https\u0022,\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamHttpMethod = \u0022POST\u0022,\r\n                DownstreamHttpVersion = \u00222.0\u0022,\r\n                DangerousAcceptAnyServerCertificateValidator = true\r\n            },\r\n        },\r\n    };\r\n    const string expected = \u0022here is some content\u0022;\r\n    var httpContent = new StringContent(expected);\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, port, HttpProtocols.Http1)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022, httpContent)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CustomLoadBalancer",
    "Message": null,
    "Methods": [
      {
        "Name": "should_load_balance_request_with_least_connection",
        "Body": "{\r\n    int portOne = RandomPortFinder.GetRandomPort();\r\n    int portTwo = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{portOne}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{portTwo}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = nameof(LeastConnection)\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = portOne\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = portTwo\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 50)).Then(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(24, 26)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_balance_request_with_round_robin",
        "Body": "{\r\n    var downstreamPortOne = RandomPortFinder.GetRandomPort();\r\n    var downstreamPortTwo = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamPortOne}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{downstreamPortTwo}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = nameof(RoundRobin)\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortOne\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortTwo\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 50)).Then(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(24, 26)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_balance_request_with_custom_load_balancer",
        "Body": "{\r\n    var downstreamPortOne = RandomPortFinder.GetRandomPort();\r\n    var downstreamPortTwo = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamPortOne}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{downstreamPortTwo}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = nameof(CustomLoadBalancer)\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortOne,\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortTwo,\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration(),\r\n    };\r\n    Func\u003CIServiceProvider, DownstreamRoute, IServiceDiscoveryProvider, CustomLoadBalancer\u003E loadBalancerFactoryFunc = (serviceProvider, route, serviceDiscoveryProvider) =\u003E new CustomLoadBalancer(serviceDiscoveryProvider.Get);\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithCustomLoadBalancer(loadBalancerFactoryFunc)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 50)).Then(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(24, 26)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoadBalancerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_load_balance_request_with_least_connection",
        "Body": "{\r\n    int portOne = RandomPortFinder.GetRandomPort();\r\n    int portTwo = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{portOne}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{portTwo}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = nameof(LeastConnection)\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = portOne\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = portTwo\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 50)).Then(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(24, 26)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_balance_request_with_round_robin",
        "Body": "{\r\n    var downstreamPortOne = RandomPortFinder.GetRandomPort();\r\n    var downstreamPortTwo = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamPortOne}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{downstreamPortTwo}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = nameof(RoundRobin)\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortOne\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortTwo\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 50)).Then(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(24, 26)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_load_balance_request_with_custom_load_balancer",
        "Body": "{\r\n    var downstreamPortOne = RandomPortFinder.GetRandomPort();\r\n    var downstreamPortTwo = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamPortOne}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{downstreamPortTwo}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = nameof(CustomLoadBalancer)\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortOne,\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortTwo,\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration(),\r\n    };\r\n    Func\u003CIServiceProvider, DownstreamRoute, IServiceDiscoveryProvider, CustomLoadBalancer\u003E loadBalancerFactoryFunc = (serviceProvider, route, serviceDiscoveryProvider) =\u003E new CustomLoadBalancer(serviceDiscoveryProvider.Get);\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithCustomLoadBalancer(loadBalancerFactoryFunc)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 50)).Then(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(24, 26)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MethodTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_when_get_converted_to_post",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamHttpMethod = \u0022POST\u0022,\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, \u0022POST\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_get_converted_to_post_with_content",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamHttpMethod = \u0022POST\u0022,\r\n            },\r\n        },\r\n    };\r\n    const string expected = \u0022here is some content\u0022;\r\n    var httpContent = new StringContent(expected);\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, \u0022POST\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022, httpContent)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_get_converted_to_get_with_content",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamHttpMethod = \u0022GET\u0022,\r\n            },\r\n        },\r\n    };\r\n    const string expected = \u0022here is some content\u0022;\r\n    var httpContent = new StringContent(expected);\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, \u0022GET\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022, httpContent)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(expected)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OpenTracingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_forward_tracing_information_from_ocelot_and_downstream_services",
        "Body": "{\r\n    int port1 = RandomPortFinder.GetRandomPort();\r\n    int port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration()\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort()\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api002/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var tracingPort = RandomPortFinder.GetRandomPort();\r\n    var tracingUrl = $\u0022http://localhost:{tracingPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(_ =\u003E GivenFakeOpenTracing(tracingUrl)).And(_ =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, tracingUrl)).And(_ =\u003E GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Tom\u0022, tracingUrl)).And(_ =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(_ =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api002/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).And(_ =\u003E ThenTheTracerIsCalled(fakeTracer)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_tracing_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E()\r\n                {\r\n                    {\r\n                        \u0022Trace-Id\u0022,\r\n                        \u0022{TraceId}\u0022\r\n                    },\r\n                    {\r\n                        \u0022Tom\u0022,\r\n                        \u0022Laura\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(x =\u003E GivenFakeOpenTracing(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheTraceHeaderIsSet(\u0022Trace-Id\u0022)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeTracer",
    "Message": null,
    "Methods": [
      {
        "Name": "should_forward_tracing_information_from_ocelot_and_downstream_services",
        "Body": "{\r\n    int port1 = RandomPortFinder.GetRandomPort();\r\n    int port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration()\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort()\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api002/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var tracingPort = RandomPortFinder.GetRandomPort();\r\n    var tracingUrl = $\u0022http://localhost:{tracingPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(_ =\u003E GivenFakeOpenTracing(tracingUrl)).And(_ =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, tracingUrl)).And(_ =\u003E GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Tom\u0022, tracingUrl)).And(_ =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(_ =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api002/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).And(_ =\u003E ThenTheTracerIsCalled(fakeTracer)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_tracing_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E()\r\n                {\r\n                    {\r\n                        \u0022Trace-Id\u0022,\r\n                        \u0022{TraceId}\u0022\r\n                    },\r\n                    {\r\n                        \u0022Tom\u0022,\r\n                        \u0022Laura\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(x =\u003E GivenFakeOpenTracing(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheTraceHeaderIsSet(\u0022Trace-Id\u0022)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeSpanBuilder",
    "Message": null,
    "Methods": [
      {
        "Name": "should_forward_tracing_information_from_ocelot_and_downstream_services",
        "Body": "{\r\n    int port1 = RandomPortFinder.GetRandomPort();\r\n    int port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration()\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort()\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api002/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var tracingPort = RandomPortFinder.GetRandomPort();\r\n    var tracingUrl = $\u0022http://localhost:{tracingPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(_ =\u003E GivenFakeOpenTracing(tracingUrl)).And(_ =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, tracingUrl)).And(_ =\u003E GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Tom\u0022, tracingUrl)).And(_ =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(_ =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api002/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).And(_ =\u003E ThenTheTracerIsCalled(fakeTracer)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_tracing_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E()\r\n                {\r\n                    {\r\n                        \u0022Trace-Id\u0022,\r\n                        \u0022{TraceId}\u0022\r\n                    },\r\n                    {\r\n                        \u0022Tom\u0022,\r\n                        \u0022Laura\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(x =\u003E GivenFakeOpenTracing(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheTraceHeaderIsSet(\u0022Trace-Id\u0022)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeScope",
    "Message": null,
    "Methods": [
      {
        "Name": "should_forward_tracing_information_from_ocelot_and_downstream_services",
        "Body": "{\r\n    int port1 = RandomPortFinder.GetRandomPort();\r\n    int port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration()\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort()\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api002/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var tracingPort = RandomPortFinder.GetRandomPort();\r\n    var tracingUrl = $\u0022http://localhost:{tracingPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(_ =\u003E GivenFakeOpenTracing(tracingUrl)).And(_ =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, tracingUrl)).And(_ =\u003E GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Tom\u0022, tracingUrl)).And(_ =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(_ =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api002/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).And(_ =\u003E ThenTheTracerIsCalled(fakeTracer)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_tracing_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E()\r\n                {\r\n                    {\r\n                        \u0022Trace-Id\u0022,\r\n                        \u0022{TraceId}\u0022\r\n                    },\r\n                    {\r\n                        \u0022Tom\u0022,\r\n                        \u0022Laura\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(x =\u003E GivenFakeOpenTracing(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheTraceHeaderIsSet(\u0022Trace-Id\u0022)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeSpan",
    "Message": null,
    "Methods": [
      {
        "Name": "should_forward_tracing_information_from_ocelot_and_downstream_services",
        "Body": "{\r\n    int port1 = RandomPortFinder.GetRandomPort();\r\n    int port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration()\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort()\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api002/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var tracingPort = RandomPortFinder.GetRandomPort();\r\n    var tracingUrl = $\u0022http://localhost:{tracingPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(_ =\u003E GivenFakeOpenTracing(tracingUrl)).And(_ =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, tracingUrl)).And(_ =\u003E GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Tom\u0022, tracingUrl)).And(_ =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(_ =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api002/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).And(_ =\u003E ThenTheTracerIsCalled(fakeTracer)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_tracing_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E()\r\n                {\r\n                    {\r\n                        \u0022Trace-Id\u0022,\r\n                        \u0022{TraceId}\u0022\r\n                    },\r\n                    {\r\n                        \u0022Tom\u0022,\r\n                        \u0022Laura\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(x =\u003E GivenFakeOpenTracing(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheTraceHeaderIsSet(\u0022Trace-Id\u0022)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeSpanContext",
    "Message": null,
    "Methods": [
      {
        "Name": "should_forward_tracing_information_from_ocelot_and_downstream_services",
        "Body": "{\r\n    int port1 = RandomPortFinder.GetRandomPort();\r\n    int port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration()\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort()\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api002/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var tracingPort = RandomPortFinder.GetRandomPort();\r\n    var tracingUrl = $\u0022http://localhost:{tracingPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(_ =\u003E GivenFakeOpenTracing(tracingUrl)).And(_ =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, tracingUrl)).And(_ =\u003E GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Tom\u0022, tracingUrl)).And(_ =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(_ =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api002/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).And(_ =\u003E ThenTheTracerIsCalled(fakeTracer)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_tracing_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E()\r\n                {\r\n                    {\r\n                        \u0022Trace-Id\u0022,\r\n                        \u0022{TraceId}\u0022\r\n                    },\r\n                    {\r\n                        \u0022Tom\u0022,\r\n                        \u0022Laura\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(x =\u003E GivenFakeOpenTracing(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheTraceHeaderIsSet(\u0022Trace-Id\u0022)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Wait",
    "Message": null,
    "Methods": [
      {
        "Name": "should_forward_tracing_information_from_ocelot_and_downstream_services",
        "Body": "{\r\n    int port1 = RandomPortFinder.GetRandomPort();\r\n    int port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration()\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort()\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api002/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var tracingPort = RandomPortFinder.GetRandomPort();\r\n    var tracingUrl = $\u0022http://localhost:{tracingPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(_ =\u003E GivenFakeOpenTracing(tracingUrl)).And(_ =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, tracingUrl)).And(_ =\u003E GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Tom\u0022, tracingUrl)).And(_ =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(_ =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api002/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).And(_ =\u003E ThenTheTracerIsCalled(fakeTracer)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_tracing_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E()\r\n                {\r\n                    {\r\n                        \u0022Trace-Id\u0022,\r\n                        \u0022{TraceId}\u0022\r\n                    },\r\n                    {\r\n                        \u0022Tom\u0022,\r\n                        \u0022Laura\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(x =\u003E GivenFakeOpenTracing(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheTraceHeaderIsSet(\u0022Trace-Id\u0022)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Waiter",
    "Message": null,
    "Methods": [
      {
        "Name": "should_forward_tracing_information_from_ocelot_and_downstream_services",
        "Body": "{\r\n    int port1 = RandomPortFinder.GetRandomPort();\r\n    int port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration()\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort()\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api002/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var tracingPort = RandomPortFinder.GetRandomPort();\r\n    var tracingUrl = $\u0022http://localhost:{tracingPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(_ =\u003E GivenFakeOpenTracing(tracingUrl)).And(_ =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port1}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, tracingUrl)).And(_ =\u003E GivenServiceTwoIsRunning($\u0022http://localhost:{port2}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Tom\u0022, tracingUrl)).And(_ =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(_ =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api002/values\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).And(_ =\u003E ThenTheTracerIsCalled(fakeTracer)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_tracing_header",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api001/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    UseTracing = true\r\n                },\r\n                DownstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E()\r\n                {\r\n                    {\r\n                        \u0022Trace-Id\u0022,\r\n                        \u0022{TraceId}\u0022\r\n                    },\r\n                    {\r\n                        \u0022Tom\u0022,\r\n                        \u0022Laura\u0022\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var butterflyPort = RandomPortFinder.GetRandomPort();\r\n    var butterflyUrl = $\u0022http://localhost:{butterflyPort}\u0022;\r\n    var fakeTracer = new FakeTracer();\r\n    this.Given(x =\u003E GivenFakeOpenTracing(butterflyUrl)).And(x =\u003E GivenServiceOneIsRunning($\u0022http://localhost:{port}\u0022, \u0022/api/values\u0022, 200, \u0022Hello from Laura\u0022, butterflyUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api001/values\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.ThenTheTraceHeaderIsSet(\u0022Trace-Id\u0022)).And(x =\u003E _steps.ThenTheResponseHeaderIs(\u0022Tom\u0022, \u0022Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PollyQoSTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_timeout",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 1000,\r\n                    ExceptionsAllowedBeforeBreaking = 10\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 200, string.Empty, 10)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithPolly()).And(x =\u003E _steps.GivenThePostHasContent(\u0022postContent\u0022)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_timeout",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    TimeoutValue = 10,\r\n                    ExceptionsAllowedBeforeBreaking = 10\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, 201, string.Empty, 1000)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithPolly()).And(x =\u003E _steps.GivenThePostHasContent(\u0022postContent\u0022)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_open_circuit_breaker_then_close",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    ExceptionsAllowedBeforeBreaking = 1,\r\n                    TimeoutValue = 500,\r\n                    DurationOfBreak = 1000\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAPossiblyBrokenServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022Hello from Laura\u0022)).Given(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).Given(x =\u003E _steps.GivenOcelotIsRunningWithPolly()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).Given(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Given(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable)).Given(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Given(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable)).Given(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Given(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable)).Given(x =\u003E x.GivenIWaitMilliseconds(3000)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "open_circuit_should_not_effect_different_route",
        "Body": "{\r\n    var port1 = RandomPortFinder.GetRandomPort();\r\n    var port2 = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                QoSOptions = new FileQoSOptions\r\n                {\r\n                    ExceptionsAllowedBeforeBreaking = 1,\r\n                    TimeoutValue = 500,\r\n                    DurationOfBreak = 1000\r\n                }\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/working\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAPossiblyBrokenServiceRunningOn($\u0022http://localhost:{port1}\u0022, \u0022Hello from Laura\u0022)).And(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port2}/\u0022, 200, \u0022Hello from Tom\u0022, 0)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithPolly()).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable)).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/working\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Tom\u0022)).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable)).And(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).And(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable)).And(x =\u003E x.GivenIWaitMilliseconds(3000)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ReasonPhraseTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_reason_phrase",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, \u0022some reason\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).And(_ =\u003E _steps.ThenTheReasonPhraseIs(\u0022some reason\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RequestIdTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_use_default_request_id_and_forward",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                RequestIdKey = _steps.RequestIdKey,\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheRequestIdIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_request_id_and_forward",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var requestId = Guid.NewGuid().ToString();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022, requestId)).Then(x =\u003E _steps.ThenTheRequestIdIsReturned(requestId)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_global_request_id_and_forward",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            RequestIdKey = _steps.RequestIdKey\r\n        }\r\n    };\r\n    var requestId = Guid.NewGuid().ToString();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022, requestId)).Then(x =\u003E _steps.ThenTheRequestIdIsReturned(requestId)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_global_request_id_create_and_forward",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            RequestIdKey = _steps.RequestIdKey\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheRequestIdIsReturned()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ResponseCodeTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_304_when_service_returns_304",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{everything}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/{everything}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/inline.132.bundle.js\u0022, 304)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/inline.132.bundle.js\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotModified)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ReturnsErrorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_bad_gateway_error_if_downstream_service_doesnt_respond",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 53877,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.BadGateway)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_internal_server_error_if_downstream_service_returns_internal_server_error",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.InternalServerError)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_log_warning_if_downstream_service_returns_internal_server_error",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithLogger()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenWarningShouldBeLogged()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RoutingTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_match_forward_slash_in_pattern_before_next_forward_slash",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/v{apiVersion}/cards\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/api/v{apiVersion}/cards\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                Priority = 1\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/api/v1/aaaaaaaaa/cards\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api/v1/aaaaaaaaa/cards\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_404_when_no_configuration_at_all",
        "Body": "{\r\n    this.Given(x =\u003E _steps.GivenThereIsAConfiguration(new FileConfiguration())).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_forward_slash_and_placeholder_only",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_favouring_forward_slash_with_path_route",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 50810,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/test\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/test\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_favouring_forward_slash",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51880,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_favouring_forward_slash_route_because_it_is_first",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51879,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_nothing_and_placeholder_only",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "bug",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/v1/vacancy\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/vacancy/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Options\u0022,\r\n                    \u0022Put\u0022,\r\n                    \u0022Get\u0022,\r\n                    \u0022Post\u0022,\r\n                    \u0022Delete\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022LeastConnection\u0022\r\n                }\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/v1/vacancy/{vacancyId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/vacancy/{vacancyId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Options\u0022,\r\n                    \u0022Put\u0022,\r\n                    \u0022Get\u0022,\r\n                    \u0022Post\u0022,\r\n                    \u0022Delete\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022LeastConnection\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/v1/vacancy/1\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/vacancy/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_path_missing_forward_slash_as_first_char",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_when_host_has_trailing_slash",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_ok_when_upstream_url_ends_with_forward_slash_but_template_does_not",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/products\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/products/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/products\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/products\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_not_found_when_upstream_url_ends_with_forward_slash_but_template_does_not",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/products\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/products\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/products\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/products/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_not_found",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/products\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/products/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/products\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/products/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_complex_url",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products/{productId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/products/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/products/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Some Product\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_complex_url_that_starts_with_placeholder",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/{variantId}/products/{productId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/{variantId}/products/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/23/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u002223/products/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Some Product\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_add_trailing_slash_to_downstream_url",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/products/{productId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/products/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/products/1\u0022)).Then(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/api/products/1\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_201_with_simple_url",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 201, string.Empty)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.GivenThePostHasContent(\u0022postContent\u0022)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_201_with_complex_query_string",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/newThing\u0022,\r\n                UpstreamPathTemplate = \u0022/newThing\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/newThing\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/newThing?DeviceType=IphoneApp\u0026Browser=moonpigIphone\u0026BrowserString=-\u0026CountryCode=123\u0026DeviceName=iPhone 5 (GSM\u002BCDMA)\u0026OperatingSystem=iPhone OS 7.1.2\u0026BrowserVersion=3708AdHoc\u0026ipAddress=-\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_placeholder_for_final_url_path",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/{urlPath}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/myApp1Name/api/{urlPath}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/products/1\u0022, 200, \u0022Some Product\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/myApp1Name/api/products/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Some Product\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_201_with_simple_url_and_multiple_upstream_http_method",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022,\r\n                    \u0022Post\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022\u0022, 201, string.Empty)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).And(x =\u003E _steps.GivenThePostHasContent(\u0022postContent\u0022)).When(x =\u003E _steps.WhenIPostUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_and_any_upstream_http_method",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E(),\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_404_when_calling_upstream_route_with_no_matching_downstream_re_route_github_issue_134",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/v1/vacancy\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/vacancy/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Options\u0022,\r\n                    \u0022Put\u0022,\r\n                    \u0022Get\u0022,\r\n                    \u0022Post\u0022,\r\n                    \u0022Delete\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022LeastConnection\u0022\r\n                }\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/v1/vacancy/{vacancyId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/vacancy/{vacancyId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Options\u0022,\r\n                    \u0022Put\u0022,\r\n                    \u0022Get\u0022,\r\n                    \u0022Post\u0022,\r\n                    \u0022Delete\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022LeastConnection\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/v1/vacancy/1\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022api/vacancy/1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_set_trailing_slash_on_url_template",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/platform/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/api/swagger/lib/backbone-min.js\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/platform/swagger/lib/backbone-min.js\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(x =\u003E ThenTheDownstreamUrlPathShouldBe(\u0022/api/swagger/lib/backbone-min.js\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_priority",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/goods/{url}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/goods/{url}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 53879,\r\n                    }\r\n                },\r\n                Priority = 0\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/goods/delete\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/goods/delete\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/goods/delete\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/goods/delete\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_match_multiple_paths_with_catch_all",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{everything}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/{everything}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/test/toot\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/test/toot\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_fix_issue_271",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/v1/{everything}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/api/v1/{everything}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022,\r\n                    \u0022Put\u0022,\r\n                    \u0022Post\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/connect/token\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/connect/token\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Post\u0022\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 5001,\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}/\u0022, \u0022/api/v1/modules/Test\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api/v1/modules/Test\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RoutingWithQueryStringTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_with_query_string_template",
        "Body": "{\r\n    var subscriptionId = Guid.NewGuid().ToString();\r\n    var unitId = Guid.NewGuid().ToString();\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/subscriptions/{subscriptionId}/updates?unitId={unitId}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api/units/{subscriptionId}/{unitId}/updates\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, $\u0022/api/subscriptions/{subscriptionId}/updates\u0022, $\u0022?unitId={unitId}\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway($\u0022/api/units/{subscriptionId}/{unitId}/updates\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_odata_query_string",
        "Body": "{\r\n    var subscriptionId = Guid.NewGuid().ToString();\r\n    var unitId = Guid.NewGuid().ToString();\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{everything}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/{everything}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, $\u0022/odata/customers\u0022, \u0022?$filter=Name%20eq%20\u0027Sam\u0027\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway($\u0022/odata/customers?$filter=Name eq \u0027Sam\u0027 \u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_query_string_upstream_template",
        "Body": "{\r\n    var subscriptionId = Guid.NewGuid().ToString();\r\n    var unitId = Guid.NewGuid().ToString();\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/units/{subscriptionId}/{unitId}/updates\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api/subscriptions/{subscriptionId}/updates?unitId={unitId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, $\u0022/api/units/{subscriptionId}/{unitId}/updates\u0022, \u0022\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway($\u0022/api/subscriptions/{subscriptionId}/updates?unitId={unitId}\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_404_with_query_string_upstream_template_no_query_string",
        "Body": "{\r\n    var subscriptionId = Guid.NewGuid().ToString();\r\n    var unitId = Guid.NewGuid().ToString();\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/units/{subscriptionId}/{unitId}/updates\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api/subscriptions/{subscriptionId}/updates?unitId={unitId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, $\u0022/api/units/{subscriptionId}/{unitId}/updates\u0022, \u0022\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway($\u0022/api/subscriptions/{subscriptionId}/updates\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_404_with_query_string_upstream_template_different_query_string",
        "Body": "{\r\n    var subscriptionId = Guid.NewGuid().ToString();\r\n    var unitId = Guid.NewGuid().ToString();\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/units/{subscriptionId}/{unitId}/updates\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api/subscriptions/{subscriptionId}/updates?unitId={unitId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, $\u0022/api/units/{subscriptionId}/{unitId}/updates\u0022, \u0022\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway($\u0022/api/subscriptions/{subscriptionId}/updates?test=1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_query_string_upstream_template_multiple_params",
        "Body": "{\r\n    var subscriptionId = Guid.NewGuid().ToString();\r\n    var unitId = Guid.NewGuid().ToString();\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/units/{subscriptionId}/{unitId}/updates\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api/subscriptions/{subscriptionId}/updates?unitId={unitId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, $\u0022/api/units/{subscriptionId}/{unitId}/updates\u0022, \u0022?productId=1\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway($\u0022/api/subscriptions/{subscriptionId}/updates?unitId={unitId}\u0026productId=1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ServiceDiscoveryTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_use_consul_service_discovery_and_load_balance_request",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    var servicePort1 = RandomPortFinder.GetRandomPort();\r\n    var servicePort2 = RandomPortFinder.GetRandomPort();\r\n    var serviceName = \u0022product\u0022;\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{servicePort1}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{servicePort2}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = servicePort1,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var serviceEntryTwo = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = servicePort2,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = serviceName,\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022LeastConnection\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(x =\u003E x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne, serviceEntryTwo)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithConsul()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 50)).Then(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(24, 26)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_handle_request_to_consul_for_downstream_service_and_make_request",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    int servicePort = RandomPortFinder.GetRandomPort();\r\n    const string serviceName = \u0022web\u0022;\r\n    string downstreamServiceOneUrl = $\u0022http://localhost:{servicePort}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = servicePort,\r\n            ID = \u0022web_90_0_2_224_8080\u0022,\r\n            Tags = new[]\r\n            {\r\n                \u0022version-v1\u0022\r\n            }\r\n        },\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/home\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/home\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022,\r\n                    \u0022Options\u0022\r\n                },\r\n                ServiceName = serviceName,\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022LeastConnection\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl, \u0022/api/home\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(x =\u003E x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithConsul()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/home\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    const string serviceName = \u0022web\u0022;\r\n    int downstreamServicePort = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamServicePort}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = downstreamServicePort,\r\n            ID = \u0022web_90_0_2_224_8080\u0022,\r\n            Tags = new[]\r\n            {\r\n                \u0022version-v1\u0022\r\n            }\r\n        },\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            },\r\n            DownstreamScheme = \u0022http\u0022,\r\n            HttpHandlerOptions = new FileHttpHandlerOptions\r\n            {\r\n                AllowAutoRedirect = true,\r\n                UseCookieContainer = true,\r\n                UseTracing = false\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl, \u0022/something\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(x =\u003E x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithConsul()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/web/something\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_consul_service_discovery_and_load_balance_request_no_re_routes",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    var serviceName = \u0022product\u0022;\r\n    var serviceOnePort = RandomPortFinder.GetRandomPort();\r\n    var serviceTwoPort = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{serviceOnePort}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{serviceTwoPort}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = serviceOnePort,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var serviceEntryTwo = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = serviceTwoPort,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            },\r\n            LoadBalancerOptions = new FileLoadBalancerOptions\r\n            {\r\n                Type = \u0022LeastConnection\u0022\r\n            },\r\n            DownstreamScheme = \u0022http\u0022\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(x =\u003E x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne, serviceEntryTwo)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithConsul()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes($\u0022/{serviceName}/\u0022, 50)).Then(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(24, 26)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_token_to_make_request_to_consul",
        "Body": "{\r\n    var token = \u0022abctoken\u0022;\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    var serviceName = \u0022web\u0022;\r\n    var servicePort = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{servicePort}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = servicePort,\r\n            ID = \u0022web_90_0_2_224_8080\u0022,\r\n            Tags = new[]\r\n            {\r\n                \u0022version-v1\u0022\r\n            }\r\n        },\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/home\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/home\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022,\r\n                    \u0022Options\u0022\r\n                },\r\n                ServiceName = serviceName,\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022LeastConnection\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort,\r\n                Token = token\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E GivenThereIsAServiceRunningOn(downstreamServiceOneUrl, \u0022/api/home\u0022, 200, \u0022Hello from Laura\u0022)).And(_ =\u003E GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(_ =\u003E GivenTheServicesAreRegisteredWithConsul(serviceEntryOne)).And(_ =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(_ =\u003E _steps.GivenOcelotIsRunningWithConsul()).When(_ =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/home\u0022)).Then(_ =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(_ =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).And(_ =\u003E ThenTheTokenIs(token)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_send_request_to_service_after_it_becomes_available_in_consul",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    var serviceName = \u0022product\u0022;\r\n    var servicePort1 = RandomPortFinder.GetRandomPort();\r\n    var servicePort2 = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{servicePort1}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{servicePort2}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = servicePort1,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var serviceEntryTwo = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = servicePort2,\r\n            ID = Guid.NewGuid().ToString(),\r\n            Tags = new string[0]\r\n        },\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = serviceName,\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022LeastConnection\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(x =\u003E x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne, serviceEntryTwo)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithConsul()).And(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 10)).And(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(4, 6)).And(x =\u003E WhenIRemoveAService(serviceEntryTwo)).And(x =\u003E GivenIResetCounters()).And(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 10)).And(x =\u003E ThenOnlyOneServiceHasBeenCalled()).And(x =\u003E WhenIAddAServiceBackIn(serviceEntryTwo)).And(x =\u003E GivenIResetCounters()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 10)).Then(x =\u003E x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10)).And(x =\u003E x.ThenBothServicesCalledRealisticAmountOfTimes(4, 6)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_handle_request_to_poll_consul_for_downstream_service_and_make_request",
        "Body": "{\r\n    int consulPort = RandomPortFinder.GetRandomPort();\r\n    const string serviceName = \u0022web\u0022;\r\n    int downstreamServicePort = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamServicePort}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var serviceEntryOne = new ServiceEntry()\r\n    {\r\n        Service = new AgentService()\r\n        {\r\n            Service = serviceName,\r\n            Address = \u0022localhost\u0022,\r\n            Port = downstreamServicePort,\r\n            ID = $\u0022web_90_0_2_224_{downstreamServicePort}\u0022,\r\n            Tags = new[]\r\n            {\r\n                \u0022version-v1\u0022\r\n            }\r\n        },\r\n    };\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/home\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/home\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022,\r\n                    \u0022Options\u0022\r\n                },\r\n                ServiceName = serviceName,\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022LeastConnection\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022http\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort,\r\n                Type = \u0022PollConsul\u0022,\r\n                PollingInterval = 0,\r\n                Namespace = string.Empty\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl, \u0022/api/home\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl, serviceName)).And(x =\u003E x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithConsul()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayWaitingForTheResponseToBeOk(\u0022/home\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ServiceFabricTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_fix_issue_555",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/{everything}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/{everything}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022OcelotServiceApplication/OcelotApplicationService\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = port,\r\n                Type = \u0022ServiceFabric\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/OcelotServiceApplication/OcelotApplicationService/a\u0022, 200, \u0022Hello from Laura\u0022, \u0022b=c\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/a?b=c\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_support_service_fabric_naming_and_dns_service_stateless_and_guest",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/EquipmentInterfaces\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022OcelotServiceApplication/OcelotApplicationService\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = port,\r\n                Type = \u0022ServiceFabric\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/OcelotServiceApplication/OcelotApplicationService/api/values\u0022, 200, \u0022Hello from Laura\u0022, \u0022test=best\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/EquipmentInterfaces?test=best\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_support_service_fabric_naming_and_dns_service_statefull_and_actors",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/EquipmentInterfaces\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022OcelotServiceApplication/OcelotApplicationService\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = port,\r\n                Type = \u0022ServiceFabric\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/OcelotServiceApplication/OcelotApplicationService/api/values\u0022, 200, \u0022Hello from Laura\u0022, \u0022PartitionKind=test\u0026PartitionKey=1\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/EquipmentInterfaces?PartitionKind=test\u0026PartitionKey=1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_support_placeholder_in_service_fabric_service_name",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/values\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/api/{version}/values\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                ServiceName = \u0022Service_{version}/Api\u0022\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Host = \u0022localhost\u0022,\r\n                Port = port,\r\n                Type = \u0022ServiceFabric\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/Service_1.0/Api/values\u0022, 200, \u0022Hello from Laura\u0022, \u0022test=best\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api/1.0/values?test=best\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SslTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_dangerous_accept_any_server_certificate_validator",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DangerousAcceptAnyServerCertificateValidator = true\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022https://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022, port)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_not_dangerous_accept_any_server_certificate_validator",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                DangerousAcceptAnyServerCertificateValidator = false\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022https://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022, port)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.BadGateway)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FakeFileConfigurationRepository",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_try_and_write_to_disk_on_startup_when_not_using_admin_api",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var fakeRepo = new FakeFileConfigurationRepository();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithBlowingUpDiskRepo(fakeRepo)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StartupTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_not_try_and_write_to_disk_on_startup_when_not_using_admin_api",
        "Body": "{\r\n    var port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        }\r\n    };\r\n    var fakeRepo = new FakeFileConfigurationRepository();\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunningWithBlowingUpDiskRepo(fakeRepo)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StickySessionsTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_use_same_downstream_host",
        "Body": "{\r\n    var downstreamPortOne = RandomPortFinder.GetRandomPort();\r\n    var downstreamPortTwo = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamPortOne}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{downstreamPortTwo}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022CookieStickySessions\u0022,\r\n                    Key = \u0022sessionid\u0022,\r\n                    Expiry = 300000\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortOne\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortTwo\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes(\u0022/\u0022, 10, \u0022sessionid\u0022, \u0022123\u0022)).Then(x =\u003E x.ThenTheFirstServiceIsCalled(10)).Then(x =\u003E x.ThenTheSecondServiceIsCalled(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_different_downstream_host_for_different_re_route",
        "Body": "{\r\n    var downstreamPortOne = RandomPortFinder.GetRandomPort();\r\n    var downstreamPortTwo = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamPortOne}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{downstreamPortTwo}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022CookieStickySessions\u0022,\r\n                    Key = \u0022sessionid\u0022,\r\n                    Expiry = 300000\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortOne\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortTwo\r\n                    }\r\n                }\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/test\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022CookieStickySessions\u0022,\r\n                    Key = \u0022bestid\u0022,\r\n                    Expiry = 300000\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortTwo\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortOne\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022, \u0022sessionid\u0022, \u0022123\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/test\u0022, \u0022bestid\u0022, \u0022123\u0022)).Then(x =\u003E x.ThenTheFirstServiceIsCalled(1)).Then(x =\u003E x.ThenTheSecondServiceIsCalled(1)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_use_same_downstream_host_for_different_re_route",
        "Body": "{\r\n    var downstreamPortOne = RandomPortFinder.GetRandomPort();\r\n    var downstreamPortTwo = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{downstreamPortOne}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{downstreamPortTwo}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022CookieStickySessions\u0022,\r\n                    Key = \u0022sessionid\u0022,\r\n                    Expiry = 300000\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortOne\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortTwo\r\n                    }\r\n                }\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                UpstreamPathTemplate = \u0022/test\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022CookieStickySessions\u0022,\r\n                    Key = \u0022sessionid\u0022,\r\n                    Expiry = 300000\r\n                },\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortTwo\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = downstreamPortOne\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, 200)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, 200)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022, \u0022sessionid\u0022, \u0022123\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/test\u0022, \u0022sessionid\u0022, \u0022123\u0022)).Then(x =\u003E x.ThenTheFirstServiceIsCalled(2)).Then(x =\u003E x.ThenTheSecondServiceIsCalled(0)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TwoDownstreamServicesTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_fix_issue_194",
        "Body": "{\r\n    var consulPort = RandomPortFinder.GetRandomPort();\r\n    var servicePort1 = RandomPortFinder.GetRandomPort();\r\n    var servicePort2 = RandomPortFinder.GetRandomPort();\r\n    var downstreamServiceOneUrl = $\u0022http://localhost:{servicePort1}\u0022;\r\n    var downstreamServiceTwoUrl = $\u0022http://localhost:{servicePort2}\u0022;\r\n    var fakeConsulServiceDiscoveryUrl = $\u0022http://localhost:{consulPort}\u0022;\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/user/{user}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort1,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api/user/{user}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/api/product/{product}\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = servicePort2,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/api/product/{product}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            }\r\n        },\r\n        GlobalConfiguration = new FileGlobalConfiguration()\r\n        {\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider()\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022localhost\u0022,\r\n                Port = consulPort\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl, \u0022/api/user/info\u0022, 200, \u0022user\u0022)).And(x =\u003E x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl, \u0022/api/product/info\u0022, 200, \u0022product\u0022)).And(x =\u003E x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api/user/info?id=1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022user\u0022)).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/api/product/info?id=1\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022product\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpstreamHostTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_200_with_simple_url_and_hosts_match",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_and_hosts_match_multiple_re_routes",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                UpstreamHost = \u0022localhost\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 50000,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                UpstreamHost = \u0022DONTMATCH\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_and_hosts_match_multiple_re_routes_reversed",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 50000,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                UpstreamHost = \u0022DONTMATCH\u0022\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_simple_url_and_hosts_match_multiple_re_routes_reversed_with_no_host_first",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 50000,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            },\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                UpstreamHost = \u0022localhost\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E _steps.ThenTheResponseBodyShouldBe(\u0022Hello from Laura\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_404_with_simple_url_and_hosts_dont_match",
        "Body": "{\r\n    int port = RandomPortFinder.GetRandomPort();\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = port,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                UpstreamHost = \u0022127.0.0.20:5000\u0022\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E x.GivenThereIsAServiceRunningOn($\u0022http://localhost:{port}\u0022, \u0022/\u0022, 200, \u0022Hello from Laura\u0022)).And(x =\u003E _steps.GivenThereIsAConfiguration(configuration)).And(x =\u003E _steps.GivenOcelotIsRunning()).When(x =\u003E _steps.WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "WebSocketTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_proxy_websocket_input_to_downstream_service",
        "Body": "{\r\n    var downstreamPort = RandomPortFinder.GetRandomPort();\r\n    var downstreamHost = \u0022localhost\u0022;\r\n    var config = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamPathTemplate = \u0022/ws\u0022,\r\n                DownstreamScheme = \u0022ws\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = downstreamHost,\r\n                        Port = downstreamPort\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E _steps.GivenThereIsAConfiguration(config)).And(_ =\u003E _steps.StartFakeOcelotWithWebSockets()).And(_ =\u003E StartFakeDownstreamService($\u0022http://{downstreamHost}:{downstreamPort}\u0022, \u0022/ws\u0022)).When(_ =\u003E StartClient(\u0022ws://localhost:5000/\u0022)).Then(_ =\u003E ThenTheReceivedCountIs(10)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_proxy_websocket_input_to_downstream_service_and_use_load_balancer",
        "Body": "{\r\n    var downstreamPort = RandomPortFinder.GetRandomPort();\r\n    var downstreamHost = \u0022localhost\u0022;\r\n    var secondDownstreamPort = RandomPortFinder.GetRandomPort();\r\n    var secondDownstreamHost = \u0022localhost\u0022;\r\n    var config = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamPathTemplate = \u0022/ws\u0022,\r\n                DownstreamScheme = \u0022ws\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = downstreamHost,\r\n                        Port = downstreamPort\r\n                    },\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = secondDownstreamHost,\r\n                        Port = secondDownstreamPort\r\n                    }\r\n                },\r\n                LoadBalancerOptions = new FileLoadBalancerOptions\r\n                {\r\n                    Type = \u0022RoundRobin\u0022\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(_ =\u003E _steps.GivenThereIsAConfiguration(config)).And(_ =\u003E _steps.StartFakeOcelotWithWebSockets()).And(_ =\u003E StartFakeDownstreamService($\u0022http://{downstreamHost}:{downstreamPort}\u0022, \u0022/ws\u0022)).And(_ =\u003E StartSecondFakeDownstreamService($\u0022http://{secondDownstreamHost}:{secondDownstreamPort}\u0022, \u0022/ws\u0022)).When(_ =\u003E WhenIStartTheClients()).Then(_ =\u003E ThenBothDownstreamServicesAreCalled()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdministrationTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_response_401_with_call_re_routes_controller",
        "Body": "{\r\n    var configuration = new FileConfiguration();\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenOcelotIsRunning()).When(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/administration/configuration\u0022)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.Unauthorized)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_call_re_routes_controller",
        "Body": "{\r\n    var configuration = new FileConfiguration();\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenOcelotIsRunning()).And(x =\u003E GivenIHaveAnOcelotToken(\u0022/administration\u0022)).And(x =\u003E GivenIHaveAddedATokenToMyRequest()).When(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/administration/configuration\u0022)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_call_re_routes_controller_using_base_url_added_in_file_config",
        "Body": "{\r\n    _httpClient = new HttpClient();\r\n    _ocelotBaseUrl = \u0022http://localhost:5011\u0022;\r\n    _httpClient.BaseAddress = new Uri(_ocelotBaseUrl);\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            BaseUrl = _ocelotBaseUrl,\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenOcelotIsRunningWithNoWebHostBuilder(_ocelotBaseUrl)).And(x =\u003E GivenIHaveAnOcelotToken(\u0022/administration\u0022)).And(x =\u003E GivenIHaveAddedATokenToMyRequest()).When(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/administration/configuration\u0022)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_be_able_to_use_token_from_ocelot_a_on_ocelot_b",
        "Body": "{\r\n    var configuration = new FileConfiguration();\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenIdentityServerSigningEnvironmentalVariablesAreSet()).And(x =\u003E GivenOcelotIsRunning()).And(x =\u003E GivenIHaveAnOcelotToken(\u0022/administration\u0022)).And(x =\u003E GivenAnotherOcelotIsRunning(\u0022http://localhost:5017\u0022)).When(x =\u003E WhenIGetUrlOnTheSecondOcelot(\u0022/administration/configuration\u0022)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_file_configuration",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n            RequestIdKey = \u0022RequestId\u0022,\r\n            ServiceDiscoveryProvider = new FileServiceDiscoveryProvider\r\n            {\r\n                Scheme = \u0022https\u0022,\r\n                Host = \u0022127.0.0.1\u0022,\r\n            },\r\n        },\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 10,\r\n                    Region = \u0022Geoff\u0022,\r\n                },\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/test\u0022,\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 10,\r\n                    Region = \u0022Dave\u0022,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenOcelotIsRunning()).And(x =\u003E GivenIHaveAnOcelotToken(\u0022/administration\u0022)).And(x =\u003E GivenIHaveAddedATokenToMyRequest()).When(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/administration/configuration\u0022)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E ThenTheResponseShouldBe(configuration)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_file_configuration_edit_and_post_updated_version",
        "Body": "{\r\n    var initialConfiguration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n        },\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/test\u0022,\r\n            },\r\n        },\r\n    };\r\n    var updatedConfiguration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n        },\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamPathTemplate = \u0022/geoffrey\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022123.123.123\u0022,\r\n                        Port = 443,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/blooper/{productId}\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022post\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/test\u0022,\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(initialConfiguration)).And(x =\u003E GivenOcelotIsRunning()).And(x =\u003E GivenIHaveAnOcelotToken(\u0022/administration\u0022)).And(x =\u003E GivenIHaveAddedATokenToMyRequest()).When(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/administration/configuration\u0022)).When(x =\u003E WhenIPostOnTheApiGateway(\u0022/administration/configuration\u0022, updatedConfiguration)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E ThenTheResponseShouldBe(updatedConfiguration)).When(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/administration/configuration\u0022)).And(x =\u003E ThenTheResponseShouldBe(updatedConfiguration)).And(_ =\u003E ThenTheConfigurationIsSavedCorrectly(updatedConfiguration)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_activate_change_token_when_configuration_is_updated",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration(),\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenOcelotIsRunning()).And(x =\u003E GivenIHaveAnOcelotToken(\u0022/administration\u0022)).And(x =\u003E GivenIHaveAddedATokenToMyRequest()).When(x =\u003E WhenIPostOnTheApiGateway(\u0022/administration/configuration\u0022, configuration)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E TheChangeTokenShouldBeActive()).And(x =\u003E ThenTheResponseShouldBe(configuration)).When(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/administration/configuration\u0022)).And(x =\u003E ThenTheResponseShouldBe(configuration)).And(_ =\u003E ThenTheConfigurationIsSavedCorrectly(configuration)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_get_file_configuration_edit_and_post_updated_version_redirecting_route",
        "Body": "{\r\n    var fooPort = 47689;\r\n    var barPort = 27654;\r\n    var initialConfiguration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = fooPort,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamPathTemplate = \u0022/foo\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/foo\u0022,\r\n            },\r\n        },\r\n    };\r\n    var updatedConfiguration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n        },\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = barPort,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamPathTemplate = \u0022/bar\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/foo\u0022,\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(initialConfiguration)).And(x =\u003E GivenThereIsAFooServiceRunningOn($\u0022http://localhost:{fooPort}\u0022)).And(x =\u003E GivenThereIsABarServiceRunningOn($\u0022http://localhost:{barPort}\u0022)).And(x =\u003E GivenOcelotIsRunning()).And(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/foo\u0022)).Then(x =\u003E ThenTheResponseBodyShouldBe(\u0022foo\u0022)).And(x =\u003E GivenIHaveAnOcelotToken(\u0022/administration\u0022)).And(x =\u003E GivenIHaveAddedATokenToMyRequest()).When(x =\u003E WhenIPostOnTheApiGateway(\u0022/administration/configuration\u0022, updatedConfiguration)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E ThenTheResponseShouldBe(updatedConfiguration)).And(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/foo\u0022)).Then(x =\u003E ThenTheResponseBodyShouldBe(\u0022bar\u0022)).When(x =\u003E WhenIPostOnTheApiGateway(\u0022/administration/configuration\u0022, initialConfiguration)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E ThenTheResponseShouldBe(initialConfiguration)).And(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/foo\u0022)).Then(x =\u003E ThenTheResponseBodyShouldBe(\u0022foo\u0022)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_clear_region",
        "Body": "{\r\n    var initialConfiguration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n        },\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 10,\r\n                },\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/test\u0022,\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 10,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var regionToClear = \u0022gettest\u0022;\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(initialConfiguration)).And(x =\u003E GivenOcelotIsRunning()).And(x =\u003E GivenIHaveAnOcelotToken(\u0022/administration\u0022)).And(x =\u003E GivenIHaveAddedATokenToMyRequest()).When(x =\u003E WhenIDeleteOnTheApiGateway($\u0022/administration/outputcache/{regionToClear}\u0022)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.NoContent)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "should_return_response_200_with_call_re_routes_controller_when_using_own_identity_server_to_secure_admin_area",
        "Body": "{\r\n    var configuration = new FileConfiguration();\r\n    var identityServerRootUrl = \u0022http://localhost:5123\u0022;\r\n    Action\u003CJwtBearerOptions\u003E options = o =\u003E\r\n    {\r\n        o.Authority = identityServerRootUrl;\r\n        o.RequireHttpsMetadata = false;\r\n        o.TokenValidationParameters = new TokenValidationParameters\r\n        {\r\n            ValidateAudience = false,\r\n        };\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenThereIsAnIdentityServerOn(identityServerRootUrl, \u0022api\u0022)).And(x =\u003E GivenOcelotIsRunningWithIdentityServerSettings(options)).And(x =\u003E GivenIHaveAToken(identityServerRootUrl)).And(x =\u003E GivenIHaveAddedATokenToMyRequest()).When(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/administration/configuration\u0022)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CacheManagerTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_clear_region",
        "Body": "{\r\n    var initialConfiguration = new FileConfiguration\r\n    {\r\n        GlobalConfiguration = new FileGlobalConfiguration\r\n        {\r\n        },\r\n        Routes = new List\u003CFileRoute\u003E()\r\n        {\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 10,\r\n                },\r\n            },\r\n            new FileRoute()\r\n            {\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 80,\r\n                    },\r\n                },\r\n                DownstreamScheme = \u0022https\u0022,\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022get\u0022\r\n                },\r\n                UpstreamPathTemplate = \u0022/test\u0022,\r\n                FileCacheOptions = new FileCacheOptions\r\n                {\r\n                    TtlSeconds = 10,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    var regionToClear = \u0022gettest\u0022;\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(initialConfiguration)).And(x =\u003E GivenOcelotIsRunning()).And(x =\u003E GivenIHaveAnOcelotToken(\u0022/administration\u0022)).And(x =\u003E GivenIHaveAddedATokenToMyRequest()).When(x =\u003E WhenIDeleteOnTheApiGateway($\u0022/administration/outputcache/{regionToClear}\u0022)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.NoContent)).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HeaderTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_pass_remote_ip_address_if_as_x_forwarded_for_header",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 6773,\r\n                    }\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n                UpstreamHeaderTransform = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    {\r\n                        \u0022X-Forwarded-For\u0022,\r\n                        \u0022{RemoteIpAddress}\u0022\r\n                    }\r\n                },\r\n                HttpHandlerOptions = new FileHttpHandlerOptions\r\n                {\r\n                    AllowAutoRedirect = false\r\n                }\r\n            }\r\n        }\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAServiceRunningOn(\u0022http://localhost:6773\u0022, 200, \u0022X-Forwarded-For\u0022)).And(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenOcelotIsRunning()).When(x =\u003E WhenIGetUrlOnTheApiGateway(\u0022/\u0022)).Then(x =\u003E ThenTheStatusCodeShouldBe(HttpStatusCode.OK)).And(x =\u003E ThenXForwardedForIsSet()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ThreadSafeHeadersTestResult",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_same_response_for_each_different_header_under_load_to_downsteam_service",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51611,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenThereIsAServiceRunningOn(\u0022http://localhost:51611\u0022)).And(x =\u003E GivenOcelotIsRunning()).When(x =\u003E WhenIGetUrlOnTheApiGatewayMultipleTimesWithDifferentHeaderValues(\u0022/\u0022, 300)).Then(x =\u003E ThenTheSameHeaderValuesAreReturnedByTheDownstreamService()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ThreadSafeHeadersTests",
    "Message": null,
    "Methods": [
      {
        "Name": "should_return_same_response_for_each_different_header_under_load_to_downsteam_service",
        "Body": "{\r\n    var configuration = new FileConfiguration\r\n    {\r\n        Routes = new List\u003CFileRoute\u003E\r\n        {\r\n            new FileRoute\r\n            {\r\n                DownstreamPathTemplate = \u0022/\u0022,\r\n                DownstreamScheme = \u0022http\u0022,\r\n                DownstreamHostAndPorts = new List\u003CFileHostAndPort\u003E\r\n                {\r\n                    new FileHostAndPort\r\n                    {\r\n                        Host = \u0022localhost\u0022,\r\n                        Port = 51611,\r\n                    },\r\n                },\r\n                UpstreamPathTemplate = \u0022/\u0022,\r\n                UpstreamHttpMethod = new List\u003Cstring\u003E\r\n                {\r\n                    \u0022Get\u0022\r\n                },\r\n            },\r\n        },\r\n    };\r\n    this.Given(x =\u003E GivenThereIsAConfiguration(configuration)).And(x =\u003E GivenThereIsAServiceRunningOn(\u0022http://localhost:51611\u0022)).And(x =\u003E GivenOcelotIsRunning()).When(x =\u003E WhenIGetUrlOnTheApiGatewayMultipleTimesWithDifferentHeaderValues(\u0022/\u0022, 300)).Then(x =\u003E ThenTheSameHeaderValuesAreReturnedByTheDownstreamService()).BDDfy();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]