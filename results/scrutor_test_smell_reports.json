[
  {
    "Name": "DecoratedService",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Decorator2",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SomeRandomService",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Decorated",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Decorator",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OtherDecorated",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DisposableService",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DisposableServiceDecorator",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyEvent",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyEvent1Handler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyEvent2Handler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyEvent3Handler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyEventHandlerDecorator",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DecorationTests",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateMultipleLevels",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var outerDecorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var innerDecorator = Assert.IsType\u003CDecorator\u003E(outerDecorator.Inner);\r\n    _ = Assert.IsType\u003CDecorated\u003E(innerDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateDifferentServices",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, OtherDecorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIDecoratedService\u003E\u003E().ToArray();\r\n    Assert.Equal(2, instances.Length);\r\n    Assert.All(instances, x =\u003E Assert.IsType\u003CDecorator\u003E(x));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReplaceExistingServiceDescriptor",
        "Body": "{\r\n    var services = new ServiceCollection();\r\n    services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n    services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    var descriptor = services.GetDescriptor\u003CIDecoratedService\u003E();\r\n    Assert.Equal(typeof(IDecoratedService), descriptor.ServiceType);\r\n    Assert.NotNull(descriptor.ImplementationFactory);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateExistingInstance",
        "Body": "{\r\n    var existing = new Decorated();\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService\u003E(existing);\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(existing, decorated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratedType",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = provider.GetRequiredService\u003CIService\u003E();\r\n    var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    var decorated = Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    Assert.Same(validator, decorated.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanInjectServicesIntoDecoratingType",
        "Body": "{\r\n    var serviceProvider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIService, SomeRandomService\u003E();\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    var validator = serviceProvider.GetRequiredService\u003CIService\u003E();\r\n    var instance = serviceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n    Assert.Same(validator, decorator.InjectedService);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisposableServicesAreDisposed",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDisposableService, DisposableService\u003E();\r\n        services.Decorate\u003CIDisposableService, DisposableServiceDecorator\u003E();\r\n    });\r\n    DisposableServiceDecorator decorator;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var disposable = scope.ServiceProvider.GetRequiredService\u003CIDisposableService\u003E();\r\n        decorator = Assert.IsType\u003CDisposableServiceDecorator\u003E(disposable);\r\n    }\r\n\r\n    Assert.True(decorator.WasDisposed);\r\n    Assert.True(decorator.Inner.WasDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServicesWithSameServiceTypeAreOnlyDecoratedOnce",
        "Body": "{\r\n    // See issue: https://github.com/khellang/Scrutor/issues/125\r\n    static bool IsHandlerButNotDecorator(Type type)\r\n    {\r\n        var isHandlerDecorator = false;\r\n        var isHandler = type.GetInterfaces().Any(i =\u003E i.IsGenericType \u0026\u0026 i.GetGenericTypeDefinition() == typeof(IEventHandler\u003C\u003E));\r\n        if (isHandler)\r\n        {\r\n            isHandlerDecorator = type.GetInterfaces().Any(i =\u003E i == typeof(IHandlerDecorator));\r\n        }\r\n\r\n        return isHandler \u0026\u0026 !isHandlerDecorator;\r\n    }\r\n\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        // This should end up with 3 registrations of type IEventHandler\u003CMyEvent\u003E.\r\n        services.Scan(s =\u003E s.FromAssemblyOf\u003CDecorationTests\u003E().AddClasses(c =\u003E c.Where(IsHandlerButNotDecorator)).AsImplementedInterfaces().WithTransientLifetime());\r\n        // This should not decorate each registration 3 times.\r\n        services.Decorate(typeof(IEventHandler\u003C\u003E), typeof(MyEventHandlerDecorator\u003C\u003E));\r\n    });\r\n    var instances = provider.GetRequiredService\u003CIEnumerable\u003CIEventHandler\u003CMyEvent\u003E\u003E\u003E().ToList();\r\n    Assert.Equal(3, instances.Count);\r\n    Assert.All(instances, instance =\u003E\r\n    {\r\n        var decorator = Assert.IsType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(instance);\r\n        // The inner handler should not be a decorator.\r\n        Assert.IsNotType\u003CMyEventHandlerDecorator\u003CMyEvent\u003E\u003E(decorator.Handler);\r\n        // The return call count should only be 1, we\u0027ve only called Handle on one decorator.\r\n        // If there were nested decorators, this would return a higher call count as it\r\n        // would increment at each level.\r\n        Assert.Equal(1, decorator.Handle(new MyEvent()));\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue148_Decorate_IsAbleToDecorateConcreateTypes",
        "Body": "{\r\n    var sp = ConfigureProvider(sc =\u003E\r\n    {\r\n        sc.AddTransient\u003CIService, SomeRandomService\u003E().AddTransient\u003CDecoratedService\u003E().Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    var result = sp.GetService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotNull(result);\r\n    var inner = Assert.IsType\u003CDecoratedService\u003E(result.Inner);\r\n    Assert.NotNull(inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoDecorateRegisteredService",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var decorator = Assert.IsType\u003CDecorator\u003E(instance);\r\n        Assert.IsType\u003CDecorated\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsProvideScopedServiceProvider",
        "Body": "{\r\n    IServiceProvider actual = default;\r\n    var decorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E\r\n        {\r\n            actual = sp;\r\n            return null;\r\n        }),\r\n    };\r\n    foreach (var decorationMethod in decorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n            decorationMethod(services);\r\n        });\r\n        using var scope = provider.CreateScope();\r\n        var expected = scope.ServiceProvider;\r\n        _ = scope.ServiceProvider.GetService\u003CIDecoratedService\u003E();\r\n        Assert.Same(expected, actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorateThrowsDecorationExceptionWhenNoTypeRegistered",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate\u003CIDecoratedService, Decorator\u003E()));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), typeof(Decorator))));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate((IDecoratedService sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorated())));\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IDecoratedService), (object obj) =\u003E new Decorated())));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDecorateReturnsBoolResult",
        "Body": "{\r\n    var allDecorationMethods = new Func\u003CIServiceCollection, bool\u003E[]\r\n    {\r\n        sc =\u003E sc.TryDecorate\u003CIDecoratedService, Decorator\u003E(),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), typeof(Decorator)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj, IServiceProvider sp) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate((IDecoratedService obj) =\u003E new Decorator(obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj, IServiceProvider sp) =\u003E new Decorator((IDecoratedService)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(IDecoratedService), (object obj) =\u003E new Decorator((IDecoratedService)obj))\r\n    };\r\n    foreach (var decorationMethod in allDecorationMethods)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            var isDecorated = decorationMethod(services);\r\n            Assert.False(isDecorated);\r\n            services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n            isDecorated = decorationMethod(services);\r\n            Assert.True(isDecorated);\r\n        });\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedTransientServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddTransient\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n    Assert.NotEqual(service1, service2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedScopedServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.NotSame(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratedSingletonServiceRetainsScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIDecoratedService, Decorated\u003E();\r\n        services.Decorate\u003CIDecoratedService, Decorator\u003E();\r\n    });\r\n    object service1;\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        service1 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n\r\n    using (var scope = provider.CreateScope())\r\n    {\r\n        var service2 = scope.ServiceProvider.GetRequiredService\u003CIDecoratedService\u003E();\r\n        Assert.Same(service1, service2);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DependentServicesRetainTheirOwnScope",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddScoped\u003CIService, SomeRandomService\u003E();\r\n        services.AddTransient\u003CDecoratedService\u003E();\r\n        services.Decorate\u003CDecoratedService, Decorator2\u003E();\r\n    });\r\n    using var scope = provider.CreateScope();\r\n    var decorator1 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    var decorator2 = scope.ServiceProvider.GetRequiredService\u003CDecoratedService\u003E() as Decorator2;\r\n    Assert.NotEqual(decorator1, decorator2);\r\n    Assert.NotEqual(decorator1.Inner, decorator2.Inner);\r\n    Assert.Equal(decorator1.Inner.Dependency, decorator2.Inner.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OpenGenericDecorationTests",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyQuery",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyResult",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyQueryHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "QueryHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyConstrainedQuery",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyConstrainedQueryHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConstrainedDecoratorQueryHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoggingQueryHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TelemetryQueryHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DecoratorQueryHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MySpecializedQueryHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Message",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MessageProcessor",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GenericDecorator",
    "Message": null,
    "Methods": [
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnClass",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(TelemetryQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var telemetryDecorator = Assert.IsType\u003CTelemetryQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(telemetryDecorator.Inner);\r\n    Assert.IsType\u003CMyQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingNonRegisteredOpenGenericServiceThrows",
        "Body": "{\r\n    Assert.Throws\u003CDecorationException\u003E(() =\u003E ConfigureProvider(services =\u003E services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(QueryHandler\u003C, \u003E))));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanDecorateOpenGenericTypeBasedOnGrandparentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var loggingDecorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(loggingDecorator.Inner);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecoratingOpenGenericTypeBasedOnGrandparentInterfaceDoesNotDecorateParentInterface",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CISpecializedQueryHandler, MySpecializedQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MySpecializedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CISpecializedQueryHandler\u003E();\r\n    Assert.IsType\u003CMySpecializedQueryHandler\u003E(instance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsSkipOpenGenericServiceRegistrations",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(x =\u003E x.FromAssemblyOf\u003CMessage\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IMessageProcessor\u003C\u003E))).AsImplementedInterfaces().WithTransientLifetime());\r\n        services.Decorate(typeof(IMessageProcessor\u003C\u003E), typeof(GenericDecorator\u003C\u003E));\r\n    });\r\n    var processor = provider.GetRequiredService\u003CIMessageProcessor\u003CMessage\u003E\u003E();\r\n    var decorator = Assert.IsType\u003CGenericDecorator\u003CMessage\u003E\u003E(processor);\r\n    Assert.IsType\u003CMessageProcessor\u003E(decorator.Decoratee);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OpenGenericDecoratorsCanBeConstrained",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n        services.AddSingleton\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E, MyConstrainedQueryHandler\u003E();\r\n        services.Decorate(typeof(IQueryHandler\u003C, \u003E), typeof(ConstrainedDecoratorQueryHandler\u003C, \u003E));\r\n    });\r\n    var instance = provider.GetRequiredService\u003CIQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n    var constrainedInstance = provider.GetRequiredService\u003CIQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E();\r\n    Assert.IsType\u003CMyQueryHandler\u003E(instance);\r\n    Assert.IsType\u003CConstrainedDecoratorQueryHandler\u003CMyConstrainedQuery, MyResult\u003E\u003E(constrainedInstance);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecorationFunctionsDoSupportOpenGenericType",
        "Body": "{\r\n    var allDecorationFunctions = new Action\u003CIServiceCollection\u003E[]\r\n    {\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), typeof(LoggingQueryHandler\u003C, \u003E)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj, IServiceProvider sp) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.Decorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n        sc =\u003E sc.TryDecorate(typeof(QueryHandler\u003C, \u003E), (object obj) =\u003E new LoggingQueryHandler\u003CMyQuery, MyResult\u003E((IQueryHandler\u003CMyQuery, MyResult\u003E)obj)),\r\n    };\r\n    foreach (var decorationFunction in allDecorationFunctions)\r\n    {\r\n        var provider = ConfigureProvider(services =\u003E\r\n        {\r\n            services.AddSingleton\u003CQueryHandler\u003CMyQuery, MyResult\u003E, MyQueryHandler\u003E();\r\n            decorationFunction(services);\r\n        });\r\n        var instance = provider.GetRequiredService\u003CQueryHandler\u003CMyQuery, MyResult\u003E\u003E();\r\n        var decorator = Assert.IsType\u003CLoggingQueryHandler\u003CMyQuery, MyResult\u003E\u003E(instance);\r\n        Assert.IsType\u003CMyQueryHandler\u003E(decorator.Inner);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScanningTests",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TransientService1",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TransientService2",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TransientService",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScopedService1",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScopedService2",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "QueryHandler",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OpenGeneric",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PartiallyClosedGeneric",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CombinedService",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "WrongInheritance",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DuplicateInheritance",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DefaultAttributes",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CompilerGenerated",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CombinedService2",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GenericAttribute",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MixedAttribute",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClassInChildNamespace",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TransientService",
    "Message": null,
    "Methods": [
      {
        "Name": "Scan_TheseTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromTypes\u003CTransientService1, TransientService2\u003E().AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithSingletonLifetime());\r\n    Assert.Equal(2, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), x.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_None",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(8, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_SkipIfExists",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Skip).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(4, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceDefault",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace()).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceServiceTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(1, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_ReplaceImplementationTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ImplementationType)).AsImplementedInterfaces().WithSingletonLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(3, services.Count(x =\u003E x.ServiceType == typeof(ITransientService)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsingRegistrationStrategy_Throw",
        "Body": "{\r\n    Assert.Throws\u003CDuplicateTypeRegistrationException\u003E(() =\u003E Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces().WithTransientLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).UsingRegistrationStrategy(RegistrationStrategy.Throw).AsImplementedInterfaces().WithSingletonLifetime()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterTypesToScan",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).AsImplementedInterfaces(x =\u003E x != typeof(IOtherInheritance)).WithTransientLifetime());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterAsSpecificType",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CITransientService\u003E()).As\u003CITransientService\u003E());\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanSpecifyLifetime",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().WithScopedLifetime());\r\n    var services = Collection.GetDescriptors\u003CIScopedService\u003E();\r\n    Assert.Equal(services, Collection);\r\n    Assert.All(services, service =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n        Assert.Equal(typeof(IScopedService), service.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LifetimeIsPropagatedToAllRegistrations",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIScopedService\u003E()).AsImplementedInterfaces().AsSelf().WithScopedLifetime());\r\n    Assert.All(Collection, service =\u003E Assert.Equal(ServiceLifetime.Scoped, service.Lifetime));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanRegisterGenericTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIScopedService\u003E().AddClasses(classes =\u003E classes.AssignableTo(typeof(IQueryHandler\u003C, \u003E))).AsImplementedInterfaces().WithScopedLifetime());\r\n    var service = Collection.GetDescriptor\u003CIQueryHandler\u003Cstring, int\u003E\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Scoped, service.Lifetime);\r\n    Assert.Equal(typeof(QueryHandler), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanScanUsingAttributes",
        "Body": "{\r\n    var interfaces = new[]\r\n    {\r\n        typeof(ITransientService),\r\n        typeof(ITransientServiceToCombine),\r\n        typeof(IScopedServiceToCombine),\r\n        typeof(ISingletonServiceToCombine),\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableToAny(interfaces)).UsingAttributes());\r\n    Assert.Equal(4, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientService\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService1), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanFilterGenericAttributeTypes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIGenericAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIGenericAttribute\u003E()).UsingAttributes());\r\n    Assert.Equal(1, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CIGenericAttribute\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(GenericAttribute), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanCreateDefault",
        "Body": "{\r\n    var types = new[]\r\n    {\r\n        typeof(IDefault1),\r\n        typeof(IDefault2),\r\n        typeof(IDefault3Level1),\r\n        typeof(IDefault3Level2)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses(t =\u003E t.AssignableTo\u003CDefaultAttributes\u003E()).UsingAttributes());\r\n    var remainingSetOfTypes = Collection.Select(descriptor =\u003E descriptor.ServiceType).Except(types.Concat(new[] { typeof(DefaultAttributes) })).ToList();\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.Empty(remainingSetOfTypes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnWrongInheritance",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIWrongInheritanceA\u003E().AddClasses().UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.WrongInheritance\u0022\u0022 is not assignable to \u0022\u0022Scrutor.Tests.IWrongInheritanceA\u0022\u0022.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicate",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIDuplicateInheritance\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIDuplicateInheritance\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.DuplicateInheritance\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ThrowsOnDuplicateWithMixedAttributes",
        "Body": "{\r\n    var collection = new ServiceCollection();\r\n    var ex = Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CIMixedAttribute\u003E().AddClasses(t =\u003E t.AssignableTo\u003CIMixedAttribute\u003E()).UsingAttributes()));\r\n    Assert.Equal(@\u0022Type \u0022\u0022Scrutor.Tests.MixedAttribute\u0022\u0022 has multiple ServiceDescriptor attributes with the same service type.\u0022, ex.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanHandleMultipleAttributes",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientServiceToCombine\u003E().AddClasses(t =\u003E t.AssignableTo\u003CITransientServiceToCombine\u003E()).UsingAttributes());\r\n    var transientService = Collection.GetDescriptor\u003CITransientServiceToCombine\u003E();\r\n    Assert.NotNull(transientService);\r\n    Assert.Equal(ServiceLifetime.Transient, transientService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), transientService.ImplementationType);\r\n    var scopedService = Collection.GetDescriptor\u003CIScopedServiceToCombine\u003E();\r\n    Assert.NotNull(scopedService);\r\n    Assert.Equal(ServiceLifetime.Scoped, scopedService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), scopedService.ImplementationType);\r\n    var singletonService = Collection.GetDescriptor\u003CISingletonServiceToCombine\u003E();\r\n    Assert.NotNull(singletonService);\r\n    Assert.Equal(ServiceLifetime.Singleton, singletonService.Lifetime);\r\n    Assert.Equal(typeof(CombinedService), singletonService.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface().WithTransientLifetime());\r\n    Assert.Equal(8, Collection.Count);\r\n    var services = Collection.GetDescriptors\u003CITransientService\u003E();\r\n    Assert.NotNull(services);\r\n    Assert.All(services, s =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Transient, s.Lifetime);\r\n        Assert.Equal(typeof(ITransientService), s.ServiceType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AutoRegisterAsMatchingInterfaceSameNamespaceOnly",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CITransientService\u003E().AddClasses().AsMatchingInterface((t, x) =\u003E x.InNamespaceOf(t)).WithTransientLifetime());\r\n    Assert.Equal(7, Collection.Count);\r\n    var service = Collection.GetDescriptor\u003CITransientService\u003E();\r\n    Assert.NotNull(service);\r\n    Assert.Equal(ServiceLifetime.Transient, service.Lifetime);\r\n    Assert.Equal(typeof(TransientService), service.ImplementationType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRegisterOpenGenericTypes",
        "Body": "{\r\n    var genericTypes = new[]\r\n    {\r\n        typeof(OpenGeneric\u003C\u003E),\r\n        typeof(QueryHandler\u003C, \u003E),\r\n        typeof(PartiallyClosedGeneric\u003C\u003E)\r\n    };\r\n    Collection.Scan(scan =\u003E scan.FromTypes(genericTypes).AddClasses().AsImplementedInterfaces());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cint\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIOpenGeneric\u003Cstring\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cstring, float\u003E\u003E());\r\n    Assert.NotNull(provider.GetService\u003CIQueryHandler\u003Cdouble, Guid\u003E\u003E());\r\n    // We don\u0027t register partially closed generic types.\r\n    Assert.Null(provider.GetService\u003CIPartiallyClosedGeneric\u003Cstring, int\u003E\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotIncludeCompilerGeneratedTypes",
        "Body": "{\r\n    Assert.Empty(Collection.Scan(scan =\u003E scan.FromType\u003CCompilerGenerated\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldNotRegisterTypesInSubNamespace",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssembliesOf(GetType()).AddClasses(classes =\u003E classes.InExactNamespaceOf\u003CITransientService\u003E()).AsSelf());\r\n    var provider = Collection.BuildServiceProvider();\r\n    Assert.Null(provider.GetService\u003CClassInChildNamespace\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScanShouldCreateSeparateRegistrationsPerInterface",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsImplementedInterfaces().WithSingletonLifetime().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelf().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    Assert.All(Collection, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.Equal(typeof(CombinedService2), x.ImplementationType);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldForwardRegistrationsToClass",
        "Body": "{\r\n    Collection.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    Assert.Equal(5, Collection.Count);\r\n    var service1 = Collection.GetDescriptor\u003CCombinedService2\u003E();\r\n    Assert.NotNull(service1);\r\n    Assert.Equal(ServiceLifetime.Singleton, service1.Lifetime);\r\n    Assert.Equal(typeof(CombinedService2), service1.ImplementationType);\r\n    var interfaceDescriptors = Collection.Where(x =\u003E x.ImplementationType != typeof(CombinedService2)).ToList();\r\n    Assert.Equal(4, interfaceDescriptors.Count);\r\n    Assert.All(interfaceDescriptors, x =\u003E\r\n    {\r\n        Assert.Equal(ServiceLifetime.Singleton, x.Lifetime);\r\n        Assert.NotNull(x.ImplementationFactory);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesShouldCreateTrueSingletons",
        "Body": "{\r\n    var provider = ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CCombinedService2\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n    var instance1 = provider.GetRequiredService\u003CCombinedService2\u003E();\r\n    var instance2 = provider.GetRequiredService\u003CIDefault1\u003E();\r\n    var instance3 = provider.GetRequiredService\u003CIDefault2\u003E();\r\n    var instance4 = provider.GetRequiredService\u003CIDefault3Level2\u003E();\r\n    var instance5 = provider.GetRequiredService\u003CIDefault3Level1\u003E();\r\n    Assert.Same(instance1, instance2);\r\n    Assert.Same(instance1, instance3);\r\n    Assert.Same(instance1, instance4);\r\n    Assert.Same(instance1, instance5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AsSelfWithInterfacesHandlesOpenGenericTypes",
        "Body": "{\r\n    ConfigureProvider(services =\u003E\r\n    {\r\n        services.Scan(scan =\u003E scan.FromAssemblyOf\u003CCombinedService2\u003E().AddClasses(classes =\u003E classes.AssignableTo\u003CIOtherInheritance\u003E()).AsSelfWithInterfaces().WithSingletonLifetime());\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]